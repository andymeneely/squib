# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi hidden-definitions

# typed: autogenerated

module ActiveSupport
  def parse_json_times(); end

  def parse_json_times=(val); end

  def test_order(); end

  def test_order=(val); end
end

module ActiveSupport::ActionableError
end

module ActiveSupport::ActionableError::ClassMethods
  def action(name, &block); end
end

module ActiveSupport::ActionableError::ClassMethods
end

class ActiveSupport::ActionableError::NonActionable
end

class ActiveSupport::ActionableError::NonActionable
end

module ActiveSupport::ActionableError
  extend ::ActiveSupport::Concern
  def self.actions(error); end

  def self.dispatch(error, name); end
end

class ActiveSupport::ArrayInquirer
  def any?(*candidates); end
end

class ActiveSupport::ArrayInquirer
end

module ActiveSupport::Autoload
  def autoload(const_name, path=T.unsafe(nil)); end

  def autoload_at(path); end

  def autoload_under(path); end

  def autoloads(); end

  def eager_autoload(); end

  def eager_load!(); end
end

module ActiveSupport::Autoload
  def self.extended(base); end
end

class ActiveSupport::BacktraceCleaner
  def add_filter(&block); end

  def add_silencer(&block); end

  def filter(backtrace, kind=T.unsafe(nil)); end

  def remove_filters!(); end

  def remove_silencers!(); end
  FORMATTED_GEMS_PATTERN = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Benchmarkable
  def benchmark(message=T.unsafe(nil), options=T.unsafe(nil)); end
end

module ActiveSupport::Benchmarkable
end

module ActiveSupport::BigDecimalWithDefaultFormat
  def to_s(format=T.unsafe(nil)); end
end

module ActiveSupport::BigDecimalWithDefaultFormat
end

module ActiveSupport::Cache
  UNIVERSAL_OPTIONS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Cache::Entry
  def bytesize(); end

  def dup_value!(); end

  def expired?(); end

  def expires_at(); end

  def expires_at=(value); end

  def initialize(value, compress: T.unsafe(nil), compress_threshold: T.unsafe(nil), version: T.unsafe(nil), expires_in: T.unsafe(nil), **arg); end

  def mismatched?(version); end

  def value(); end

  def version(); end
  DEFAULT_COMPRESS_LIMIT = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Cache::Entry
end

class ActiveSupport::Cache::FileStore
  include ::ActiveSupport::Cache::Strategy::LocalCache
  def cache_path(); end

  def initialize(cache_path, **options); end
end

class ActiveSupport::Cache::FileStore
  def self.supports_cache_versioning?(); end
end

class ActiveSupport::Cache::MemoryStore
  def prune(target_size, max_time=T.unsafe(nil)); end

  def pruning?(); end

  def synchronize(&block); end
end

ActiveSupport::Cache::MemoryStore::DEFAULT_CODER = ActiveSupport::Cache::MemoryStore::DupCoder

module ActiveSupport::Cache::MemoryStore::DupCoder
end

module ActiveSupport::Cache::MemoryStore::DupCoder
  def self.dump(entry); end

  def self.load(entry); end
end

class ActiveSupport::Cache::MemoryStore
  def self.supports_cache_versioning?(); end
end

module ActiveSupport::Cache::NullCoder
end

module ActiveSupport::Cache::NullCoder
  def self.dump(entry); end

  def self.load(payload); end
end

class ActiveSupport::Cache::NullStore
  include ::ActiveSupport::Cache::Strategy::LocalCache
end

class ActiveSupport::Cache::NullStore
  def self.supports_cache_versioning?(); end
end

class ActiveSupport::Cache::Store
  def cleanup(options=T.unsafe(nil)); end

  def clear(options=T.unsafe(nil)); end

  def decrement(name, amount=T.unsafe(nil), options=T.unsafe(nil)); end

  def delete(name, options=T.unsafe(nil)); end

  def delete_matched(matcher, options=T.unsafe(nil)); end

  def delete_multi(names, options=T.unsafe(nil)); end

  def exist?(name, options=T.unsafe(nil)); end

  def fetch(name, options=T.unsafe(nil), &block); end

  def fetch_multi(*names); end

  def increment(name, amount=T.unsafe(nil), options=T.unsafe(nil)); end

  def initialize(options=T.unsafe(nil)); end

  def logger(); end

  def logger=(val); end

  def mute(); end

  def options(); end

  def read(name, options=T.unsafe(nil)); end

  def read_multi(*names); end

  def silence(); end

  def silence!(); end

  def silence?(); end

  def write(name, value, options=T.unsafe(nil)); end

  def write_multi(hash, options=T.unsafe(nil)); end
end

ActiveSupport::Cache::Store::DEFAULT_CODER = Marshal

class ActiveSupport::Cache::Store
  def self.logger(); end

  def self.logger=(val); end
end

module ActiveSupport::Cache::Strategy
end

module ActiveSupport::Cache::Strategy::LocalCache
  def cleanup(**options); end

  def clear(**options); end

  def decrement(name, amount=T.unsafe(nil), **options); end

  def delete_matched(matcher, options=T.unsafe(nil)); end

  def increment(name, amount=T.unsafe(nil), **options); end

  def middleware(); end

  def with_local_cache(); end
end

module ActiveSupport::Cache::Strategy::LocalCache
end

module ActiveSupport::Cache::Strategy
end

module ActiveSupport::Cache
  def self.expand_cache_key(key, namespace=T.unsafe(nil)); end

  def self.lookup_store(store=T.unsafe(nil), *parameters); end
end

module ActiveSupport::Callbacks
  def run_callbacks(kind); end
  CALLBACK_FILTER_TYPES = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Callbacks::CallTemplate
  def expand(target, value, block); end

  def initialize(target, method, arguments, block); end

  def inverted_lambda(); end

  def make_lambda(); end
end

class ActiveSupport::Callbacks::CallTemplate
  def self.build(filter, callback); end
end

class ActiveSupport::Callbacks::Callback
  def apply(callback_sequence); end

  def chain_config(); end

  def current_scopes(); end

  def duplicates?(other); end

  def filter(); end

  def initialize(name, filter, kind, options, chain_config); end

  def kind(); end

  def kind=(kind); end

  def matches?(_kind, _filter); end

  def merge_conditional_options(chain, if_option:, unless_option:); end

  def name(); end

  def name=(name); end

  def raw_filter(); end
end

class ActiveSupport::Callbacks::Callback
  def self.build(chain, filter, kind, options); end
end

class ActiveSupport::Callbacks::CallbackChain
  include ::Enumerable
  def append(*callbacks); end

  def chain(); end

  def clear(); end

  def compile(); end

  def config(); end

  def delete(o); end

  def each(&block); end

  def empty?(); end

  def index(o); end

  def initialize(name, config); end

  def insert(index, o); end

  def name(); end

  def prepend(*callbacks); end
end

class ActiveSupport::Callbacks::CallbackChain
end

class ActiveSupport::Callbacks::CallbackSequence
  def after(&after); end

  def around(call_template, user_conditions); end

  def before(&before); end

  def expand_call_template(arg, block); end

  def final?(); end

  def initialize(nested=T.unsafe(nil), call_template=T.unsafe(nil), user_conditions=T.unsafe(nil)); end

  def invoke_after(arg); end

  def invoke_before(arg); end

  def nested(); end

  def skip?(arg); end
end

class ActiveSupport::Callbacks::CallbackSequence
end

module ActiveSupport::Callbacks::ClassMethods
  def __update_callbacks(name); end

  def define_callbacks(*names); end

  def get_callbacks(name); end

  def normalize_callback_params(filters, block); end

  def reset_callbacks(name); end

  def set_callback(name, *filter_list, &block); end

  def set_callbacks(name, callbacks); end

  def skip_callback(name, *filter_list, &block); end
end

module ActiveSupport::Callbacks::Conditionals
end

class ActiveSupport::Callbacks::Conditionals::Value
  def call(target, value); end

  def initialize(&block); end
end

class ActiveSupport::Callbacks::Conditionals::Value
end

module ActiveSupport::Callbacks::Conditionals
end

module ActiveSupport::Callbacks::Filters
end

class ActiveSupport::Callbacks::Filters::After
end

class ActiveSupport::Callbacks::Filters::After
  def self.build(callback_sequence, user_callback, user_conditions, chain_config); end
end

class ActiveSupport::Callbacks::Filters::Before
end

class ActiveSupport::Callbacks::Filters::Before
  def self.build(callback_sequence, user_callback, user_conditions, chain_config, filter, name); end
end

class ActiveSupport::Callbacks::Filters::Environment
  def halted(); end

  def halted=(_); end

  def target(); end

  def target=(_); end

  def value(); end

  def value=(_); end
end

class ActiveSupport::Callbacks::Filters::Environment
  def self.[](*arg); end

  def self.members(); end
end

module ActiveSupport::Callbacks::Filters
end

module ActiveSupport::Callbacks
  extend ::ActiveSupport::Concern
end

module ActiveSupport::Concern
  def append_features(base); end

  def class_methods(&class_methods_module_definition); end

  def included(base=T.unsafe(nil), &block); end

  def prepend_features(base); end

  def prepended(base=T.unsafe(nil), &block); end
end

class ActiveSupport::Concern::MultipleIncludedBlocks
  def initialize(); end
end

class ActiveSupport::Concern::MultipleIncludedBlocks
end

class ActiveSupport::Concern::MultiplePrependBlocks
  def initialize(); end
end

class ActiveSupport::Concern::MultiplePrependBlocks
end

module ActiveSupport::Concern
  def self.extended(base); end
end

module ActiveSupport::Concurrency
end

class ActiveSupport::Concurrency::ShareLock
  include ::MonitorMixin
  def exclusive(purpose: T.unsafe(nil), compatible: T.unsafe(nil), after_compatible: T.unsafe(nil), no_wait: T.unsafe(nil)); end

  def initialize(); end

  def raw_state(); end

  def sharing(); end

  def start_exclusive(purpose: T.unsafe(nil), compatible: T.unsafe(nil), no_wait: T.unsafe(nil)); end

  def start_sharing(); end

  def stop_exclusive(compatible: T.unsafe(nil)); end

  def stop_sharing(); end

  def yield_shares(purpose: T.unsafe(nil), compatible: T.unsafe(nil), block_share: T.unsafe(nil)); end
end

class ActiveSupport::Concurrency::ShareLock
end

module ActiveSupport::Concurrency
end

module ActiveSupport::Configurable
  def config(); end
end

module ActiveSupport::Configurable::ClassMethods
  def config(); end

  def configure(); end
end

class ActiveSupport::Configurable::Configuration
  def compile_methods!(); end
end

class ActiveSupport::Configurable::Configuration
  def self.compile_methods!(keys); end
end

module ActiveSupport::Configurable
  extend ::ActiveSupport::Concern
end

class ActiveSupport::ConfigurationFile
  def initialize(content_path); end

  def parse(context: T.unsafe(nil), **options); end
end

class ActiveSupport::ConfigurationFile::FormatError
end

class ActiveSupport::ConfigurationFile::FormatError
end

class ActiveSupport::ConfigurationFile
  def self.parse(content_path, **options); end
end

class ActiveSupport::CurrentAttributes
  include ::ActiveSupport::Callbacks
  def __callbacks(); end

  def __callbacks?(); end

  def _reset_callbacks(); end

  def _run_reset_callbacks(&block); end

  def attributes(); end

  def attributes=(attributes); end

  def reset(); end

  def set(set_attributes); end
end

class ActiveSupport::CurrentAttributes
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveSupport::DescendantsTracker
  def self.__callbacks(); end

  def self.__callbacks=(value); end

  def self.__callbacks?(); end

  def self._reset_callbacks(); end

  def self._reset_callbacks=(value); end

  def self.after_reset(&block); end

  def self.attribute(*names); end

  def self.before_reset(&block); end

  def self.clear_all(); end

  def self.instance(); end

  def self.reset(*arg, &arg1); end

  def self.reset_all(); end

  def self.resets(&block); end

  def self.set(*arg, &arg1); end
end

module ActiveSupport::Dependencies
  def _eager_load_paths(); end

  def _eager_load_paths=(val); end

  def autoload_module!(into, const_name, qualified_name, path_suffix); end

  def autoload_once_paths(); end

  def autoload_once_paths=(val); end

  def autoload_paths(); end

  def autoload_paths=(val); end

  def autoloadable_module?(path_suffix); end

  def autoloaded?(desc); end

  def autoloaded_constants(); end

  def autoloaded_constants=(val); end

  def clear(); end

  def constant_watch_stack(); end

  def constant_watch_stack=(val); end

  def constantize(name); end

  def depend_on(file_name, message=T.unsafe(nil)); end

  def explicitly_unloadable_constants(); end

  def explicitly_unloadable_constants=(val); end

  def history(); end

  def history=(val); end

  def hook!(); end

  def interlock(); end

  def interlock=(val); end

  def load?(); end

  def load_file(path, const_paths=T.unsafe(nil)); end

  def load_missing_constant(from_mod, const_name); end

  def load_once_path?(path); end

  def loadable_constants_for_path(path, bases=T.unsafe(nil)); end

  def loaded(); end

  def loaded=(val); end

  def loading(); end

  def loading=(val); end

  def log(message); end

  def logger(); end

  def logger=(val); end

  def mark_for_unload(const_desc); end

  def mechanism(); end

  def mechanism=(val); end

  def new_constants_in(*descs); end

  def qualified_const_defined?(path); end

  def qualified_name_for(mod, name); end

  def reference(klass); end

  def remove_constant(const); end

  def remove_unloadable_constants!(); end

  def require_or_load(file_name, const_path=T.unsafe(nil)); end

  def safe_constantize(name); end

  def search_for_file(path_suffix); end

  def to_constant_name(desc); end

  def unhook!(); end

  def verbose(); end

  def verbose=(val); end

  def warnings_on_first_load(); end

  def warnings_on_first_load=(val); end

  def will_unload?(const_desc); end
  Reference = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Dependencies::Blamable
  def blame_file!(file); end

  def blamed_files(); end

  def copy_blame!(exc); end

  def describe_blame(); end
end

module ActiveSupport::Dependencies::Blamable
end

class ActiveSupport::Dependencies::ClassCache
  def [](key); end

  def clear!(); end

  def empty?(); end

  def get(key); end

  def key?(key); end

  def safe_get(key); end

  def store(klass); end
end

class ActiveSupport::Dependencies::ClassCache
end

class ActiveSupport::Dependencies::Interlock
  def done_running(); end

  def done_unloading(); end

  def loading(); end

  def permit_concurrent_loads(); end

  def raw_state(&block); end

  def running(); end

  def start_running(); end

  def start_unloading(); end

  def unloading(); end
end

class ActiveSupport::Dependencies::Interlock
end

module ActiveSupport::Dependencies::Loadable
  def load_dependency(file); end

  def require_dependency(file_name, message=T.unsafe(nil)); end

  def require_or_load(file_name); end

  def unloadable(const_desc); end
end

module ActiveSupport::Dependencies::Loadable
  def self.exclude_from(base); end

  def self.include_into(base); end
end

module ActiveSupport::Dependencies::ModuleConstMissing
  def const_missing(const_name); end

  def guess_for_anonymous(const_name); end

  def unloadable(const_desc=T.unsafe(nil)); end
end

module ActiveSupport::Dependencies::ModuleConstMissing
  def self.append_features(base); end

  def self.exclude_from(base); end

  def self.include_into(base); end
end

class ActiveSupport::Dependencies::WatchStack
  include ::Enumerable
  def each(&block); end

  def new_constants(); end

  def watch_namespaces(namespaces); end

  def watching(); end

  def watching?(); end
end

class ActiveSupport::Dependencies::WatchStack
end

module ActiveSupport::Dependencies
  extend ::ActiveSupport::Dependencies
  def self.load_interlock(); end

  def self.run_interlock(); end

  def self.unload_interlock(); end
end

class ActiveSupport::Deprecation
  include ::Singleton
  include ::ActiveSupport::Deprecation::InstanceDelegator
  include ::ActiveSupport::Deprecation::Behavior
  include ::ActiveSupport::Deprecation::Reporting
  include ::ActiveSupport::Deprecation::Disallowed
  include ::ActiveSupport::Deprecation::MethodWrapper
  def deprecation_horizon(); end

  def deprecation_horizon=(deprecation_horizon); end

  def initialize(deprecation_horizon=T.unsafe(nil), gem_name=T.unsafe(nil)); end
end

module ActiveSupport::Deprecation::Behavior
  def behavior(); end

  def behavior=(behavior); end

  def debug(); end

  def debug=(debug); end

  def disallowed_behavior(); end

  def disallowed_behavior=(behavior); end
end

module ActiveSupport::Deprecation::Behavior
end

module ActiveSupport::Deprecation::DeprecatedConstantAccessor
end

module ActiveSupport::Deprecation::DeprecatedConstantAccessor
  def self.included(base); end
end

class ActiveSupport::Deprecation::DeprecatedConstantProxy
  def hash(*arg, &arg1); end

  def initialize(old_const, new_const, deprecator=T.unsafe(nil), message: T.unsafe(nil)); end

  def instance_methods(*arg, &arg1); end

  def name(*arg, &arg1); end

  def respond_to?(*arg, &arg1); end
end

class ActiveSupport::Deprecation::DeprecatedConstantProxy
  def self.new(*args, **options, &block); end
end

class ActiveSupport::Deprecation::DeprecatedInstanceVariableProxy
  def initialize(instance, method, var=T.unsafe(nil), deprecator=T.unsafe(nil)); end
end

class ActiveSupport::Deprecation::DeprecatedInstanceVariableProxy
end

class ActiveSupport::Deprecation::DeprecatedObjectProxy
  def initialize(object, message, deprecator=T.unsafe(nil)); end
end

class ActiveSupport::Deprecation::DeprecatedObjectProxy
end

class ActiveSupport::Deprecation::DeprecationProxy
end

class ActiveSupport::Deprecation::DeprecationProxy
  def self.new(*args, &block); end
end

module ActiveSupport::Deprecation::Disallowed
  def disallowed_warnings(); end

  def disallowed_warnings=(disallowed_warnings); end
end

module ActiveSupport::Deprecation::Disallowed
end

module ActiveSupport::Deprecation::InstanceDelegator::ClassMethods
  def include(included_module); end

  def method_added(method_name); end
end

module ActiveSupport::Deprecation::InstanceDelegator::ClassMethods
end

module ActiveSupport::Deprecation::InstanceDelegator::OverrideDelegators
  def deprecation_warning(deprecated_method_name, message=T.unsafe(nil), caller_backtrace=T.unsafe(nil)); end

  def warn(message=T.unsafe(nil), callstack=T.unsafe(nil)); end
end

module ActiveSupport::Deprecation::InstanceDelegator
  def self.included(base); end
end

module ActiveSupport::Deprecation::MethodWrapper
  def deprecate_methods(target_module, *method_names); end
end

module ActiveSupport::Deprecation::MethodWrapper
end

module ActiveSupport::Deprecation::Reporting
  def allow(allowed_warnings=T.unsafe(nil), if: T.unsafe(nil), &block); end

  def deprecation_warning(deprecated_method_name, message=T.unsafe(nil), caller_backtrace=T.unsafe(nil)); end

  def gem_name(); end

  def gem_name=(gem_name); end

  def silence(&block); end

  def silenced(); end

  def silenced=(silenced); end

  def warn(message=T.unsafe(nil), callstack=T.unsafe(nil)); end
end

class ActiveSupport::Deprecation
  extend ::Singleton::SingletonClassMethods
  extend ::ActiveSupport::Deprecation::InstanceDelegator::ClassMethods
  extend ::ActiveSupport::Deprecation::InstanceDelegator::OverrideDelegators
  def self.allow(*arg, &arg1); end

  def self.behavior(*arg, &arg1); end

  def self.behavior=(arg); end

  def self.debug(*arg, &arg1); end

  def self.debug=(arg); end

  def self.deprecate_methods(*arg, &arg1); end

  def self.deprecation_horizon(*arg, &arg1); end

  def self.deprecation_horizon=(arg); end

  def self.deprecation_warning(*arg, &arg1); end

  def self.disallowed_behavior(*arg, &arg1); end

  def self.disallowed_behavior=(arg); end

  def self.disallowed_warnings(*arg, &arg1); end

  def self.disallowed_warnings=(arg); end

  def self.gem_name(*arg, &arg1); end

  def self.gem_name=(arg); end

  def self.initialize(*arg, &arg1); end

  def self.silence(*arg, &arg1); end

  def self.silenced(*arg, &arg1); end

  def self.silenced=(arg); end

  def self.warn(*arg, &arg1); end
end

module ActiveSupport::DescendantsTracker
  def descendants(); end

  def direct_descendants(); end

  def inherited(base); end

  def subclasses(); end
end

class ActiveSupport::DescendantsTracker::DescendantsArray
  include ::Enumerable
  def <<(klass); end

  def cleanup!(); end

  def each(&blk); end

  def refs_size(); end

  def reject!(); end
end

class ActiveSupport::DescendantsTracker::DescendantsArray
end

module ActiveSupport::DescendantsTracker
  def self.clear(); end

  def self.descendants(klass); end

  def self.direct_descendants(klass); end

  def self.store_inherited(klass, descendant); end

  def self.subclasses(klass); end
end

class ActiveSupport::Digest
end

class ActiveSupport::Digest
  def self.hash_digest_class(); end

  def self.hash_digest_class=(klass); end

  def self.hexdigest(arg); end
end

class ActiveSupport::Duration
  def +@(); end

  def -@(); end

  def after(time=T.unsafe(nil)); end

  def before(time=T.unsafe(nil)); end

  def coerce(other); end

  def encode_with(coder); end

  def in_days(); end

  def in_hours(); end

  def in_minutes(); end

  def in_months(); end

  def in_seconds(); end

  def in_weeks(); end

  def in_years(); end

  def init_with(coder); end

  def initialize(value, parts); end

  def instance_of?(klass); end

  def is_a?(klass); end

  def kind_of?(klass); end

  def parts(); end

  def parts=(parts); end

  def since(time=T.unsafe(nil)); end

  def until(time=T.unsafe(nil)); end

  def value=(value); end
  PARTS = ::T.let(nil, ::T.untyped)
  PARTS_IN_SECONDS = ::T.let(nil, ::T.untyped)
  SECONDS_PER_DAY = ::T.let(nil, ::T.untyped)
  SECONDS_PER_HOUR = ::T.let(nil, ::T.untyped)
  SECONDS_PER_MINUTE = ::T.let(nil, ::T.untyped)
  SECONDS_PER_MONTH = ::T.let(nil, ::T.untyped)
  SECONDS_PER_WEEK = ::T.let(nil, ::T.untyped)
  SECONDS_PER_YEAR = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Duration::ISO8601Parser
  def initialize(string); end

  def mode(); end

  def mode=(mode); end

  def parse!(); end

  def parts(); end

  def scanner(); end

  def sign(); end

  def sign=(sign); end
  COMMA = ::T.let(nil, ::T.untyped)
  DATE_COMPONENT = ::T.let(nil, ::T.untyped)
  DATE_COMPONENTS = ::T.let(nil, ::T.untyped)
  DATE_MARKER = ::T.let(nil, ::T.untyped)
  DATE_TO_PART = ::T.let(nil, ::T.untyped)
  PERIOD = ::T.let(nil, ::T.untyped)
  PERIOD_OR_COMMA = ::T.let(nil, ::T.untyped)
  SIGN_MARKER = ::T.let(nil, ::T.untyped)
  TIME_COMPONENT = ::T.let(nil, ::T.untyped)
  TIME_COMPONENTS = ::T.let(nil, ::T.untyped)
  TIME_MARKER = ::T.let(nil, ::T.untyped)
  TIME_TO_PART = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Duration::ISO8601Parser::ParsingError
end

class ActiveSupport::Duration::ISO8601Parser::ParsingError
end

class ActiveSupport::Duration::ISO8601Parser
end

class ActiveSupport::Duration::ISO8601Serializer
  def initialize(duration, precision: T.unsafe(nil)); end

  def serialize(); end
  DATE_COMPONENTS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Duration::ISO8601Serializer
end

class ActiveSupport::Duration::Scalar
  def %(other); end

  def *(other); end

  def +(other); end

  def -(other); end

  def /(other); end

  def coerce(other); end

  def initialize(value); end

  def to_f(*arg, &arg1); end

  def to_i(*arg, &arg1); end

  def to_s(*arg, &arg1); end

  def value(); end
end

class ActiveSupport::Duration::Scalar
end

class ActiveSupport::Duration
  def self.===(other); end

  def self.days(value); end

  def self.hours(value); end

  def self.minutes(value); end

  def self.months(value); end

  def self.seconds(value); end

  def self.weeks(value); end

  def self.years(value); end
end

class ActiveSupport::EnvironmentInquirer
  def development?(); end

  def initialize(env); end

  def production?(); end

  def test?(); end
  DEFAULT_ENVIRONMENTS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::EnvironmentInquirer
end

class ActiveSupport::EventedFileUpdateChecker
  def execute(); end

  def execute_if_updated(); end

  def initialize(files, dirs=T.unsafe(nil), &block); end

  def updated?(); end
end

class ActiveSupport::EventedFileUpdateChecker::Core
  def changed(modified, added, removed); end

  def common_path(paths); end

  def directories_to_watch(); end

  def finalizer(); end

  def initialize(files, dirs); end

  def normalize_dirs!(); end

  def restart(); end

  def restart?(); end

  def start(); end

  def stop(); end

  def thread_safely(); end

  def updated(); end

  def watching?(file); end
end

class ActiveSupport::EventedFileUpdateChecker::Core
end

class ActiveSupport::EventedFileUpdateChecker
end

class ActiveSupport::ExecutionWrapper
  include ::ActiveSupport::Callbacks
  def __callbacks(); end

  def __callbacks?(); end

  def _complete_callbacks(); end

  def _run_callbacks(); end

  def _run_complete_callbacks(&block); end

  def _run_run_callbacks(&block); end

  def complete!(); end

  def run!(); end
  Null = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::ExecutionWrapper::CompleteHook
  def after(target); end

  def before(target); end

  def hook(); end

  def hook=(_); end
end

class ActiveSupport::ExecutionWrapper::CompleteHook
  def self.[](*arg); end

  def self.members(); end
end

class ActiveSupport::ExecutionWrapper::RunHook
  def before(target); end

  def hook(); end

  def hook=(_); end
end

class ActiveSupport::ExecutionWrapper::RunHook
  def self.[](*arg); end

  def self.members(); end
end

class ActiveSupport::ExecutionWrapper
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveSupport::DescendantsTracker
  def self.__callbacks(); end

  def self.__callbacks=(value); end

  def self.__callbacks?(); end

  def self._complete_callbacks(); end

  def self._complete_callbacks=(value); end

  def self._run_callbacks(); end

  def self._run_callbacks=(value); end

  def self.active(); end

  def self.active=(active); end

  def self.active?(); end

  def self.inherited(other); end

  def self.register_hook(hook, outer: T.unsafe(nil)); end

  def self.run!(); end

  def self.to_complete(*args, &block); end

  def self.to_run(*args, &block); end

  def self.wrap(); end
end

class ActiveSupport::Executor
end

class ActiveSupport::Executor
end

class ActiveSupport::FileUpdateChecker
  def execute(); end

  def execute_if_updated(); end

  def initialize(files, dirs=T.unsafe(nil), &block); end

  def updated?(); end
end

class ActiveSupport::FileUpdateChecker
end

module ActiveSupport::ForkTracker
end

module ActiveSupport::ForkTracker::CoreExt
  def fork(*arg); end
end

module ActiveSupport::ForkTracker::CoreExt
end

module ActiveSupport::ForkTracker::CoreExtPrivate
  include ::ActiveSupport::ForkTracker::CoreExt
end

module ActiveSupport::ForkTracker::CoreExtPrivate
end

module ActiveSupport::ForkTracker
  def self.after_fork(&block); end

  def self.check!(); end

  def self.hook!(); end

  def self.unregister(callback); end
end

module ActiveSupport::Gzip
end

class ActiveSupport::Gzip::Stream
end

class ActiveSupport::Gzip::Stream
end

module ActiveSupport::Gzip
  def self.compress(source, level=T.unsafe(nil), strategy=T.unsafe(nil)); end

  def self.decompress(source); end
end

module ActiveSupport::Inflector
  ALLOWED_ENCODINGS_FOR_TRANSLITERATE = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Inflector::Inflections
  def acronym(word); end

  def acronyms(); end

  def acronyms_camelize_regex(); end

  def acronyms_underscore_regex(); end

  def clear(scope=T.unsafe(nil)); end

  def human(rule, replacement); end

  def humans(); end

  def irregular(singular, plural); end

  def plural(rule, replacement); end

  def plurals(); end

  def singular(rule, replacement); end

  def singulars(); end

  def uncountable(*words); end

  def uncountables(); end
end

class ActiveSupport::Inflector::Inflections::Uncountables
  def <<(*word); end

  def add(words); end

  def delete(entry); end

  def initialize(); end

  def uncountable?(str); end
end

class ActiveSupport::Inflector::Inflections::Uncountables
end

class ActiveSupport::Inflector::Inflections
  def self.instance(locale=T.unsafe(nil)); end
end

module ActiveSupport::JSON::Encoding
end

class ActiveSupport::JSON::Encoding::JSONGemEncoder
  def encode(value); end

  def initialize(options=T.unsafe(nil)); end

  def options(); end
end

class ActiveSupport::JSON::Encoding::JSONGemEncoder
end

module ActiveSupport::JSON::Encoding
  def self.escape_html_entities_in_json(); end

  def self.escape_html_entities_in_json=(escape_html_entities_in_json); end

  def self.json_encoder(); end

  def self.json_encoder=(json_encoder); end

  def self.time_precision(); end

  def self.time_precision=(time_precision); end

  def self.use_standard_json_time_format(); end

  def self.use_standard_json_time_format=(use_standard_json_time_format); end
end

module ActiveSupport::JSON
  def self.decode(json); end

  def self.encode(value, options=T.unsafe(nil)); end

  def self.parse_error(); end
end

class ActiveSupport::KeyGenerator
  def generate_key(salt, key_size=T.unsafe(nil)); end

  def initialize(secret, options=T.unsafe(nil)); end
end

class ActiveSupport::KeyGenerator
end

module ActiveSupport::LazyLoadHooks
  def on_load(name, options=T.unsafe(nil), &block); end

  def run_load_hooks(name, base=T.unsafe(nil)); end
end

module ActiveSupport::LazyLoadHooks
  def self.extended(base); end
end

class ActiveSupport::LogSubscriber
  def colorize_logging(); end

  def colorize_logging=(val); end

  def debug(progname=T.unsafe(nil), &block); end

  def error(progname=T.unsafe(nil), &block); end

  def fatal(progname=T.unsafe(nil), &block); end

  def info(progname=T.unsafe(nil), &block); end

  def logger(); end

  def unknown(progname=T.unsafe(nil), &block); end

  def warn(progname=T.unsafe(nil), &block); end
end

class ActiveSupport::LogSubscriber
  def self.colorize_logging(); end

  def self.colorize_logging=(val); end

  def self.flush_all!(); end

  def self.log_subscribers(); end

  def self.logger(); end

  def self.logger=(logger); end
end

class ActiveSupport::Logger
  include ::ActiveSupport::LoggerSilence
  include ::ActiveSupport::LoggerThreadSafeLevel
  def initialize(*args, **kwargs); end

  def silencer(); end

  def silencer=(val); end
end

class ActiveSupport::Logger::SimpleFormatter
  def call(severity, timestamp, progname, msg); end
end

class ActiveSupport::Logger::SimpleFormatter
end

class ActiveSupport::Logger
  def self.broadcast(logger); end

  def self.local_levels(); end

  def self.local_levels=(val); end

  def self.logger_outputs_to?(logger, *sources); end

  def self.silencer(); end

  def self.silencer=(val); end
end

module ActiveSupport::LoggerSilence
  def silence(severity=T.unsafe(nil)); end
end

module ActiveSupport::LoggerSilence
  extend ::ActiveSupport::Concern
end

module ActiveSupport::LoggerThreadSafeLevel
  def add(severity, message=T.unsafe(nil), progname=T.unsafe(nil), &block); end

  def debug?(); end

  def error?(); end

  def fatal?(); end

  def info?(); end

  def level(); end

  def local_level(); end

  def local_level=(level); end

  def local_log_id(); end

  def log_at(level); end

  def unknown?(); end

  def warn?(); end
end

module ActiveSupport::LoggerThreadSafeLevel
  extend ::ActiveSupport::Concern
end

module ActiveSupport::MarshalWithAutoloading
  def load(source, proc=T.unsafe(nil)); end
end

module ActiveSupport::MarshalWithAutoloading
end

class ActiveSupport::MessageEncryptor
  include ::ActiveSupport::Messages::Rotator::Encryptor
  include ::ActiveSupport::Messages::Rotator
  def encrypt_and_sign(value, expires_at: T.unsafe(nil), expires_in: T.unsafe(nil), purpose: T.unsafe(nil)); end
end

class ActiveSupport::MessageEncryptor::InvalidMessage
end

class ActiveSupport::MessageEncryptor::InvalidMessage
end

module ActiveSupport::MessageEncryptor::NullSerializer
end

module ActiveSupport::MessageEncryptor::NullSerializer
  def self.dump(value); end

  def self.load(value); end
end

module ActiveSupport::MessageEncryptor::NullVerifier
end

module ActiveSupport::MessageEncryptor::NullVerifier
  def self.generate(value); end

  def self.verify(value); end
end

ActiveSupport::MessageEncryptor::OpenSSLCipherError = OpenSSL::Cipher::CipherError

class ActiveSupport::MessageEncryptor
  def self.default_cipher(); end

  def self.key_len(cipher=T.unsafe(nil)); end

  def self.use_authenticated_message_encryption(); end

  def self.use_authenticated_message_encryption=(val); end
end

class ActiveSupport::MessageVerifier
  include ::ActiveSupport::Messages::Rotator::Verifier
  include ::ActiveSupport::Messages::Rotator
  def generate(value, expires_at: T.unsafe(nil), expires_in: T.unsafe(nil), purpose: T.unsafe(nil)); end

  def valid_message?(signed_message); end

  def verify(*args, **options); end
end

class ActiveSupport::MessageVerifier::InvalidSignature
end

class ActiveSupport::MessageVerifier::InvalidSignature
end

class ActiveSupport::MessageVerifier
end

module ActiveSupport::Messages::Rotator
  def initialize(*secrets, on_rotation: T.unsafe(nil), **options); end

  def rotate(*secrets, **options); end
end

module ActiveSupport::Messages::Rotator::Encryptor
  include ::ActiveSupport::Messages::Rotator
  def decrypt_and_verify(*args, on_rotation: T.unsafe(nil), **options); end
end

module ActiveSupport::Messages::Rotator::Encryptor
end

module ActiveSupport::Messages::Rotator::Verifier
  include ::ActiveSupport::Messages::Rotator
  def verified(*args, on_rotation: T.unsafe(nil), **options); end
end

module ActiveSupport::Messages::Rotator::Verifier
end

module ActiveSupport::Messages::Rotator
end

class ActiveSupport::Multibyte::Chars
  include ::Comparable
  def =~(*arg, &arg1); end

  def acts_like_string?(*arg, &arg1); end

  def compose(); end

  def decompose(); end

  def grapheme_length(); end

  def initialize(string); end

  def limit(limit); end

  def match?(*arg, &arg1); end

  def method_missing(method, *args, &block); end

  def reverse(); end

  def reverse!(*args); end

  def slice!(*args); end

  def split(*args); end

  def tidy_bytes(force=T.unsafe(nil)); end

  def tidy_bytes!(*args); end

  def titlecase(); end

  def titleize(); end

  def to_str(); end

  def wrapped_string(); end
end

class ActiveSupport::Multibyte::Chars
end

module ActiveSupport::Multibyte::Unicode
  def compose(codepoints); end

  def decompose(type, codepoints); end

  def default_normalization_form(); end

  def default_normalization_form=(_); end

  def tidy_bytes(string, force=T.unsafe(nil)); end
end

module ActiveSupport::Multibyte::Unicode
  extend ::ActiveSupport::Multibyte::Unicode
end

module ActiveSupport::Multibyte
  def self.proxy_class(); end

  def self.proxy_class=(klass); end
end

module ActiveSupport::Notifications
end

class ActiveSupport::Notifications::Event
  def <<(event); end

  def allocations(); end

  def children(); end

  def cpu_time(); end

  def duration(); end

  def end(); end

  def finish!(); end

  def idle_time(); end

  def initialize(name, start, ending, transaction_id, payload); end

  def name(); end

  def parent_of?(event); end

  def payload(); end

  def payload=(payload); end

  def start!(); end

  def time(); end

  def transaction_id(); end
end

class ActiveSupport::Notifications::Event
end

class ActiveSupport::Notifications::Fanout
  include ::Mutex_m
  def finish(name, id, payload, listeners=T.unsafe(nil)); end

  def initialize(); end

  def listeners_for(name); end

  def listening?(name); end

  def lock(); end

  def locked?(); end

  def publish(name, *args); end

  def start(name, id, payload); end

  def subscribe(pattern=T.unsafe(nil), callable=T.unsafe(nil), monotonic: T.unsafe(nil), &block); end

  def synchronize(&block); end

  def try_lock(); end

  def unlock(); end

  def unsubscribe(subscriber_or_name); end

  def wait(); end
end

module ActiveSupport::Notifications::Fanout::Subscribers
end

class ActiveSupport::Notifications::Fanout::Subscribers::AllMessages
  def finish(name, id, payload); end

  def initialize(delegate); end

  def matches?(arg); end

  def publish(name, *args); end

  def start(name, id, payload); end

  def subscribed_to?(name); end

  def unsubscribe!(*arg); end
end

class ActiveSupport::Notifications::Fanout::Subscribers::AllMessages
end

class ActiveSupport::Notifications::Fanout::Subscribers::EventObject
end

class ActiveSupport::Notifications::Fanout::Subscribers::EventObject
end

class ActiveSupport::Notifications::Fanout::Subscribers::Evented
  def finish(name, id, payload); end

  def initialize(pattern, delegate); end

  def matches?(name); end

  def pattern(); end

  def publish(name, *args); end

  def start(name, id, payload); end

  def subscribed_to?(name); end

  def unsubscribe!(name); end
end

class ActiveSupport::Notifications::Fanout::Subscribers::Evented
end

class ActiveSupport::Notifications::Fanout::Subscribers::Matcher
  def ===(name); end

  def exclusions(); end

  def initialize(pattern); end

  def pattern(); end

  def unsubscribe!(name); end
end

class ActiveSupport::Notifications::Fanout::Subscribers::Matcher
  def self.wrap(pattern); end
end

class ActiveSupport::Notifications::Fanout::Subscribers::MonotonicTimed
end

class ActiveSupport::Notifications::Fanout::Subscribers::MonotonicTimed
end

class ActiveSupport::Notifications::Fanout::Subscribers::Timed
end

class ActiveSupport::Notifications::Fanout::Subscribers::Timed
end

module ActiveSupport::Notifications::Fanout::Subscribers
  def self.new(pattern, listener, monotonic); end

  def self.wrap_all(pattern, subscriber); end
end

class ActiveSupport::Notifications::Fanout
end

class ActiveSupport::Notifications::InstrumentationRegistry
  def instrumenter_for(notifier); end
end

class ActiveSupport::Notifications::InstrumentationRegistry
  extend ::ActiveSupport::PerThreadRegistry
end

class ActiveSupport::Notifications::Instrumenter
  def finish(name, payload); end

  def finish_with_state(listeners_state, name, payload); end

  def id(); end

  def initialize(notifier); end

  def instrument(name, payload=T.unsafe(nil)); end

  def start(name, payload); end
end

class ActiveSupport::Notifications::Instrumenter
end

module ActiveSupport::Notifications
  def self.instrument(name, payload=T.unsafe(nil)); end

  def self.instrumenter(); end

  def self.monotonic_subscribe(pattern=T.unsafe(nil), callback=T.unsafe(nil), &block); end

  def self.notifier(); end

  def self.notifier=(notifier); end

  def self.publish(name, *args); end

  def self.subscribe(pattern=T.unsafe(nil), callback=T.unsafe(nil), &block); end

  def self.subscribed(callback, pattern=T.unsafe(nil), monotonic: T.unsafe(nil), &block); end

  def self.unsubscribe(subscriber_or_name); end
end

class ActiveSupport::NumberHelper::NumberConverter
  def execute(); end

  def initialize(number, options); end

  def namespace(); end

  def namespace=(namespace); end

  def namespace?(); end

  def number(); end

  def opts(); end

  def validate_float(); end

  def validate_float=(validate_float); end

  def validate_float?(); end
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::NumberHelper::NumberConverter
  def self.convert(number, options); end

  def self.namespace(); end

  def self.namespace=(value); end

  def self.namespace?(); end

  def self.validate_float(); end

  def self.validate_float=(value); end

  def self.validate_float?(); end
end

class ActiveSupport::NumberHelper::NumberToCurrencyConverter
  def convert(); end
end

class ActiveSupport::NumberHelper::NumberToCurrencyConverter
end

class ActiveSupport::NumberHelper::NumberToDelimitedConverter
  def convert(); end
  DEFAULT_DELIMITER_REGEX = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::NumberHelper::NumberToDelimitedConverter
end

class ActiveSupport::NumberHelper::NumberToHumanConverter
  def convert(); end
  DECIMAL_UNITS = ::T.let(nil, ::T.untyped)
  INVERTED_DECIMAL_UNITS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::NumberHelper::NumberToHumanConverter
end

class ActiveSupport::NumberHelper::NumberToHumanSizeConverter
  def convert(); end
  STORAGE_UNITS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::NumberHelper::NumberToHumanSizeConverter
end

class ActiveSupport::NumberHelper::NumberToPercentageConverter
  def convert(); end
end

class ActiveSupport::NumberHelper::NumberToPercentageConverter
end

class ActiveSupport::NumberHelper::NumberToPhoneConverter
  def convert(); end
end

class ActiveSupport::NumberHelper::NumberToPhoneConverter
end

class ActiveSupport::NumberHelper::NumberToRoundedConverter
  def convert(); end
end

class ActiveSupport::NumberHelper::NumberToRoundedConverter
end

class ActiveSupport::NumberHelper::RoundingHelper
  def digit_count(number); end

  def initialize(options); end

  def options(); end

  def round(number); end
end

class ActiveSupport::NumberHelper::RoundingHelper
end

module ActiveSupport::NumberHelper
  extend ::ActiveSupport::Autoload
end

class ActiveSupport::OptionMerger
  def initialize(context, options); end
end

class ActiveSupport::OptionMerger
end

class ActiveSupport::OrderedHash
  def encode_with(coder); end

  def nested_under_indifferent_access(); end

  def reject(*args, &block); end

  def select(*args, &block); end

  def to_yaml_type(); end
end

class ActiveSupport::OrderedOptions
  def [](key); end

  def []=(key, value); end

  def _get(arg); end

  def method_missing(name, *args); end
end

module ActiveSupport::PerThreadRegistry
  def instance(); end
end

module ActiveSupport::PerThreadRegistry
  def self.extended(object); end
end

class ActiveSupport::ProxyObject
  def raise(*args); end
end

class ActiveSupport::ProxyObject
end

class ActiveSupport::Reloader
  def _class_unload_callbacks(); end

  def _prepare_callbacks(); end

  def _run_class_unload_callbacks(&block); end

  def _run_prepare_callbacks(&block); end

  def check(); end

  def check=(check); end

  def check?(); end

  def class_unload!(&block); end

  def executor(); end

  def executor=(executor); end

  def executor?(); end

  def release_unload_lock!(); end

  def require_unload_lock!(); end
end

class ActiveSupport::Reloader
  def self._class_unload_callbacks(); end

  def self._class_unload_callbacks=(value); end

  def self._prepare_callbacks(); end

  def self._prepare_callbacks=(value); end

  def self.after_class_unload(*args, &block); end

  def self.before_class_unload(*args, &block); end

  def self.check(); end

  def self.check!(); end

  def self.check=(value); end

  def self.check?(); end

  def self.executor(); end

  def self.executor=(value); end

  def self.executor?(); end

  def self.prepare!(); end

  def self.reload!(); end

  def self.reloaded!(); end

  def self.to_prepare(*args, &block); end
end

module ActiveSupport::Rescuable
  def handler_for_rescue(exception); end

  def rescue_with_handler(exception); end
end

module ActiveSupport::Rescuable::ClassMethods
  def handler_for_rescue(exception, object: T.unsafe(nil)); end

  def rescue_with_handler(exception, object: T.unsafe(nil), visited_exceptions: T.unsafe(nil)); end
end

module ActiveSupport::Rescuable
  extend ::ActiveSupport::Concern
end

class ActiveSupport::SafeBuffer
  def %(args); end

  def *(*arg); end

  def +(other); end

  def <<(value); end

  def [](*args); end

  def []=(*args); end

  def capitalize(*args, &block); end

  def capitalize!(*args); end

  def chomp(*args, &block); end

  def chomp!(*args); end

  def chop(*args, &block); end

  def chop!(*args); end

  def clone_empty(); end

  def concat(value); end

  def delete(*args, &block); end

  def delete!(*args); end

  def delete_prefix(*args, &block); end

  def delete_prefix!(*args); end

  def delete_suffix(*args, &block); end

  def delete_suffix!(*args); end

  def downcase(*args, &block); end

  def downcase!(*args); end

  def encode_with(coder); end

  def gsub(*args, &block); end

  def gsub!(*args, &block); end

  def initialize(str=T.unsafe(nil)); end

  def insert(index, value); end

  def lstrip(*args, &block); end

  def lstrip!(*args); end

  def next(*args, &block); end

  def next!(*args); end

  def prepend(value); end

  def replace(value); end

  def reverse(*args, &block); end

  def reverse!(*args); end

  def rstrip(*args, &block); end

  def rstrip!(*args); end

  def safe_concat(value); end

  def scrub(*args, &block); end

  def scrub!(*args); end

  def slice(*args, &block); end

  def slice!(*args); end

  def squeeze(*args, &block); end

  def squeeze!(*args); end

  def strip(*args, &block); end

  def strip!(*args); end

  def sub(*args, &block); end

  def sub!(*args, &block); end

  def succ(*args, &block); end

  def succ!(*args); end

  def swapcase(*args, &block); end

  def swapcase!(*args); end

  def tr(*args, &block); end

  def tr!(*args); end

  def tr_s(*args, &block); end

  def tr_s!(*args); end

  def unicode_normalize(*args, &block); end

  def unicode_normalize!(*args); end

  def upcase(*args, &block); end

  def upcase!(*args); end
end

class ActiveSupport::SafeBuffer::SafeConcatError
  def initialize(); end
end

class ActiveSupport::SafeBuffer::SafeConcatError
end

class ActiveSupport::SecureCompareRotator
  include ::ActiveSupport::SecurityUtils
  include ::ActiveSupport::Messages::Rotator
  def secure_compare!(other_value, on_rotation: T.unsafe(nil)); end
end

class ActiveSupport::SecureCompareRotator::InvalidMatch
end

class ActiveSupport::SecureCompareRotator::InvalidMatch
end

class ActiveSupport::SecureCompareRotator
end

module ActiveSupport::SecurityUtils
end

module ActiveSupport::SecurityUtils
  def self.fixed_length_secure_compare(a, b); end

  def self.secure_compare(a, b); end
end

class ActiveSupport::StringInquirer
end

class ActiveSupport::StringInquirer
end

class ActiveSupport::Subscriber
  def finish(name, id, payload); end

  def patterns(); end

  def start(name, id, payload); end
end

class ActiveSupport::Subscriber
  def self.attach_to(namespace, subscriber=T.unsafe(nil), notifier=T.unsafe(nil), inherit_all: T.unsafe(nil)); end

  def self.detach_from(namespace, notifier=T.unsafe(nil)); end

  def self.method_added(event); end

  def self.subscribers(); end
end

class ActiveSupport::SubscriberQueueRegistry
  def get_queue(queue_key); end
end

class ActiveSupport::SubscriberQueueRegistry
  extend ::ActiveSupport::PerThreadRegistry
end

module ActiveSupport::TaggedLogging
  def clear_tags!(*arg, &arg1); end

  def flush(); end

  def pop_tags(*arg, &arg1); end

  def push_tags(*arg, &arg1); end

  def tagged(*tags); end
end

module ActiveSupport::TaggedLogging::Formatter
  def call(severity, timestamp, progname, msg); end

  def clear_tags!(); end

  def current_tags(); end

  def pop_tags(size=T.unsafe(nil)); end

  def push_tags(*tags); end

  def tagged(*tags); end

  def tags_text(); end
end

module ActiveSupport::TaggedLogging::Formatter
end

module ActiveSupport::TaggedLogging::LocalTagStorage
  def current_tags(); end

  def current_tags=(current_tags); end
end

module ActiveSupport::TaggedLogging::LocalTagStorage
  def self.extended(base); end
end

class ActiveSupport::TestCase
  include ::ActiveSupport::Testing::TaggedLogging
  include ::ActiveSupport::Callbacks
  include ::ActiveSupport::Testing::Assertions
  include ::ActiveSupport::Testing::Deprecation
  include ::ActiveSupport::Testing::TimeHelpers
  include ::ActiveSupport::Testing::FileFixtures
  include ::ActiveSupport::Testing::SetupAndTeardown
  def __callbacks(); end

  def __callbacks?(); end

  def _run_setup_callbacks(&block); end

  def _run_teardown_callbacks(&block); end

  def _setup_callbacks(); end

  def _teardown_callbacks(); end

  def assert_no_match(matcher, obj, msg=T.unsafe(nil)); end

  def assert_not_empty(obj, msg=T.unsafe(nil)); end

  def assert_not_equal(exp, act, msg=T.unsafe(nil)); end

  def assert_not_in_delta(exp, act, delta=T.unsafe(nil), msg=T.unsafe(nil)); end

  def assert_not_in_epsilon(a, b, epsilon=T.unsafe(nil), msg=T.unsafe(nil)); end

  def assert_not_includes(collection, obj, msg=T.unsafe(nil)); end

  def assert_not_instance_of(cls, obj, msg=T.unsafe(nil)); end

  def assert_not_kind_of(cls, obj, msg=T.unsafe(nil)); end

  def assert_not_nil(obj, msg=T.unsafe(nil)); end

  def assert_not_operator(o1, op, o2=T.unsafe(nil), msg=T.unsafe(nil)); end

  def assert_not_predicate(o1, op, msg=T.unsafe(nil)); end

  def assert_not_respond_to(obj, meth, msg=T.unsafe(nil)); end

  def assert_not_same(exp, act, msg=T.unsafe(nil)); end

  def assert_raise(*exp); end

  def file_fixture_path(); end

  def file_fixture_path?(); end

  def method_name(); end
end

ActiveSupport::TestCase::Assertion = Minitest::Assertion

class ActiveSupport::TestCase
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveSupport::DescendantsTracker
  def self.__callbacks(); end

  def self.__callbacks=(value); end

  def self.__callbacks?(); end

  def self._setup_callbacks(); end

  def self._setup_callbacks=(value); end

  def self._teardown_callbacks(); end

  def self._teardown_callbacks=(value); end

  def self.file_fixture_path(); end

  def self.file_fixture_path=(value); end

  def self.file_fixture_path?(); end

  def self.parallelize(workers: T.unsafe(nil), with: T.unsafe(nil)); end

  def self.parallelize_setup(&block); end

  def self.parallelize_teardown(&block); end

  def self.test_order=(new_order); end
end

module ActiveSupport::Testing::Assertions
  def assert_changes(expression, message=T.unsafe(nil), from: T.unsafe(nil), to: T.unsafe(nil), &block); end

  def assert_difference(expression, *args, &block); end

  def assert_no_changes(expression, message=T.unsafe(nil), &block); end

  def assert_no_difference(expression, message=T.unsafe(nil), &block); end

  def assert_not(object, message=T.unsafe(nil)); end

  def assert_nothing_raised(); end
  UNTRACKED = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Testing::Assertions
end

module ActiveSupport::Testing::Deprecation
  def assert_deprecated(match=T.unsafe(nil), deprecator=T.unsafe(nil), &block); end

  def assert_not_deprecated(deprecator=T.unsafe(nil), &block); end

  def collect_deprecations(deprecator=T.unsafe(nil)); end
end

module ActiveSupport::Testing::Deprecation
end

module ActiveSupport::Testing::FileFixtures
  def file_fixture(fixture_name); end
end

module ActiveSupport::Testing::FileFixtures
  extend ::ActiveSupport::Concern
end

module ActiveSupport::Testing::SetupAndTeardown
  def after_teardown(); end

  def before_setup(); end
end

module ActiveSupport::Testing::SetupAndTeardown
  def self.prepended(klass); end
end

module ActiveSupport::Testing::TaggedLogging
  def before_setup(); end

  def tagged_logger=(tagged_logger); end
end

module ActiveSupport::Testing::TaggedLogging
end

module ActiveSupport::Testing::TimeHelpers
  def after_teardown(); end

  def freeze_time(&block); end

  def travel(duration, &block); end

  def travel_back(); end

  def travel_to(date_or_time); end

  def unfreeze_time(); end
end

module ActiveSupport::Testing::TimeHelpers
end

class ActiveSupport::TimeWithZone
  include ::DateAndTime::Compatibility
  include ::Comparable
  def acts_like_time?(); end

  def after?(arg); end

  def before?(arg); end

  def comparable_time(); end

  def encode_with(coder); end

  def getgm(); end

  def getlocal(utc_offset=T.unsafe(nil)); end

  def getutc(); end

  def gmt?(); end

  def gmt_offset(); end

  def gmtime(); end

  def gmtoff(); end

  def in(other); end

  def init_with(coder); end

  def initialize(utc_time, time_zone, local_time=T.unsafe(nil), period=T.unsafe(nil)); end

  def is_a?(klass); end

  def isdst(); end

  def iso8601(fraction_digits=T.unsafe(nil)); end

  def kind_of?(klass); end

  def marshal_dump(); end

  def marshal_load(variables); end

  def method_missing(sym, *args, &block); end

  def next_day?(); end

  def prev_day?(); end

  def respond_to?(sym, include_priv=T.unsafe(nil)); end

  def rfc3339(fraction_digits=T.unsafe(nil)); end

  def rfc822(); end

  def since(other); end

  def time_zone(); end

  def to_formatted_s(format=T.unsafe(nil)); end

  def tomorrow?(); end

  def tv_sec(); end

  def yesterday?(); end
  PRECISIONS = ::T.let(nil, ::T.untyped)
  SECONDS_PER_DAY = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::TimeZone
  include ::Comparable
  def =~(re); end

  def at(*args); end

  def encode_with(coder); end

  def formatted_offset(colon=T.unsafe(nil), alternate_utc_string=T.unsafe(nil)); end

  def init_with(coder); end

  def initialize(name, utc_offset=T.unsafe(nil), tzinfo=T.unsafe(nil)); end

  def iso8601(str); end

  def local_to_utc(time, dst=T.unsafe(nil)); end

  def match?(re); end

  def name(); end

  def parse(str, now=T.unsafe(nil)); end

  def period_for_local(time, dst=T.unsafe(nil)); end

  def period_for_utc(time); end

  def periods_for_local(time); end

  def rfc3339(str); end

  def strptime(str, format, now=T.unsafe(nil)); end

  def tzinfo(); end

  def utc_offset(); end

  def utc_to_local(time); end
  MAPPING = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::TimeZone
  def self.clear(); end

  def self.create(*arg); end

  def self.find_tzinfo(name); end

  def self.new(name); end

  def self.seconds_to_utc_offset(seconds, colon=T.unsafe(nil)); end
end

module ActiveSupport::ToJsonWithActiveSupportEncoder
  def to_json(options=T.unsafe(nil)); end
end

module ActiveSupport::ToJsonWithActiveSupportEncoder
end

module ActiveSupport::Tryable
  def try(method_name=T.unsafe(nil), *args, &b); end

  def try!(method_name=T.unsafe(nil), *args, &b); end
end

module ActiveSupport::Tryable
end

module ActiveSupport::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::VERSION
end

module ActiveSupport::XmlMini
  def backend(); end

  def backend=(name); end

  def depth(); end

  def depth=(depth); end

  def parse(*arg, &arg1); end

  def rename_key(key, options=T.unsafe(nil)); end

  def to_tag(key, value, options); end

  def with_backend(name); end
  DEFAULT_ENCODINGS = ::T.let(nil, ::T.untyped)
  FORMATTING = ::T.let(nil, ::T.untyped)
  PARSING = ::T.let(nil, ::T.untyped)
  TYPE_NAMES = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::XmlMini::FileLike
  def content_type(); end

  def content_type=(content_type); end

  def original_filename(); end

  def original_filename=(original_filename); end
end

module ActiveSupport::XmlMini::FileLike
end

module ActiveSupport::XmlMini
  extend ::ActiveSupport::XmlMini
end

module ActiveSupport::XmlMini_REXML
  def parse(data); end
  CONTENT_KEY = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::XmlMini_REXML
  extend ::ActiveSupport::XmlMini_REXML
end

module ActiveSupport
  extend ::ActiveSupport::LazyLoadHooks
  extend ::ActiveSupport::Autoload
  def self.escape_html_entities_in_json(*arg, &arg1); end

  def self.escape_html_entities_in_json=(arg); end

  def self.gem_version(); end

  def self.json_encoder(*arg, &arg1); end

  def self.json_encoder=(arg); end

  def self.parse_json_times(); end

  def self.parse_json_times=(val); end

  def self.test_order(); end

  def self.test_order=(val); end

  def self.time_precision(*arg, &arg1); end

  def self.time_precision=(arg); end

  def self.to_time_preserves_timezone(); end

  def self.to_time_preserves_timezone=(value); end

  def self.use_standard_json_time_format(*arg, &arg1); end

  def self.use_standard_json_time_format=(arg); end

  def self.utc_to_local_returns_utc_offset_times(); end

  def self.utc_to_local_returns_utc_offset_times=(value); end

  def self.version(); end
end

module Addressable::IDNA
  ACE_MAX_LENGTH = ::T.let(nil, ::T.untyped)
  ACE_PREFIX = ::T.let(nil, ::T.untyped)
  COMPOSITION_TABLE = ::T.let(nil, ::T.untyped)
  HANGUL_LBASE = ::T.let(nil, ::T.untyped)
  HANGUL_LCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_NCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_SBASE = ::T.let(nil, ::T.untyped)
  HANGUL_SCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_TBASE = ::T.let(nil, ::T.untyped)
  HANGUL_TCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_VBASE = ::T.let(nil, ::T.untyped)
  HANGUL_VCOUNT = ::T.let(nil, ::T.untyped)
  PUNYCODE_BASE = ::T.let(nil, ::T.untyped)
  PUNYCODE_DAMP = ::T.let(nil, ::T.untyped)
  PUNYCODE_DELIMITER = ::T.let(nil, ::T.untyped)
  PUNYCODE_INITIAL_BIAS = ::T.let(nil, ::T.untyped)
  PUNYCODE_INITIAL_N = ::T.let(nil, ::T.untyped)
  PUNYCODE_MAXINT = ::T.let(nil, ::T.untyped)
  PUNYCODE_PRINT_ASCII = ::T.let(nil, ::T.untyped)
  PUNYCODE_SKEW = ::T.let(nil, ::T.untyped)
  PUNYCODE_TMAX = ::T.let(nil, ::T.untyped)
  PUNYCODE_TMIN = ::T.let(nil, ::T.untyped)
  UNICODE_DATA = ::T.let(nil, ::T.untyped)
  UNICODE_DATA_CANONICAL = ::T.let(nil, ::T.untyped)
  UNICODE_DATA_COMBINING_CLASS = ::T.let(nil, ::T.untyped)
  UNICODE_DATA_COMPATIBILITY = ::T.let(nil, ::T.untyped)
  UNICODE_DATA_EXCLUSION = ::T.let(nil, ::T.untyped)
  UNICODE_DATA_LOWERCASE = ::T.let(nil, ::T.untyped)
  UNICODE_DATA_TITLECASE = ::T.let(nil, ::T.untyped)
  UNICODE_DATA_UPPERCASE = ::T.let(nil, ::T.untyped)
  UNICODE_MAX_LENGTH = ::T.let(nil, ::T.untyped)
  UNICODE_TABLE = ::T.let(nil, ::T.untyped)
  UTF8_REGEX = ::T.let(nil, ::T.untyped)
  UTF8_REGEX_MULTIBYTE = ::T.let(nil, ::T.untyped)
end

class Addressable::Template
  EXPRESSION = ::T.let(nil, ::T.untyped)
  JOINERS = ::T.let(nil, ::T.untyped)
  LEADERS = ::T.let(nil, ::T.untyped)
  RESERVED = ::T.let(nil, ::T.untyped)
  UNRESERVED = ::T.let(nil, ::T.untyped)
  VARIABLE_LIST = ::T.let(nil, ::T.untyped)
  VARNAME = ::T.let(nil, ::T.untyped)
  VARSPEC = ::T.let(nil, ::T.untyped)
end

class Addressable::URI
  EMPTY_STR = ::T.let(nil, ::T.untyped)
  NORMPATH = ::T.let(nil, ::T.untyped)
  PARENT = ::T.let(nil, ::T.untyped)
  PORT_MAPPING = ::T.let(nil, ::T.untyped)
  RULE_2A = ::T.let(nil, ::T.untyped)
  RULE_2B_2C = ::T.let(nil, ::T.untyped)
  RULE_2D = ::T.let(nil, ::T.untyped)
  RULE_PREFIXED_PARENT = ::T.let(nil, ::T.untyped)
  SELF_REF = ::T.let(nil, ::T.untyped)
  SEQUENCE_ENCODING_TABLE = ::T.let(nil, ::T.untyped)
  SEQUENCE_UPCASED_PERCENT_ENCODING_TABLE = ::T.let(nil, ::T.untyped)
  SLASH = ::T.let(nil, ::T.untyped)
  URIREGEX = ::T.let(nil, ::T.untyped)
end

module Addressable::URI::CharacterClasses
  ALPHA = ::T.let(nil, ::T.untyped)
  AUTHORITY = ::T.let(nil, ::T.untyped)
  DIGIT = ::T.let(nil, ::T.untyped)
  FRAGMENT = ::T.let(nil, ::T.untyped)
  GEN_DELIMS = ::T.let(nil, ::T.untyped)
  HOST = ::T.let(nil, ::T.untyped)
  PATH = ::T.let(nil, ::T.untyped)
  PCHAR = ::T.let(nil, ::T.untyped)
  QUERY = ::T.let(nil, ::T.untyped)
  RESERVED = ::T.let(nil, ::T.untyped)
  SCHEME = ::T.let(nil, ::T.untyped)
  SUB_DELIMS = ::T.let(nil, ::T.untyped)
  UNRESERVED = ::T.let(nil, ::T.untyped)
end

module Addressable::URI::NormalizeCharacterClasses
  FRAGMENT = ::T.let(nil, ::T.untyped)
  HOST = ::T.let(nil, ::T.untyped)
  PCHAR = ::T.let(nil, ::T.untyped)
  QUERY = ::T.let(nil, ::T.untyped)
  SCHEME = ::T.let(nil, ::T.untyped)
  UNRESERVED = ::T.let(nil, ::T.untyped)
end

module Addressable::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

class Addrinfo
  def connect_internal(local_addrinfo, timeout=T.unsafe(nil)); end
end

class Array
  include ::JSON::Ext::Generator::GeneratorMethods::Array
  def abbrev(pattern=T.unsafe(nil)); end

  def compact_blank!(); end

  def deconstruct(); end

  def shelljoin(); end

  def to_csv(**options); end

  def to_h(); end
end

class Array
  def self.try_convert(arg); end
end

BasicObject::BasicObject = BasicObject

class BasicSocket
  def read_nonblock(len, str=T.unsafe(nil), exception: T.unsafe(nil)); end
end

class Benchmark::Job
  def initialize(width); end
end

class Benchmark::Report
  def initialize(width=T.unsafe(nil), format=T.unsafe(nil)); end
end

class Benchmark::Tms
  def to_a(); end
end

class BigDecimal
  include ::ActiveSupport::BigDecimalWithDefaultFormat
  def clone(); end

  def to_digits(); end
  EXCEPTION_NaN = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class BigDecimal
  def self.interpret_loosely(arg); end
end

class Binding
  def clone(); end

  def irb(); end
end

class Bundler::Dependency
  def branch(); end

  def expanded_platforms(); end

  def git(); end
end

Bundler::Deprecate = Gem::Deprecate

class Bundler::Env
end

class Bundler::Env
  def self.environment(); end

  def self.report(options=T.unsafe(nil)); end

  def self.write(io); end
end

class Bundler::Fetcher
  def fetch_spec(spec); end

  def fetchers(); end

  def http_proxy(); end

  def initialize(remote); end

  def specs(gem_names, source); end

  def specs_with_retry(gem_names, source); end

  def uri(); end

  def use_api(); end

  def user_agent(); end
  FAIL_ERRORS = ::T.let(nil, ::T.untyped)
  FETCHERS = ::T.let(nil, ::T.untyped)
  HTTP_ERRORS = ::T.let(nil, ::T.untyped)
  NET_ERRORS = ::T.let(nil, ::T.untyped)
end

class Bundler::Fetcher::AuthenticationRequiredError
  def initialize(remote_uri); end
end

class Bundler::Fetcher::BadAuthenticationError
  def initialize(remote_uri); end
end

class Bundler::Fetcher::Base
  def api_fetcher?(); end

  def available?(); end

  def display_uri(); end

  def downloader(); end

  def fetch_uri(); end

  def initialize(downloader, remote, display_uri); end

  def remote(); end

  def remote_uri(); end
end

class Bundler::Fetcher::Base
end

class Bundler::Fetcher::CertificateFailureError
  def initialize(remote_uri); end
end

class Bundler::Fetcher::CompactIndex
  def available?(*args, &blk); end

  def fetch_spec(*args, &blk); end

  def specs(*args, &blk); end

  def specs_for_names(gem_names); end
end

class Bundler::Fetcher::CompactIndex::ClientFetcher
  def call(path, headers); end

  def fetcher(); end

  def fetcher=(_); end

  def ui(); end

  def ui=(_); end
end

class Bundler::Fetcher::CompactIndex::ClientFetcher
  def self.[](*arg); end

  def self.members(); end
end

class Bundler::Fetcher::CompactIndex
  def self.compact_index_request(method_name); end
end

class Bundler::Fetcher::Dependency
  def dependency_api_uri(gem_names=T.unsafe(nil)); end

  def dependency_specs(gem_names); end

  def get_formatted_specs_and_deps(gem_list); end

  def specs(gem_names, full_dependency_list=T.unsafe(nil), last_spec_list=T.unsafe(nil)); end

  def unmarshalled_dep_gems(gem_names); end
end

class Bundler::Fetcher::Dependency
end

class Bundler::Fetcher::Downloader
  def connection(); end

  def fetch(uri, headers=T.unsafe(nil), counter=T.unsafe(nil)); end

  def initialize(connection, redirect_limit); end

  def redirect_limit(); end

  def request(uri, headers); end
end

class Bundler::Fetcher::Downloader
end

class Bundler::Fetcher::Index
  def fetch_spec(spec); end

  def specs(_gem_names); end
end

class Bundler::Fetcher::Index
end

class Bundler::Fetcher::SSLError
  def initialize(msg=T.unsafe(nil)); end
end

class Bundler::Fetcher::TooManyRequestsError
end

class Bundler::Fetcher::TooManyRequestsError
end

class Bundler::Fetcher
  def self.api_timeout(); end

  def self.api_timeout=(api_timeout); end

  def self.disable_endpoint(); end

  def self.disable_endpoint=(disable_endpoint); end

  def self.max_retries(); end

  def self.max_retries=(max_retries); end

  def self.redirect_limit(); end

  def self.redirect_limit=(redirect_limit); end
end

module Bundler::FileUtils
  VERSION = ::T.let(nil, ::T.untyped)
end

class Bundler::FileUtils::Entry_
  def link(dest); end
end

module Bundler::FileUtils
  def self.cp_lr(src, dest, noop: T.unsafe(nil), verbose: T.unsafe(nil), dereference_root: T.unsafe(nil), remove_destination: T.unsafe(nil)); end

  def self.link_entry(src, dest, dereference_root=T.unsafe(nil), remove_destination=T.unsafe(nil)); end
end

class Bundler::GemHelper
  include ::Rake::DSL
  include ::Rake::FileUtilsExt
  include ::FileUtils
  include ::FileUtils::StreamUtils_
  def allowed_push_host(); end

  def already_tagged?(); end

  def base(); end

  def build_gem(); end

  def built_gem_path(); end

  def clean?(); end

  def committed?(); end

  def gem_command(); end

  def gem_key(); end

  def gem_push?(); end

  def gem_push_host(); end

  def gemspec(); end

  def git_push(remote=T.unsafe(nil)); end

  def guard_clean(); end

  def initialize(base=T.unsafe(nil), name=T.unsafe(nil)); end

  def install(); end

  def install_gem(built_gem_path=T.unsafe(nil), local=T.unsafe(nil)); end

  def name(); end

  def perform_git_push(options=T.unsafe(nil)); end

  def rubygem_push(path); end

  def sh(cmd, &block); end

  def sh_with_input(cmd); end

  def sh_with_status(cmd, &block); end

  def spec_path(); end

  def tag_version(); end

  def version(); end

  def version_tag(); end
end

class Bundler::GemHelper
  def self.gemspec(&block); end

  def self.install_tasks(opts=T.unsafe(nil)); end

  def self.instance(); end

  def self.instance=(instance); end
end

class Bundler::GemVersionPromoter
  def initialize(locked_specs=T.unsafe(nil), unlock_gems=T.unsafe(nil)); end

  def level(); end

  def level=(value); end

  def locked_specs(); end

  def major?(); end

  def minor?(); end

  def prerelease_specified(); end

  def prerelease_specified=(prerelease_specified); end

  def sort_versions(dep, spec_groups); end

  def strict(); end

  def strict=(strict); end

  def unlock_gems(); end
  DEBUG = ::T.let(nil, ::T.untyped)
end

class Bundler::GemVersionPromoter
end

class Bundler::Graph
  def edge_options(); end

  def groups(); end

  def initialize(env, output_file, show_version=T.unsafe(nil), show_requirements=T.unsafe(nil), output_format=T.unsafe(nil), without=T.unsafe(nil)); end

  def node_options(); end

  def output_file(); end

  def output_format(); end

  def relations(); end

  def viz(); end
  GRAPH_NAME = ::T.let(nil, ::T.untyped)
end

class Bundler::Graph::GraphVizClient
  def g(); end

  def initialize(graph_instance); end

  def run(); end
end

class Bundler::Graph::GraphVizClient
end

class Bundler::Graph
end

class Bundler::Index
  include ::Enumerable
end

class Bundler::Injector
  def initialize(deps, options=T.unsafe(nil)); end

  def inject(gemfile_path, lockfile_path); end

  def remove(gemfile_path, lockfile_path); end
  INJECTED_GEMS = ::T.let(nil, ::T.untyped)
end

class Bundler::Injector
  def self.inject(new_deps, options=T.unsafe(nil)); end

  def self.remove(gems, options=T.unsafe(nil)); end
end

class Bundler::Molinillo::DependencyGraph
  include ::Enumerable
end

class Bundler::Molinillo::DependencyGraph::Log
  extend ::Enumerable
end

class Bundler::Molinillo::DependencyGraph::Vertex
  def _recursive_predecessors(vertices=T.unsafe(nil)); end

  def _recursive_successors(vertices=T.unsafe(nil)); end
end

module Bundler::Plugin::API::Source
  def ==(other); end

  def app_cache_dirname(); end

  def app_cache_path(custom_path=T.unsafe(nil)); end

  def bundler_plugin_api_source?(); end

  def cache(spec, custom_path=T.unsafe(nil)); end

  def cached!(); end

  def can_lock?(spec); end

  def dependency_names(); end

  def dependency_names=(dependency_names); end

  def double_check_for(*arg); end

  def eql?(other); end

  def fetch_gemspec_files(); end

  def gem_install_dir(); end

  def hash(); end

  def include?(other); end

  def initialize(opts); end

  def install(spec, opts); end

  def install_path(); end

  def installed?(); end

  def name(); end

  def options(); end

  def options_to_lock(); end

  def post_install(spec, disable_exts=T.unsafe(nil)); end

  def remote!(); end

  def root(); end

  def specs(); end

  def to_lock(); end

  def to_s(); end

  def unlock!(); end

  def unmet_deps(); end

  def uri(); end

  def uri_hash(); end
end

module Bundler::Plugin::API::Source
end

module Bundler::Plugin::Events
  GEM_AFTER_INSTALL = ::T.let(nil, ::T.untyped)
  GEM_AFTER_INSTALL_ALL = ::T.let(nil, ::T.untyped)
  GEM_BEFORE_INSTALL = ::T.let(nil, ::T.untyped)
  GEM_BEFORE_INSTALL_ALL = ::T.let(nil, ::T.untyped)
end

class Bundler::Plugin::Index
  def installed_plugins(); end

  def plugin_commands(plugin); end
end

class Bundler::Plugin::Index::CommandConflict
  def initialize(plugin, commands); end
end

class Bundler::Plugin::Index::CommandConflict
end

class Bundler::Plugin::Index::SourceConflict
  def initialize(plugin, sources); end
end

class Bundler::Plugin::Index::SourceConflict
end

class Bundler::Plugin::Installer
  def install(names, options); end

  def install_definition(definition); end
end

class Bundler::Plugin::Installer::Git
  def generate_bin(spec, disable_extensions=T.unsafe(nil)); end
end

class Bundler::Plugin::Installer::Git
end

class Bundler::Plugin::Installer::Rubygems
end

class Bundler::Plugin::Installer::Rubygems
end

class Bundler::Plugin::Installer
end

class Bundler::Plugin::SourceList
end

class Bundler::Plugin::SourceList
end

module Bundler::Plugin
  def self.list(); end
end

class Bundler::ProcessLock
end

class Bundler::ProcessLock
  def self.lock(bundle_path=T.unsafe(nil)); end
end

class Bundler::Retry
  def attempt(&block); end

  def attempts(&block); end

  def current_run(); end

  def current_run=(current_run); end

  def initialize(name, exceptions=T.unsafe(nil), retries=T.unsafe(nil)); end

  def name(); end

  def name=(name); end

  def total_runs(); end

  def total_runs=(total_runs); end
end

class Bundler::Retry
  def self.attempts(); end

  def self.default_attempts(); end

  def self.default_retries(); end
end

class Bundler::RubyGemsGemInstaller
end

class Bundler::RubyGemsGemInstaller
end

class Bundler::RubygemsIntegration
  def add_to_load_path(paths); end

  def all_specs(); end

  def backport_ext_builder_monitor(); end

  def correct_for_windows_path(path); end

  def default_stubs(); end

  def find_name(name); end

  def gem_remote_fetcher(); end

  def plain_specs(); end

  def plain_specs=(specs); end

  def stub_rubygems(specs); end

  def use_gemdeps(gemfile); end
end

class Bundler::Settings::Mirror
  def ==(other); end

  def fallback_timeout(); end

  def fallback_timeout=(timeout); end

  def initialize(uri=T.unsafe(nil), fallback_timeout=T.unsafe(nil)); end

  def uri(); end

  def uri=(uri); end

  def valid?(); end

  def validate!(probe=T.unsafe(nil)); end
  DEFAULT_FALLBACK_TIMEOUT = ::T.let(nil, ::T.untyped)
end

class Bundler::Settings::Mirror
end

class Bundler::Settings::Mirrors
  def each(&blk); end

  def for(uri); end

  def initialize(prober=T.unsafe(nil)); end

  def parse(key, value); end
end

class Bundler::Settings::Mirrors
end

class Bundler::Settings::Validator
end

class Bundler::Settings::Validator::Rule
  def description(); end

  def fail!(key, value, *reasons); end

  def initialize(keys, description, &validate); end

  def k(key); end

  def set(settings, key, value, *reasons); end

  def validate!(key, value, settings); end
end

class Bundler::Settings::Validator::Rule
end

class Bundler::Settings::Validator
  def self.validate!(key, value, settings); end
end

class Bundler::Source::Git
  def glob(); end
end

class Bundler::SpecSet
  include ::Enumerable
end

class Bundler::Thor
  include ::Bundler::Thor::Base
  include ::Bundler::Thor::Invocation
  include ::Bundler::Thor::Shell
  def help(command=T.unsafe(nil), subcommand=T.unsafe(nil)); end
  HELP_MAPPINGS = ::T.let(nil, ::T.untyped)
  TEMPLATE_EXTNAME = ::T.let(nil, ::T.untyped)
  THOR_RESERVED_WORDS = ::T.let(nil, ::T.untyped)
end

module Bundler::Thor::Actions
  def _cleanup_options_and_set(options, key); end

  def _shared_configuration(); end

  def action(instance); end

  def add_file(destination, *args, &block); end

  def add_link(destination, *args); end

  def append_file(path, *args, &block); end

  def append_to_file(path, *args, &block); end

  def apply(path, config=T.unsafe(nil)); end

  def behavior(); end

  def behavior=(behavior); end

  def chmod(path, mode, config=T.unsafe(nil)); end

  def comment_lines(path, flag, *args); end

  def copy_file(source, *args, &block); end

  def create_file(destination, *args, &block); end

  def create_link(destination, *args); end

  def destination_root(); end

  def destination_root=(root); end

  def directory(source, *args, &block); end

  def empty_directory(destination, config=T.unsafe(nil)); end

  def find_in_source_paths(file); end

  def get(source, *args, &block); end

  def gsub_file(path, flag, *args, &block); end

  def in_root(); end

  def initialize(args=T.unsafe(nil), options=T.unsafe(nil), config=T.unsafe(nil)); end

  def inject_into_class(path, klass, *args, &block); end

  def inject_into_file(destination, *args, &block); end

  def inject_into_module(path, module_name, *args, &block); end

  def insert_into_file(destination, *args, &block); end

  def inside(dir=T.unsafe(nil), config=T.unsafe(nil), &block); end

  def link_file(source, *args); end

  def prepend_file(path, *args, &block); end

  def prepend_to_file(path, *args, &block); end

  def relative_to_original_destination_root(path, remove_dot=T.unsafe(nil)); end

  def remove_dir(path, config=T.unsafe(nil)); end

  def remove_file(path, config=T.unsafe(nil)); end

  def run(command, config=T.unsafe(nil)); end

  def run_ruby_script(command, config=T.unsafe(nil)); end

  def source_paths(); end

  def template(source, *args, &block); end

  def thor(command, *args); end

  def uncomment_lines(path, flag, *args); end
  WARNINGS = ::T.let(nil, ::T.untyped)
end

class Bundler::Thor::Actions::CapturableERB
end

class Bundler::Thor::Actions::CapturableERB
end

module Bundler::Thor::Actions::ClassMethods
  def add_runtime_options!(); end

  def source_paths(); end

  def source_paths_for_search(); end

  def source_root(path=T.unsafe(nil)); end
end

module Bundler::Thor::Actions::ClassMethods
end

class Bundler::Thor::Actions::CreateFile
  def data(); end

  def force_on_collision?(); end

  def force_or_skip_or_conflict(force, skip, &block); end

  def identical?(); end

  def initialize(base, destination, data, config=T.unsafe(nil)); end

  def on_conflict_behavior(&block); end

  def render(); end
end

class Bundler::Thor::Actions::CreateFile
end

class Bundler::Thor::Actions::CreateLink
end

class Bundler::Thor::Actions::CreateLink
end

class Bundler::Thor::Actions::Directory
  def execute!(); end

  def file_level_lookup(previous_lookup); end

  def files(lookup); end

  def initialize(base, source, destination=T.unsafe(nil), config=T.unsafe(nil), &block); end

  def source(); end
end

class Bundler::Thor::Actions::Directory
end

class Bundler::Thor::Actions::EmptyDirectory
  def base(); end

  def config(); end

  def convert_encoded_instructions(filename); end

  def destination(); end

  def destination=(destination); end

  def exists?(); end

  def given_destination(); end

  def initialize(base, destination, config=T.unsafe(nil)); end

  def invoke!(); end

  def invoke_with_conflict_check(&block); end

  def on_conflict_behavior(); end

  def on_file_clash_behavior(); end

  def pretend?(); end

  def relative_destination(); end

  def revoke!(); end

  def say_status(status, color); end
end

class Bundler::Thor::Actions::EmptyDirectory
end

class Bundler::Thor::Actions::InjectIntoFile
  def behavior(); end

  def flag(); end

  def initialize(base, destination, data, config); end

  def replace!(regexp, string, force); end

  def replacement(); end

  def say_status(behavior, warning: T.unsafe(nil), color: T.unsafe(nil)); end
end

class Bundler::Thor::Actions::InjectIntoFile
end

module Bundler::Thor::Actions
  def self.included(base); end
end

class Bundler::Thor::AmbiguousCommandError
end

class Bundler::Thor::AmbiguousCommandError
end

Bundler::Thor::AmbiguousTaskError = Bundler::Thor::AmbiguousCommandError

class Bundler::Thor::Argument
  def banner(); end

  def default(); end

  def default_banner(); end

  def description(); end

  def enum(); end

  def human_name(); end

  def initialize(name, options=T.unsafe(nil)); end

  def name(); end

  def required(); end

  def required?(); end

  def show_default?(); end

  def type(); end

  def usage(); end

  def valid_type?(type); end

  def validate!(); end
  VALID_TYPES = ::T.let(nil, ::T.untyped)
end

class Bundler::Thor::Argument
end

class Bundler::Thor::Arguments
  def initialize(arguments=T.unsafe(nil)); end

  def parse(args); end

  def remaining(); end
  NUMERIC = ::T.let(nil, ::T.untyped)
end

class Bundler::Thor::Arguments
  def self.parse(*args); end

  def self.split(args); end
end

module Bundler::Thor::Base
  def args(); end

  def args=(args); end

  def initialize(args=T.unsafe(nil), local_options=T.unsafe(nil), config=T.unsafe(nil)); end

  def options(); end

  def options=(options); end

  def parent_options(); end

  def parent_options=(parent_options); end
end

module Bundler::Thor::Base::ClassMethods
  def all_commands(); end

  def all_tasks(); end

  def allow_incompatible_default_type!(); end

  def argument(name, options=T.unsafe(nil)); end

  def arguments(); end

  def attr_accessor(*arg); end

  def attr_reader(*arg); end

  def attr_writer(*arg); end

  def baseclass(); end

  def basename(); end

  def build_option(name, options, scope); end

  def build_options(options, scope); end

  def check_default_type(); end

  def check_default_type!(); end

  def check_unknown_options(); end

  def check_unknown_options!(); end

  def check_unknown_options?(config); end

  def class_option(name, options=T.unsafe(nil)); end

  def class_options(options=T.unsafe(nil)); end

  def class_options_help(shell, groups=T.unsafe(nil)); end

  def commands(); end

  def create_command(meth); end

  def create_task(meth); end

  def disable_required_check?(command_name); end

  def dispatch(command, given_args, given_opts, config); end

  def exit_on_failure?(); end

  def find_and_refresh_command(name); end

  def find_and_refresh_task(name); end

  def from_superclass(method, default=T.unsafe(nil)); end

  def group(name=T.unsafe(nil)); end

  def handle_argument_error(command, error, args, arity); end

  def handle_no_command_error(command, has_namespace=T.unsafe(nil)); end

  def handle_no_task_error(command, has_namespace=T.unsafe(nil)); end

  def inherited(klass); end

  def initialize_added(); end

  def is_thor_reserved_word?(word, type); end

  def method_added(meth); end

  def namespace(name=T.unsafe(nil)); end

  def no_commands(&block); end

  def no_commands?(); end

  def no_commands_context(); end

  def no_tasks(&block); end

  def print_options(shell, options, group_name=T.unsafe(nil)); end

  def public_command(*names); end

  def public_task(*names); end

  def remove_argument(*names); end

  def remove_class_option(*names); end

  def remove_command(*names); end

  def remove_task(*names); end

  def start(given_args=T.unsafe(nil), config=T.unsafe(nil)); end

  def stop_on_unknown_option?(command_name); end

  def strict_args_position(); end

  def strict_args_position!(); end

  def strict_args_position?(config); end

  def tasks(); end
end

module Bundler::Thor::Base::ClassMethods
end

module Bundler::Thor::Base
  def self.included(base); end

  def self.register_klass_file(klass); end

  def self.shell(); end

  def self.shell=(shell); end

  def self.subclass_files(); end

  def self.subclasses(); end
end

class Bundler::Thor::Command
  def formatted_usage(klass, namespace=T.unsafe(nil), subcommand=T.unsafe(nil)); end

  def handle_argument_error?(instance, error, caller); end

  def handle_no_method_error?(instance, error, caller); end

  def hidden?(); end

  def initialize(name, description, long_description, usage, options=T.unsafe(nil)); end

  def local_method?(instance, name); end

  def not_debugging?(instance); end

  def private_method?(instance); end

  def public_method?(instance); end

  def required_arguments_for(klass, usage); end

  def required_options(); end

  def run(instance, args=T.unsafe(nil)); end

  def sans_backtrace(backtrace, caller); end
  FILE_REGEXP = ::T.let(nil, ::T.untyped)
end

class Bundler::Thor::Command
end

module Bundler::Thor::CoreExt
end

class Bundler::Thor::CoreExt::HashWithIndifferentAccess
  def [](key); end

  def []=(key, value); end

  def convert_key(key); end

  def delete(key); end

  def fetch(key, *args); end

  def initialize(hash=T.unsafe(nil)); end

  def key?(key); end

  def merge(other); end

  def merge!(other); end

  def method_missing(method, *args); end

  def replace(other_hash); end

  def reverse_merge(other); end

  def reverse_merge!(other_hash); end

  def values_at(*indices); end
end

class Bundler::Thor::CoreExt::HashWithIndifferentAccess
end

module Bundler::Thor::CoreExt
end

Bundler::Thor::Correctable = DidYouMean::Correctable

class Bundler::Thor::DynamicCommand
  def initialize(name, options=T.unsafe(nil)); end
end

class Bundler::Thor::DynamicCommand
end

Bundler::Thor::DynamicTask = Bundler::Thor::DynamicCommand

class Bundler::Thor::Error
end

class Bundler::Thor::Error
end

class Bundler::Thor::Group
  include ::Bundler::Thor::Base
  include ::Bundler::Thor::Invocation
  include ::Bundler::Thor::Shell
  def _invoke_for_class_method(klass, command=T.unsafe(nil), *args, &block); end
end

class Bundler::Thor::Group
  extend ::Bundler::Thor::Base::ClassMethods
  extend ::Bundler::Thor::Invocation::ClassMethods
  def self.banner(); end

  def self.desc(description=T.unsafe(nil)); end

  def self.get_options_from_invocations(group_options, base_options); end

  def self.handle_argument_error(command, error, _args, arity); end

  def self.help(shell); end

  def self.invocation_blocks(); end

  def self.invocations(); end

  def self.invoke(*names, &block); end

  def self.invoke_from_option(*names, &block); end

  def self.printable_commands(*arg); end

  def self.printable_tasks(*arg); end

  def self.remove_invocation(*names); end

  def self.self_command(); end

  def self.self_task(); end
end

class Bundler::Thor::HiddenCommand
end

class Bundler::Thor::HiddenCommand
end

Bundler::Thor::HiddenTask = Bundler::Thor::HiddenCommand

module Bundler::Thor::Invocation
  def _parse_initialization_options(args, opts, config); end

  def _retrieve_class_and_command(name, sent_command=T.unsafe(nil)); end

  def _retrieve_class_and_task(name, sent_command=T.unsafe(nil)); end

  def _shared_configuration(); end

  def current_command_chain(); end

  def initialize(args=T.unsafe(nil), options=T.unsafe(nil), config=T.unsafe(nil), &block); end

  def invoke(name=T.unsafe(nil), *args); end

  def invoke_all(); end

  def invoke_command(command, *args); end

  def invoke_task(command, *args); end

  def invoke_with_padding(*args); end
end

module Bundler::Thor::Invocation::ClassMethods
  def prepare_for_invocation(key, name); end
end

module Bundler::Thor::Invocation::ClassMethods
end

module Bundler::Thor::Invocation
  def self.included(base); end
end

class Bundler::Thor::InvocationError
end

class Bundler::Thor::InvocationError
end

module Bundler::Thor::LineEditor
end

class Bundler::Thor::LineEditor::Basic
  def initialize(prompt, options); end

  def options(); end

  def prompt(); end

  def readline(); end
end

class Bundler::Thor::LineEditor::Basic
  def self.available?(); end
end

class Bundler::Thor::LineEditor::Readline
end

class Bundler::Thor::LineEditor::Readline::PathCompletion
  def initialize(text); end

  def matches(); end
end

class Bundler::Thor::LineEditor::Readline::PathCompletion
end

class Bundler::Thor::LineEditor::Readline
end

module Bundler::Thor::LineEditor
  def self.best_available(); end

  def self.readline(prompt, options=T.unsafe(nil)); end
end

class Bundler::Thor::MalformattedArgumentError
end

class Bundler::Thor::MalformattedArgumentError
end

class Bundler::Thor::NestedContext
  def enter(); end

  def entered?(); end
end

class Bundler::Thor::NestedContext
end

class Bundler::Thor::NoKwargSpellChecker
  def initialize(dictionary); end
end

class Bundler::Thor::NoKwargSpellChecker
end

class Bundler::Thor::Option
  def aliases(); end

  def array?(); end

  def boolean?(); end

  def dasherize(str); end

  def dasherized?(); end

  def group(); end

  def hash?(); end

  def hide(); end

  def lazy_default(); end

  def numeric?(); end

  def repeatable(); end

  def string?(); end

  def switch_name(); end

  def undasherize(str); end

  def usage(padding=T.unsafe(nil)); end

  def validate_default_type!(); end
  VALID_TYPES = ::T.let(nil, ::T.untyped)
end

class Bundler::Thor::Option
  def self.parse(key, value); end
end

class Bundler::Thor::Options
  def assign_result!(option, result); end

  def check_unknown!(); end

  def current_is_switch?(); end

  def current_is_switch_formatted?(); end

  def initialize(hash_options=T.unsafe(nil), defaults=T.unsafe(nil), stop_on_unknown=T.unsafe(nil), disable_required_check=T.unsafe(nil)); end

  def normalize_switch(arg); end

  def parse_boolean(switch); end

  def parse_peek(switch, option); end

  def parsing_options?(); end

  def switch?(arg); end

  def switch_option(arg); end
  EQ_RE = ::T.let(nil, ::T.untyped)
  LONG_RE = ::T.let(nil, ::T.untyped)
  OPTS_END = ::T.let(nil, ::T.untyped)
  SHORT_NUM = ::T.let(nil, ::T.untyped)
  SHORT_RE = ::T.let(nil, ::T.untyped)
  SHORT_SQ_RE = ::T.let(nil, ::T.untyped)
end

class Bundler::Thor::Options
  def self.to_switches(options); end
end

module Bundler::Thor::RakeCompat
  include ::Rake::DSL
  include ::Rake::FileUtilsExt
  include ::FileUtils
  include ::FileUtils::StreamUtils_
end

module Bundler::Thor::RakeCompat
  def self.included(base); end

  def self.rake_classes(); end
end

class Bundler::Thor::RequiredArgumentMissingError
end

class Bundler::Thor::RequiredArgumentMissingError
end

module Bundler::Thor::Sandbox
end

module Bundler::Thor::Sandbox
end

module Bundler::Thor::Shell
  def _shared_configuration(); end

  def ask(*args, &block); end

  def error(*args, &block); end

  def file_collision(*args, &block); end

  def initialize(args=T.unsafe(nil), options=T.unsafe(nil), config=T.unsafe(nil)); end

  def no?(*args, &block); end

  def print_in_columns(*args, &block); end

  def print_table(*args, &block); end

  def print_wrapped(*args, &block); end

  def say(*args, &block); end

  def say_status(*args, &block); end

  def set_color(*args, &block); end

  def shell(); end

  def shell=(shell); end

  def terminal_width(*args, &block); end

  def with_padding(); end

  def yes?(*args, &block); end
  SHELL_DELEGATED_METHODS = ::T.let(nil, ::T.untyped)
end

class Bundler::Thor::Shell::Basic
  def answer_match(possibilities, answer, case_insensitive); end

  def as_unicode(); end

  def ask(statement, *args); end

  def ask_filtered(statement, color, options); end

  def ask_simply(statement, color, options); end

  def base(); end

  def base=(base); end

  def can_display_colors?(); end

  def dynamic_width(); end

  def dynamic_width_stty(); end

  def dynamic_width_tput(); end

  def error(statement); end

  def file_collision(destination); end

  def file_collision_help(); end

  def git_merge_tool(); end

  def indent(count=T.unsafe(nil)); end

  def is?(value); end

  def lookup_color(color); end

  def merge(destination, content); end

  def merge_tool(); end

  def mute(); end

  def mute?(); end

  def no?(statement, color=T.unsafe(nil)); end

  def padding(); end

  def padding=(value); end

  def prepare_message(message, *color); end

  def print_in_columns(array); end

  def print_table(array, options=T.unsafe(nil)); end

  def print_wrapped(message, options=T.unsafe(nil)); end

  def quiet?(); end

  def say(message=T.unsafe(nil), color=T.unsafe(nil), force_new_line=T.unsafe(nil)); end

  def say_status(status, message, log_status=T.unsafe(nil)); end

  def set_color(string, *arg); end

  def show_diff(destination, content); end

  def stderr(); end

  def stdout(); end

  def terminal_width(); end

  def truncate(string, width); end

  def unix?(); end

  def yes?(statement, color=T.unsafe(nil)); end
  DEFAULT_TERMINAL_WIDTH = ::T.let(nil, ::T.untyped)
end

class Bundler::Thor::Shell::Basic
end

class Bundler::Thor::Shell::Color
  def are_colors_disabled?(); end

  def diff_lcs_loaded?(); end

  def output_diff_line(diff); end

  def set_color(string, *colors); end
  BLACK = ::T.let(nil, ::T.untyped)
  BLUE = ::T.let(nil, ::T.untyped)
  BOLD = ::T.let(nil, ::T.untyped)
  CLEAR = ::T.let(nil, ::T.untyped)
  CYAN = ::T.let(nil, ::T.untyped)
  GREEN = ::T.let(nil, ::T.untyped)
  MAGENTA = ::T.let(nil, ::T.untyped)
  ON_BLACK = ::T.let(nil, ::T.untyped)
  ON_BLUE = ::T.let(nil, ::T.untyped)
  ON_CYAN = ::T.let(nil, ::T.untyped)
  ON_GREEN = ::T.let(nil, ::T.untyped)
  ON_MAGENTA = ::T.let(nil, ::T.untyped)
  ON_RED = ::T.let(nil, ::T.untyped)
  ON_WHITE = ::T.let(nil, ::T.untyped)
  ON_YELLOW = ::T.let(nil, ::T.untyped)
  RED = ::T.let(nil, ::T.untyped)
  WHITE = ::T.let(nil, ::T.untyped)
  YELLOW = ::T.let(nil, ::T.untyped)
end

class Bundler::Thor::Shell::Color
end

class Bundler::Thor::Shell::HTML
  def ask(statement, color=T.unsafe(nil)); end

  def diff_lcs_loaded?(); end

  def output_diff_line(diff); end

  def set_color(string, *colors); end
  BLACK = ::T.let(nil, ::T.untyped)
  BLUE = ::T.let(nil, ::T.untyped)
  BOLD = ::T.let(nil, ::T.untyped)
  CYAN = ::T.let(nil, ::T.untyped)
  GREEN = ::T.let(nil, ::T.untyped)
  MAGENTA = ::T.let(nil, ::T.untyped)
  ON_BLACK = ::T.let(nil, ::T.untyped)
  ON_BLUE = ::T.let(nil, ::T.untyped)
  ON_CYAN = ::T.let(nil, ::T.untyped)
  ON_GREEN = ::T.let(nil, ::T.untyped)
  ON_MAGENTA = ::T.let(nil, ::T.untyped)
  ON_RED = ::T.let(nil, ::T.untyped)
  ON_WHITE = ::T.let(nil, ::T.untyped)
  ON_YELLOW = ::T.let(nil, ::T.untyped)
  RED = ::T.let(nil, ::T.untyped)
  WHITE = ::T.let(nil, ::T.untyped)
  YELLOW = ::T.let(nil, ::T.untyped)
end

class Bundler::Thor::Shell::HTML
end

module Bundler::Thor::Shell
end

Bundler::Thor::Task = Bundler::Thor::Command

class Bundler::Thor::UndefinedCommandError
  include ::DidYouMean::Correctable
  def all_commands(); end

  def command(); end

  def initialize(command, all_commands, namespace); end
end

class Bundler::Thor::UndefinedCommandError::SpellChecker
  def corrections(); end

  def error(); end

  def initialize(error); end

  def spell_checker(); end
end

class Bundler::Thor::UndefinedCommandError::SpellChecker
end

class Bundler::Thor::UndefinedCommandError
end

Bundler::Thor::UndefinedTaskError = Bundler::Thor::UndefinedCommandError

class Bundler::Thor::UnknownArgumentError
  include ::DidYouMean::Correctable
  def initialize(switches, unknown); end

  def switches(); end

  def unknown(); end
end

class Bundler::Thor::UnknownArgumentError::SpellChecker
  def corrections(); end

  def error(); end

  def initialize(error); end

  def spell_checker(); end
end

class Bundler::Thor::UnknownArgumentError::SpellChecker
end

class Bundler::Thor::UnknownArgumentError
end

module Bundler::Thor::Util
end

module Bundler::Thor::Util
  def self.camel_case(str); end

  def self.escape_globs(path); end

  def self.escape_html(string); end

  def self.find_by_namespace(namespace); end

  def self.find_class_and_command_by_namespace(namespace, fallback=T.unsafe(nil)); end

  def self.find_class_and_task_by_namespace(namespace, fallback=T.unsafe(nil)); end

  def self.globs_for(path); end

  def self.load_thorfile(path, content=T.unsafe(nil), debug=T.unsafe(nil)); end

  def self.namespace_from_thor_class(constant); end

  def self.namespaces_in_content(contents, file=T.unsafe(nil)); end

  def self.ruby_command(); end

  def self.snake_case(str); end

  def self.thor_classes_in(klass); end

  def self.thor_root(); end

  def self.thor_root_glob(); end

  def self.user_home(); end
end

class Bundler::Thor
  extend ::Bundler::Thor::Base::ClassMethods
  extend ::Bundler::Thor::Invocation::ClassMethods
  def self.banner(command, namespace=T.unsafe(nil), subcommand=T.unsafe(nil)); end

  def self.check_unknown_options!(options=T.unsafe(nil)); end

  def self.command_help(shell, command_name); end

  def self.default_command(meth=T.unsafe(nil)); end

  def self.default_task(meth=T.unsafe(nil)); end

  def self.deprecation_warning(message); end

  def self.desc(usage, description, options=T.unsafe(nil)); end

  def self.disable_required_check(); end

  def self.disable_required_check!(*command_names); end

  def self.disable_required_check?(command); end

  def self.dispatch(meth, given_args, given_opts, config); end

  def self.dynamic_command_class(); end

  def self.find_command_possibilities(meth); end

  def self.find_task_possibilities(meth); end

  def self.help(shell, subcommand=T.unsafe(nil)); end

  def self.long_desc(long_description, options=T.unsafe(nil)); end

  def self.map(mappings=T.unsafe(nil), **kw); end

  def self.method_option(name, options=T.unsafe(nil)); end

  def self.method_options(options=T.unsafe(nil)); end

  def self.normalize_command_name(meth); end

  def self.normalize_task_name(meth); end

  def self.option(name, options=T.unsafe(nil)); end

  def self.options(options=T.unsafe(nil)); end

  def self.package_name(name, _=T.unsafe(nil)); end

  def self.printable_commands(all=T.unsafe(nil), subcommand=T.unsafe(nil)); end

  def self.printable_tasks(all=T.unsafe(nil), subcommand=T.unsafe(nil)); end

  def self.register(klass, subcommand_name, usage, description, options=T.unsafe(nil)); end

  def self.retrieve_command_name(args); end

  def self.retrieve_task_name(args); end

  def self.stop_on_unknown_option(); end

  def self.stop_on_unknown_option!(*command_names); end

  def self.stop_on_unknown_option?(command); end

  def self.subcommand(subcommand, subcommand_class); end

  def self.subcommand_classes(); end

  def self.subcommand_help(cmd); end

  def self.subcommands(); end

  def self.subtask(subcommand, subcommand_class); end

  def self.subtask_help(cmd); end

  def self.subtasks(); end

  def self.task_help(shell, command_name); end
end

class Bundler::UI::Shell
  def add_color(string, *color); end

  def ask(msg); end

  def confirm(msg, newline=T.unsafe(nil)); end

  def debug(msg, newline=T.unsafe(nil)); end

  def debug?(); end

  def error(msg, newline=T.unsafe(nil)); end

  def info(msg, newline=T.unsafe(nil)); end

  def initialize(options=T.unsafe(nil)); end

  def level(name=T.unsafe(nil)); end

  def level=(level); end

  def no?(); end

  def quiet?(); end

  def shell=(shell); end

  def silence(&blk); end

  def trace(e, newline=T.unsafe(nil), force=T.unsafe(nil)); end

  def unprinted_warnings(); end

  def warn(msg, newline=T.unsafe(nil)); end

  def yes?(msg); end
  LEVELS = ::T.let(nil, ::T.untyped)
end

class Bundler::UI::Shell
end

module Bundler::URI
  include ::Bundler::URI::RFC2396_REGEXP
  ABS_PATH = ::T.let(nil, ::T.untyped)
  ABS_URI = ::T.let(nil, ::T.untyped)
  ABS_URI_REF = ::T.let(nil, ::T.untyped)
  DEFAULT_PARSER = ::T.let(nil, ::T.untyped)
  ESCAPED = ::T.let(nil, ::T.untyped)
  FRAGMENT = ::T.let(nil, ::T.untyped)
  HOST = ::T.let(nil, ::T.untyped)
  OPAQUE = ::T.let(nil, ::T.untyped)
  PORT = ::T.let(nil, ::T.untyped)
  QUERY = ::T.let(nil, ::T.untyped)
  REGISTRY = ::T.let(nil, ::T.untyped)
  REL_PATH = ::T.let(nil, ::T.untyped)
  REL_URI = ::T.let(nil, ::T.untyped)
  REL_URI_REF = ::T.let(nil, ::T.untyped)
  RFC3986_PARSER = ::T.let(nil, ::T.untyped)
  SCHEME = ::T.let(nil, ::T.untyped)
  TBLDECWWWCOMP_ = ::T.let(nil, ::T.untyped)
  TBLENCWWWCOMP_ = ::T.let(nil, ::T.untyped)
  UNSAFE = ::T.let(nil, ::T.untyped)
  URI_REF = ::T.let(nil, ::T.untyped)
  USERINFO = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
  VERSION_CODE = ::T.let(nil, ::T.untyped)
  WEB_ENCODINGS_ = ::T.let(nil, ::T.untyped)
end

class Bundler::URI::BadURIError
end

class Bundler::URI::BadURIError
end

class Bundler::URI::Error
end

class Bundler::URI::Error
end

module Bundler::URI::Escape
  def decode(*arg); end

  def encode(*arg); end

  def escape(*arg); end

  def unescape(*arg); end
end

module Bundler::URI::Escape
end

class Bundler::URI::FTP
  def set_typecode(v); end

  def typecode(); end

  def typecode=(typecode); end
  COMPONENT = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
  TYPECODE = ::T.let(nil, ::T.untyped)
  TYPECODE_PREFIX = ::T.let(nil, ::T.untyped)
end

class Bundler::URI::FTP
  def self.new2(user, password, host, port, path, typecode=T.unsafe(nil), arg_check=T.unsafe(nil)); end
end

class Bundler::URI::File
  def check_password(user); end

  def check_user(user); end

  def check_userinfo(user); end

  def set_userinfo(v); end
  COMPONENT = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
end

class Bundler::URI::File
end

class Bundler::URI::Generic
  include ::Bundler::URI
  include ::Bundler::URI::RFC2396_REGEXP
  def +(oth); end

  def -(oth); end

  def ==(oth); end

  def absolute(); end

  def absolute?(); end

  def coerce(oth); end

  def component(); end

  def component_ary(); end

  def default_port(); end

  def eql?(oth); end

  def find_proxy(env=T.unsafe(nil)); end

  def fragment(); end

  def fragment=(v); end

  def hierarchical?(); end

  def host(); end

  def host=(v); end

  def hostname(); end

  def hostname=(v); end

  def initialize(scheme, userinfo, host, port, registry, path, opaque, query, fragment, parser=T.unsafe(nil), arg_check=T.unsafe(nil)); end

  def merge(oth); end

  def merge!(oth); end

  def normalize(); end

  def normalize!(); end

  def opaque(); end

  def opaque=(v); end

  def parser(); end

  def password(); end

  def password=(password); end

  def path(); end

  def path=(v); end

  def port(); end

  def port=(v); end

  def query(); end

  def query=(v); end

  def registry(); end

  def registry=(v); end

  def relative?(); end

  def route_from(oth); end

  def route_to(oth); end

  def scheme(); end

  def scheme=(v); end

  def select(*components); end

  def set_host(v); end

  def set_opaque(v); end

  def set_password(v); end

  def set_path(v); end

  def set_port(v); end

  def set_registry(v); end

  def set_scheme(v); end

  def set_user(v); end

  def set_userinfo(user, password=T.unsafe(nil)); end

  def user(); end

  def user=(user); end

  def userinfo(); end

  def userinfo=(userinfo); end
  COMPONENT = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
  USE_REGISTRY = ::T.let(nil, ::T.untyped)
end

class Bundler::URI::Generic
  def self.build(args); end

  def self.build2(args); end

  def self.component(); end

  def self.default_port(); end

  def self.use_proxy?(hostname, addr, port, no_proxy); end

  def self.use_registry(); end
end

class Bundler::URI::HTTP
  def request_uri(); end
  COMPONENT = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
end

class Bundler::URI::HTTP
end

class Bundler::URI::HTTPS
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
end

class Bundler::URI::HTTPS
end

class Bundler::URI::InvalidComponentError
end

class Bundler::URI::InvalidComponentError
end

class Bundler::URI::InvalidURIError
end

class Bundler::URI::InvalidURIError
end

class Bundler::URI::LDAP
  def attributes(); end

  def attributes=(val); end

  def dn(); end

  def dn=(val); end

  def extensions(); end

  def extensions=(val); end

  def filter(); end

  def filter=(val); end

  def initialize(*arg); end

  def scope(); end

  def scope=(val); end

  def set_attributes(val); end

  def set_dn(val); end

  def set_extensions(val); end

  def set_filter(val); end

  def set_scope(val); end
  COMPONENT = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
  SCOPE = ::T.let(nil, ::T.untyped)
  SCOPE_BASE = ::T.let(nil, ::T.untyped)
  SCOPE_ONE = ::T.let(nil, ::T.untyped)
  SCOPE_SUB = ::T.let(nil, ::T.untyped)
end

class Bundler::URI::LDAP
end

class Bundler::URI::LDAPS
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
end

class Bundler::URI::LDAPS
end

class Bundler::URI::MailTo
  def headers(); end

  def headers=(v); end

  def initialize(*arg); end

  def set_headers(v); end

  def set_to(v); end

  def to(); end

  def to=(v); end

  def to_mailtext(); end

  def to_rfc822text(); end
  COMPONENT = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
  EMAIL_REGEXP = ::T.let(nil, ::T.untyped)
  HEADER_REGEXP = ::T.let(nil, ::T.untyped)
end

class Bundler::URI::MailTo
end

Bundler::URI::Parser = Bundler::URI::RFC2396_Parser

Bundler::URI::REGEXP = Bundler::URI::RFC2396_REGEXP

class Bundler::URI::RFC2396_Parser
  include ::Bundler::URI::RFC2396_REGEXP
  def escape(str, unsafe=T.unsafe(nil)); end

  def extract(str, schemes=T.unsafe(nil)); end

  def initialize(opts=T.unsafe(nil)); end

  def join(*uris); end

  def make_regexp(schemes=T.unsafe(nil)); end

  def parse(uri); end

  def pattern(); end

  def regexp(); end

  def split(uri); end

  def unescape(str, escaped=T.unsafe(nil)); end
end

class Bundler::URI::RFC2396_Parser
end

module Bundler::URI::RFC2396_REGEXP
end

module Bundler::URI::RFC2396_REGEXP::PATTERN
  ABS_PATH = ::T.let(nil, ::T.untyped)
  ABS_URI = ::T.let(nil, ::T.untyped)
  ALNUM = ::T.let(nil, ::T.untyped)
  ALPHA = ::T.let(nil, ::T.untyped)
  DOMLABEL = ::T.let(nil, ::T.untyped)
  ESCAPED = ::T.let(nil, ::T.untyped)
  FRAGMENT = ::T.let(nil, ::T.untyped)
  HEX = ::T.let(nil, ::T.untyped)
  HIER_PART = ::T.let(nil, ::T.untyped)
  HOST = ::T.let(nil, ::T.untyped)
  HOSTNAME = ::T.let(nil, ::T.untyped)
  HOSTPORT = ::T.let(nil, ::T.untyped)
  IPV4ADDR = ::T.let(nil, ::T.untyped)
  IPV6ADDR = ::T.let(nil, ::T.untyped)
  IPV6REF = ::T.let(nil, ::T.untyped)
  NET_PATH = ::T.let(nil, ::T.untyped)
  OPAQUE_PART = ::T.let(nil, ::T.untyped)
  PATH_SEGMENTS = ::T.let(nil, ::T.untyped)
  PORT = ::T.let(nil, ::T.untyped)
  QUERY = ::T.let(nil, ::T.untyped)
  REG_NAME = ::T.let(nil, ::T.untyped)
  REL_PATH = ::T.let(nil, ::T.untyped)
  REL_SEGMENT = ::T.let(nil, ::T.untyped)
  REL_URI = ::T.let(nil, ::T.untyped)
  RESERVED = ::T.let(nil, ::T.untyped)
  SCHEME = ::T.let(nil, ::T.untyped)
  TOPLABEL = ::T.let(nil, ::T.untyped)
  UNRESERVED = ::T.let(nil, ::T.untyped)
  URIC = ::T.let(nil, ::T.untyped)
  URIC_NO_SLASH = ::T.let(nil, ::T.untyped)
  URI_REF = ::T.let(nil, ::T.untyped)
  USERINFO = ::T.let(nil, ::T.untyped)
  X_ABS_URI = ::T.let(nil, ::T.untyped)
  X_REL_URI = ::T.let(nil, ::T.untyped)
end

module Bundler::URI::RFC2396_REGEXP::PATTERN
end

module Bundler::URI::RFC2396_REGEXP
end

class Bundler::URI::RFC3986_Parser
  def join(*uris); end

  def parse(uri); end

  def regexp(); end

  def split(uri); end
  RFC3986_URI = ::T.let(nil, ::T.untyped)
  RFC3986_relative_ref = ::T.let(nil, ::T.untyped)
end

class Bundler::URI::RFC3986_Parser
end

module Bundler::URI::Util
end

module Bundler::URI::Util
  def self.make_components_hash(klass, array_hash); end
end

module Bundler::URI
  extend ::Bundler::URI::Escape
  def self.decode_www_form(str, enc=T.unsafe(nil), separator: T.unsafe(nil), use__charset_: T.unsafe(nil), isindex: T.unsafe(nil)); end

  def self.decode_www_form_component(str, enc=T.unsafe(nil)); end

  def self.encode_www_form(enum, enc=T.unsafe(nil)); end

  def self.encode_www_form_component(str, enc=T.unsafe(nil)); end

  def self.extract(str, schemes=T.unsafe(nil), &block); end

  def self.get_encoding(label); end

  def self.join(*str); end

  def self.parse(uri); end

  def self.regexp(schemes=T.unsafe(nil)); end

  def self.scheme_list(); end

  def self.split(uri); end
end

module Bundler::VersionRanges
end

class Bundler::VersionRanges::NEq
  def version(); end

  def version=(_); end
end

class Bundler::VersionRanges::NEq
  def self.[](*arg); end

  def self.members(); end
end

class Bundler::VersionRanges::ReqR
  def cover?(v); end

  def empty?(); end

  def left(); end

  def left=(_); end

  def right(); end

  def right=(_); end

  def single?(); end
  INFINITY = ::T.let(nil, ::T.untyped)
  UNIVERSAL = ::T.let(nil, ::T.untyped)
  ZERO = ::T.let(nil, ::T.untyped)
end

class Bundler::VersionRanges::ReqR::Endpoint
  def inclusive(); end

  def inclusive=(_); end

  def version(); end

  def version=(_); end
end

class Bundler::VersionRanges::ReqR::Endpoint
  def self.[](*arg); end

  def self.members(); end
end

class Bundler::VersionRanges::ReqR
  def self.[](*arg); end

  def self.members(); end
end

module Bundler::VersionRanges
  def self.empty?(ranges, neqs); end

  def self.for(requirement); end

  def self.for_many(requirements); end
end

module Bundler
  def self.original_exec(*args); end

  def self.original_system(*args); end

  def self.unbundled_env(); end

  def self.unbundled_exec(*args); end

  def self.unbundled_system(*args); end
end

module Byebug
  PORT = ::T.let(nil, ::T.untyped)
end

class Byebug::AutoirbSetting
  DEFAULT = ::T.let(nil, ::T.untyped)
end

class Byebug::AutolistSetting
  DEFAULT = ::T.let(nil, ::T.untyped)
end

class Byebug::AutoprySetting
  DEFAULT = ::T.let(nil, ::T.untyped)
end

class Byebug::AutosaveSetting
  DEFAULT = ::T.let(nil, ::T.untyped)
end

class Byebug::CallstyleSetting
  DEFAULT = ::T.let(nil, ::T.untyped)
end

class Byebug::Command
  extend ::Byebug::Helpers::StringHelper
end

class Byebug::Context
  extend ::Byebug::Helpers::PathHelper
end

class Byebug::FullpathSetting
  DEFAULT = ::T.let(nil, ::T.untyped)
end

class Byebug::HistfileSetting
  DEFAULT = ::T.let(nil, ::T.untyped)
end

class Byebug::HistsizeSetting
  DEFAULT = ::T.let(nil, ::T.untyped)
end

class Byebug::ListsizeSetting
  DEFAULT = ::T.let(nil, ::T.untyped)
end

class Byebug::LocalInterface
  EOF_ALIAS = ::T.let(nil, ::T.untyped)
end

class Byebug::Printers::Base
  SEPARATOR = ::T.let(nil, ::T.untyped)
end

class Byebug::SavefileSetting
  DEFAULT = ::T.let(nil, ::T.untyped)
end

class Byebug::Setting
  DEFAULT = ::T.let(nil, ::T.untyped)
end

class Byebug::ThreadsTable
end

class Byebug::ThreadsTable
end

class Byebug::WidthSetting
  DEFAULT = ::T.let(nil, ::T.untyped)
end

module CGI::HtmlExtension
  def a(href=T.unsafe(nil)); end

  def base(href=T.unsafe(nil)); end

  def blockquote(cite=T.unsafe(nil)); end

  def caption(align=T.unsafe(nil)); end

  def checkbox(name=T.unsafe(nil), value=T.unsafe(nil), checked=T.unsafe(nil)); end

  def checkbox_group(name=T.unsafe(nil), *values); end

  def file_field(name=T.unsafe(nil), size=T.unsafe(nil), maxlength=T.unsafe(nil)); end

  def form(method=T.unsafe(nil), action=T.unsafe(nil), enctype=T.unsafe(nil)); end

  def hidden(name=T.unsafe(nil), value=T.unsafe(nil)); end

  def html(attributes=T.unsafe(nil)); end

  def image_button(src=T.unsafe(nil), name=T.unsafe(nil), alt=T.unsafe(nil)); end

  def img(src=T.unsafe(nil), alt=T.unsafe(nil), width=T.unsafe(nil), height=T.unsafe(nil)); end

  def multipart_form(action=T.unsafe(nil), enctype=T.unsafe(nil)); end

  def password_field(name=T.unsafe(nil), value=T.unsafe(nil), size=T.unsafe(nil), maxlength=T.unsafe(nil)); end

  def popup_menu(name=T.unsafe(nil), *values); end

  def radio_button(name=T.unsafe(nil), value=T.unsafe(nil), checked=T.unsafe(nil)); end

  def radio_group(name=T.unsafe(nil), *values); end

  def reset(value=T.unsafe(nil), name=T.unsafe(nil)); end

  def scrolling_list(name=T.unsafe(nil), *values); end

  def submit(value=T.unsafe(nil), name=T.unsafe(nil)); end

  def text_field(name=T.unsafe(nil), value=T.unsafe(nil), size=T.unsafe(nil), maxlength=T.unsafe(nil)); end

  def textarea(name=T.unsafe(nil), cols=T.unsafe(nil), rows=T.unsafe(nil)); end
end

module CGI::HtmlExtension
end

CH = ClassyHash

class CSV
  def close(*args, &block); end

  def close_read(*args, &block); end

  def close_write(*args, &block); end

  def closed?(*args, &block); end

  def external_encoding(*args, &block); end

  def fcntl(*args, &block); end

  def fileno(*args, &block); end

  def flush(*args, &block); end

  def fsync(*args, &block); end

  def internal_encoding(*args, &block); end

  def isatty(*args, &block); end

  def pid(*args, &block); end

  def pos(*args, &block); end

  def pos=(*args, &block); end

  def reopen(*args, &block); end

  def seek(*args, &block); end

  def string(*args, &block); end

  def sync(*args, &block); end

  def sync=(*args, &block); end

  def tell(*args, &block); end

  def truncate(*args, &block); end

  def tty?(*args, &block); end
  ConverterEncoding = ::T.let(nil, ::T.untyped)
  Converters = ::T.let(nil, ::T.untyped)
  DateMatcher = ::T.let(nil, ::T.untyped)
  DateTimeMatcher = ::T.let(nil, ::T.untyped)
  HeaderConverters = ::T.let(nil, ::T.untyped)
end

class CSV::FieldInfo
  def header(); end

  def header=(_); end

  def index(); end

  def index=(_); end

  def line(); end

  def line=(_); end
end

class CSV::FieldInfo
  def self.[](*arg); end

  def self.members(); end
end

class CSV::FieldsConverter
  include ::Enumerable
  def add_converter(name=T.unsafe(nil), &converter); end

  def convert(fields, headers, lineno); end

  def each(&block); end

  def empty?(); end

  def initialize(options=T.unsafe(nil)); end
end

class CSV::FieldsConverter
end

class CSV::MalformedCSVError
  def initialize(message, line_number); end

  def line_number(); end

  def lineno(); end
end

class CSV::Parser
  def column_separator(); end

  def field_size_limit(); end

  def header_row?(); end

  def headers(); end

  def initialize(input, options); end

  def liberal_parsing?(); end

  def line(); end

  def lineno(); end

  def parse(&block); end

  def quote_character(); end

  def return_headers?(); end

  def row_separator(); end

  def skip_blanks?(); end

  def skip_lines(); end

  def unconverted_fields?(); end

  def use_headers?(); end
  SCANNER_TEST = ::T.let(nil, ::T.untyped)
end

class CSV::Parser::InputsScanner
  def each_line(row_separator); end

  def eos?(); end

  def initialize(inputs, encoding, chunk_size: T.unsafe(nil)); end

  def keep_back(); end

  def keep_drop(); end

  def keep_end(); end

  def keep_start(); end

  def rest(); end

  def scan(pattern); end

  def scan_all(pattern); end
end

class CSV::Parser::InputsScanner
end

class CSV::Parser::InvalidEncoding
end

class CSV::Parser::InvalidEncoding
end

class CSV::Parser::Scanner
  def each_line(row_separator); end

  def initialize(*args); end

  def keep_back(); end

  def keep_drop(); end

  def keep_end(); end

  def keep_start(); end

  def scan_all(arg); end
end

class CSV::Parser::Scanner
end

class CSV::Parser
end

class CSV::Row
  def dig(index_or_header, *indexes); end

  def each_pair(&block); end

  def empty?(*args, &block); end

  def length(*args, &block); end

  def size(*args, &block); end

  def to_ary(*arg); end
end

class CSV::Row
  extend ::Forwardable
end

class CSV::Table
  def empty?(*args, &block); end

  def initialize(array_of_rows, headers: T.unsafe(nil)); end

  def length(*args, &block); end

  def size(*args, &block); end

  def table(); end
end

class CSV::Table
  extend ::Forwardable
end

class CSV::Writer
  def <<(row); end

  def headers(); end

  def initialize(output, options); end

  def lineno(); end

  def rewind(); end
end

class CSV::Writer
end

class CSV
  extend ::Forwardable
end

module Cairo
  ANTIALIAS_BEST = ::T.let(nil, ::T.untyped)
  ANTIALIAS_DEFAULT = ::T.let(nil, ::T.untyped)
  ANTIALIAS_FAST = ::T.let(nil, ::T.untyped)
  ANTIALIAS_GOOD = ::T.let(nil, ::T.untyped)
  ANTIALIAS_GRAY = ::T.let(nil, ::T.untyped)
  ANTIALIAS_NONE = ::T.let(nil, ::T.untyped)
  ANTIALIAS_SUBPIXEL = ::T.let(nil, ::T.untyped)
  BINDINGS_VERSION = ::T.let(nil, ::T.untyped)
  BUILD_VERSION = ::T.let(nil, ::T.untyped)
  CONTENT_ALPHA = ::T.let(nil, ::T.untyped)
  CONTENT_COLOR = ::T.let(nil, ::T.untyped)
  CONTENT_COLOR_ALPHA = ::T.let(nil, ::T.untyped)
  EXTEND_NONE = ::T.let(nil, ::T.untyped)
  EXTEND_PAD = ::T.let(nil, ::T.untyped)
  EXTEND_REFLECT = ::T.let(nil, ::T.untyped)
  EXTEND_REPEAT = ::T.let(nil, ::T.untyped)
  FILL_RULE_EVEN_ODD = ::T.let(nil, ::T.untyped)
  FILL_RULE_WINDING = ::T.let(nil, ::T.untyped)
  FILTER_BEST = ::T.let(nil, ::T.untyped)
  FILTER_BILINEAR = ::T.let(nil, ::T.untyped)
  FILTER_FAST = ::T.let(nil, ::T.untyped)
  FILTER_GAUSSIAN = ::T.let(nil, ::T.untyped)
  FILTER_GOOD = ::T.let(nil, ::T.untyped)
  FILTER_NEAREST = ::T.let(nil, ::T.untyped)
  FONT_SLANT_ITALIC = ::T.let(nil, ::T.untyped)
  FONT_SLANT_NORMAL = ::T.let(nil, ::T.untyped)
  FONT_SLANT_OBLIQUE = ::T.let(nil, ::T.untyped)
  FONT_WEIGHT_BOLD = ::T.let(nil, ::T.untyped)
  FONT_WEIGHT_NORMAL = ::T.let(nil, ::T.untyped)
  FORMAT_A1 = ::T.let(nil, ::T.untyped)
  FORMAT_A8 = ::T.let(nil, ::T.untyped)
  FORMAT_ARGB32 = ::T.let(nil, ::T.untyped)
  FORMAT_INVALID = ::T.let(nil, ::T.untyped)
  FORMAT_RGB16_565 = ::T.let(nil, ::T.untyped)
  FORMAT_RGB24 = ::T.let(nil, ::T.untyped)
  FORMAT_RGB30 = ::T.let(nil, ::T.untyped)
  HINT_METRICS_DEFAULT = ::T.let(nil, ::T.untyped)
  HINT_METRICS_OFF = ::T.let(nil, ::T.untyped)
  HINT_METRICS_ON = ::T.let(nil, ::T.untyped)
  HINT_STYLE_DEFAULT = ::T.let(nil, ::T.untyped)
  HINT_STYLE_FULL = ::T.let(nil, ::T.untyped)
  HINT_STYLE_MEDIUM = ::T.let(nil, ::T.untyped)
  HINT_STYLE_NONE = ::T.let(nil, ::T.untyped)
  HINT_STYLE_SLIGHT = ::T.let(nil, ::T.untyped)
  LINE_CAP_BUTT = ::T.let(nil, ::T.untyped)
  LINE_CAP_ROUND = ::T.let(nil, ::T.untyped)
  LINE_CAP_SQUARE = ::T.let(nil, ::T.untyped)
  LINE_JOIN_BEVEL = ::T.let(nil, ::T.untyped)
  LINE_JOIN_MITER = ::T.let(nil, ::T.untyped)
  LINE_JOIN_ROUND = ::T.let(nil, ::T.untyped)
  MAJOR_VERSION = ::T.let(nil, ::T.untyped)
  MICRO_VERSION = ::T.let(nil, ::T.untyped)
  MINOR_VERSION = ::T.let(nil, ::T.untyped)
  OPERATOR_ADD = ::T.let(nil, ::T.untyped)
  OPERATOR_ATOP = ::T.let(nil, ::T.untyped)
  OPERATOR_CLEAR = ::T.let(nil, ::T.untyped)
  OPERATOR_COLOR_BURN = ::T.let(nil, ::T.untyped)
  OPERATOR_COLOR_DODGE = ::T.let(nil, ::T.untyped)
  OPERATOR_DARKEN = ::T.let(nil, ::T.untyped)
  OPERATOR_DEST = ::T.let(nil, ::T.untyped)
  OPERATOR_DEST_ATOP = ::T.let(nil, ::T.untyped)
  OPERATOR_DEST_IN = ::T.let(nil, ::T.untyped)
  OPERATOR_DEST_OUT = ::T.let(nil, ::T.untyped)
  OPERATOR_DEST_OVER = ::T.let(nil, ::T.untyped)
  OPERATOR_DIFFERENCE = ::T.let(nil, ::T.untyped)
  OPERATOR_EXCLUSION = ::T.let(nil, ::T.untyped)
  OPERATOR_HARD_LIGHT = ::T.let(nil, ::T.untyped)
  OPERATOR_HSL_COLOR = ::T.let(nil, ::T.untyped)
  OPERATOR_HSL_HUE = ::T.let(nil, ::T.untyped)
  OPERATOR_HSL_LUMINOSITY = ::T.let(nil, ::T.untyped)
  OPERATOR_HSL_SATURATION = ::T.let(nil, ::T.untyped)
  OPERATOR_IN = ::T.let(nil, ::T.untyped)
  OPERATOR_LIGHTEN = ::T.let(nil, ::T.untyped)
  OPERATOR_MULTIPLY = ::T.let(nil, ::T.untyped)
  OPERATOR_OUT = ::T.let(nil, ::T.untyped)
  OPERATOR_OVER = ::T.let(nil, ::T.untyped)
  OPERATOR_OVERLAY = ::T.let(nil, ::T.untyped)
  OPERATOR_SATURATE = ::T.let(nil, ::T.untyped)
  OPERATOR_SCREEN = ::T.let(nil, ::T.untyped)
  OPERATOR_SOFT_LIGHT = ::T.let(nil, ::T.untyped)
  OPERATOR_SOURCE = ::T.let(nil, ::T.untyped)
  OPERATOR_XOR = ::T.let(nil, ::T.untyped)
  PATH_CLOSE_PATH = ::T.let(nil, ::T.untyped)
  PATH_CURVE_TO = ::T.let(nil, ::T.untyped)
  PATH_LINE_TO = ::T.let(nil, ::T.untyped)
  PATH_MOVE_TO = ::T.let(nil, ::T.untyped)
  SUBPIXEL_ORDER_BGR = ::T.let(nil, ::T.untyped)
  SUBPIXEL_ORDER_DEFAULT = ::T.let(nil, ::T.untyped)
  SUBPIXEL_ORDER_RGB = ::T.let(nil, ::T.untyped)
  SUBPIXEL_ORDER_VBGR = ::T.let(nil, ::T.untyped)
  SUBPIXEL_ORDER_VRGB = ::T.let(nil, ::T.untyped)
  SVG_VERSION_1_1 = ::T.let(nil, ::T.untyped)
  SVG_VERSION_1_2 = ::T.let(nil, ::T.untyped)
  TEXT_CLUSTER_FLAG_BACKWARD = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Cairo::Antialias
  BEST = ::T.let(nil, ::T.untyped)
  DEFAULT = ::T.let(nil, ::T.untyped)
  FAST = ::T.let(nil, ::T.untyped)
  GOOD = ::T.let(nil, ::T.untyped)
  GRAY = ::T.let(nil, ::T.untyped)
  NONE = ::T.let(nil, ::T.untyped)
  SUBPIXEL = ::T.let(nil, ::T.untyped)
end

module Cairo::Antialias
end

class Cairo::ClipNotRepresentableError
end

class Cairo::ClipNotRepresentableError
end

class Cairo::CoglDevice
end

class Cairo::CoglDevice
end

class Cairo::CoglSurface
end

class Cairo::CoglSurface
end

module Cairo::Color
  ABSOLUTE_ZERO = ::T.let(nil, ::T.untyped)
  ACID_GREEN = ::T.let(nil, ::T.untyped)
  AERO = ::T.let(nil, ::T.untyped)
  AERO_BLUE = ::T.let(nil, ::T.untyped)
  AFRICAN_VIOLET = ::T.let(nil, ::T.untyped)
  ALABAMA_CRIMSON = ::T.let(nil, ::T.untyped)
  ALABASTER = ::T.let(nil, ::T.untyped)
  ALICE_BLUE = ::T.let(nil, ::T.untyped)
  ALIEN_ARMPIT = ::T.let(nil, ::T.untyped)
  ALLOY_ORANGE = ::T.let(nil, ::T.untyped)
  ALMOND = ::T.let(nil, ::T.untyped)
  AMARANTH = ::T.let(nil, ::T.untyped)
  AMARANTH_DEEP_PURPLE = ::T.let(nil, ::T.untyped)
  AMARANTH_PINK = ::T.let(nil, ::T.untyped)
  AMARANTH_PURPLE = ::T.let(nil, ::T.untyped)
  AMARANTH_RED = ::T.let(nil, ::T.untyped)
  AMAZON = ::T.let(nil, ::T.untyped)
  AMBER = ::T.let(nil, ::T.untyped)
  AMBER_SAE_ECE = ::T.let(nil, ::T.untyped)
  AMETHYST = ::T.let(nil, ::T.untyped)
  ANDROID_GREEN = ::T.let(nil, ::T.untyped)
  ANTIQUE_BRASS = ::T.let(nil, ::T.untyped)
  ANTIQUE_BRONZE = ::T.let(nil, ::T.untyped)
  ANTIQUE_FUCHSIA = ::T.let(nil, ::T.untyped)
  ANTIQUE_RUBY = ::T.let(nil, ::T.untyped)
  ANTIQUE_WHITE = ::T.let(nil, ::T.untyped)
  ANTI_FLASH_WHITE = ::T.let(nil, ::T.untyped)
  AO_ENGLISH = ::T.let(nil, ::T.untyped)
  APPLE = ::T.let(nil, ::T.untyped)
  APPLE_GREEN = ::T.let(nil, ::T.untyped)
  APRICOT = ::T.let(nil, ::T.untyped)
  AQUA = ::T.let(nil, ::T.untyped)
  AQUAMARINE = ::T.let(nil, ::T.untyped)
  ARCTIC_LIME = ::T.let(nil, ::T.untyped)
  ARMY_GREEN = ::T.let(nil, ::T.untyped)
  ARTICHOKE = ::T.let(nil, ::T.untyped)
  ARYLIDE_YELLOW = ::T.let(nil, ::T.untyped)
  ASH_GREY = ::T.let(nil, ::T.untyped)
  ASPARAGUS = ::T.let(nil, ::T.untyped)
  ATOMIC_TANGERINE = ::T.let(nil, ::T.untyped)
  AUBURN = ::T.let(nil, ::T.untyped)
  AUREOLIN = ::T.let(nil, ::T.untyped)
  AUROMETALSAURUS = ::T.let(nil, ::T.untyped)
  AVOCADO = ::T.let(nil, ::T.untyped)
  AXOLOTL = ::T.let(nil, ::T.untyped)
  AZURE = ::T.let(nil, ::T.untyped)
  AZURE_MIST = ::T.let(nil, ::T.untyped)
  BABY_BLUE = ::T.let(nil, ::T.untyped)
  BABY_BLUE_EYES = ::T.let(nil, ::T.untyped)
  BABY_PINK = ::T.let(nil, ::T.untyped)
  BABY_POWDER = ::T.let(nil, ::T.untyped)
  BAKER_MILLER_PINK = ::T.let(nil, ::T.untyped)
  BALL_BLUE = ::T.let(nil, ::T.untyped)
  BANANA_MANIA = ::T.let(nil, ::T.untyped)
  BANANA_YELLOW = ::T.let(nil, ::T.untyped)
  BANGLADESH_GREEN = ::T.let(nil, ::T.untyped)
  BARBIE_PINK = ::T.let(nil, ::T.untyped)
  BARN_RED = ::T.let(nil, ::T.untyped)
  BATTERY_CHARGED_BLUE = ::T.let(nil, ::T.untyped)
  BATTLESHIP_GREY = ::T.let(nil, ::T.untyped)
  BAYSIDE = ::T.let(nil, ::T.untyped)
  BAZAAR = ::T.let(nil, ::T.untyped)
  BDAZZLED_BLUE = ::T.let(nil, ::T.untyped)
  BEAU_BLUE = ::T.let(nil, ::T.untyped)
  BEAVER = ::T.let(nil, ::T.untyped)
  BEER = ::T.let(nil, ::T.untyped)
  BEGONIA = ::T.let(nil, ::T.untyped)
  BEIGE = ::T.let(nil, ::T.untyped)
  BIG_DIP_ORUBY = ::T.let(nil, ::T.untyped)
  BIG_FOOT_FEET = ::T.let(nil, ::T.untyped)
  BISQUE = ::T.let(nil, ::T.untyped)
  BISTRE = ::T.let(nil, ::T.untyped)
  BISTRE_BROWN = ::T.let(nil, ::T.untyped)
  BITTERSWEET = ::T.let(nil, ::T.untyped)
  BITTERSWEET_SHIMMER = ::T.let(nil, ::T.untyped)
  BITTER_LEMON = ::T.let(nil, ::T.untyped)
  BITTER_LIME = ::T.let(nil, ::T.untyped)
  BLACK = ::T.let(nil, ::T.untyped)
  BLACKBERRY = ::T.let(nil, ::T.untyped)
  BLACK_BEAN = ::T.let(nil, ::T.untyped)
  BLACK_CHOCOLATE = ::T.let(nil, ::T.untyped)
  BLACK_COFFEE = ::T.let(nil, ::T.untyped)
  BLACK_CORAL = ::T.let(nil, ::T.untyped)
  BLACK_LEATHER_JACKET = ::T.let(nil, ::T.untyped)
  BLACK_OLIVE = ::T.let(nil, ::T.untyped)
  BLACK_SHADOWS = ::T.let(nil, ::T.untyped)
  BLANCHED_ALMOND = ::T.let(nil, ::T.untyped)
  BLAST_OFF_BRONZE = ::T.let(nil, ::T.untyped)
  BLEU_DE_FRANCE = ::T.let(nil, ::T.untyped)
  BLIZZARD_BLUE = ::T.let(nil, ::T.untyped)
  BLOND = ::T.let(nil, ::T.untyped)
  BLOOD = ::T.let(nil, ::T.untyped)
  BLOOD_ANIMAL = ::T.let(nil, ::T.untyped)
  BLOOD_ORANGE = ::T.let(nil, ::T.untyped)
  BLOOD_ORGAN = ::T.let(nil, ::T.untyped)
  BLOOD_RED = ::T.let(nil, ::T.untyped)
  BLUE = ::T.let(nil, ::T.untyped)
  BLUEBERRY = ::T.let(nil, ::T.untyped)
  BLUEBONNET = ::T.let(nil, ::T.untyped)
  BLUE_BELL = ::T.let(nil, ::T.untyped)
  BLUE_BOLT = ::T.let(nil, ::T.untyped)
  BLUE_COLA = ::T.let(nil, ::T.untyped)
  BLUE_CRAYOLA = ::T.let(nil, ::T.untyped)
  BLUE_GRAY = ::T.let(nil, ::T.untyped)
  BLUE_GREEN = ::T.let(nil, ::T.untyped)
  BLUE_GREEN_COLOR_WHEEL = ::T.let(nil, ::T.untyped)
  BLUE_JEANS = ::T.let(nil, ::T.untyped)
  BLUE_LAGOON = ::T.let(nil, ::T.untyped)
  BLUE_MAGENTA_VIOLET = ::T.let(nil, ::T.untyped)
  BLUE_MUNSELL = ::T.let(nil, ::T.untyped)
  BLUE_NCS = ::T.let(nil, ::T.untyped)
  BLUE_PANTONE = ::T.let(nil, ::T.untyped)
  BLUE_PIGMENT = ::T.let(nil, ::T.untyped)
  BLUE_RASPBERRY = ::T.let(nil, ::T.untyped)
  BLUE_RYB = ::T.let(nil, ::T.untyped)
  BLUE_SAPPHIRE = ::T.let(nil, ::T.untyped)
  BLUE_VIOLET = ::T.let(nil, ::T.untyped)
  BLUE_VIOLET_COLOR_WHEEL = ::T.let(nil, ::T.untyped)
  BLUE_VIOLET_CRAYOLA = ::T.let(nil, ::T.untyped)
  BLUE_YONDER = ::T.let(nil, ::T.untyped)
  BLUSH = ::T.let(nil, ::T.untyped)
  BOLE = ::T.let(nil, ::T.untyped)
  BONDI_BLUE = ::T.let(nil, ::T.untyped)
  BONE = ::T.let(nil, ::T.untyped)
  BOOGER_BUSTER = ::T.let(nil, ::T.untyped)
  BOSTON_UNIVERSITY_RED = ::T.let(nil, ::T.untyped)
  BOTTLE_GREEN = ::T.let(nil, ::T.untyped)
  BOYSENBERRY = ::T.let(nil, ::T.untyped)
  BRANDEIS_BLUE = ::T.let(nil, ::T.untyped)
  BRANDY = ::T.let(nil, ::T.untyped)
  BRAVE_ORANGE = ::T.let(nil, ::T.untyped)
  BRICK_RED = ::T.let(nil, ::T.untyped)
  BRIGHT_CERULEAN = ::T.let(nil, ::T.untyped)
  BRIGHT_GRAY = ::T.let(nil, ::T.untyped)
  BRIGHT_GREEN = ::T.let(nil, ::T.untyped)
  BRIGHT_LAVENDER = ::T.let(nil, ::T.untyped)
  BRIGHT_LILAC = ::T.let(nil, ::T.untyped)
  BRIGHT_MAROON = ::T.let(nil, ::T.untyped)
  BRIGHT_NAVY_BLUE = ::T.let(nil, ::T.untyped)
  BRIGHT_PINK = ::T.let(nil, ::T.untyped)
  BRIGHT_TURQUOISE = ::T.let(nil, ::T.untyped)
  BRIGHT_UBE = ::T.let(nil, ::T.untyped)
  BRIGHT_YELLOW_CRAYOLA = ::T.let(nil, ::T.untyped)
  BRILLIANT_AZURE = ::T.let(nil, ::T.untyped)
  BRILLIANT_LAVENDER = ::T.let(nil, ::T.untyped)
  BRILLIANT_ROSE = ::T.let(nil, ::T.untyped)
  BRINK_PINK = ::T.let(nil, ::T.untyped)
  BRIQUETTE = ::T.let(nil, ::T.untyped)
  BRITISH_RACING_GREEN = ::T.let(nil, ::T.untyped)
  BRONZE = ::T.let(nil, ::T.untyped)
  BRONZE_METALLIC = ::T.let(nil, ::T.untyped)
  BRONZE_YELLOW = ::T.let(nil, ::T.untyped)
  BROWN = ::T.let(nil, ::T.untyped)
  BROWN_CRAYOLA = ::T.let(nil, ::T.untyped)
  BROWN_NOSE = ::T.let(nil, ::T.untyped)
  BROWN_SUGAR = ::T.let(nil, ::T.untyped)
  BROWN_TRADITIONAL = ::T.let(nil, ::T.untyped)
  BROWN_WEB = ::T.let(nil, ::T.untyped)
  BRUNSWICK_GREEN = ::T.let(nil, ::T.untyped)
  BUBBLES = ::T.let(nil, ::T.untyped)
  BUBBLE_GUM = ::T.let(nil, ::T.untyped)
  BUD_GREEN = ::T.let(nil, ::T.untyped)
  BUFF = ::T.let(nil, ::T.untyped)
  BULGARIAN_ROSE = ::T.let(nil, ::T.untyped)
  BURGUNDY = ::T.let(nil, ::T.untyped)
  BURLYWOOD = ::T.let(nil, ::T.untyped)
  BURNISHED_BROWN = ::T.let(nil, ::T.untyped)
  BURNT_ORANGE = ::T.let(nil, ::T.untyped)
  BURNT_SIENNA = ::T.let(nil, ::T.untyped)
  BURNT_UMBER = ::T.let(nil, ::T.untyped)
  BUTTON_BLUE = ::T.let(nil, ::T.untyped)
  BYZANTINE = ::T.let(nil, ::T.untyped)
  BYZANTIUM = ::T.let(nil, ::T.untyped)
  CADET = ::T.let(nil, ::T.untyped)
  CADET_BLUE = ::T.let(nil, ::T.untyped)
  CADET_BLUE_CRAYOLA = ::T.let(nil, ::T.untyped)
  CADET_GREY = ::T.let(nil, ::T.untyped)
  CADMIUM_BLUE = ::T.let(nil, ::T.untyped)
  CADMIUM_GREEN = ::T.let(nil, ::T.untyped)
  CADMIUM_ORANGE = ::T.let(nil, ::T.untyped)
  CADMIUM_PURPLE = ::T.let(nil, ::T.untyped)
  CADMIUM_RED = ::T.let(nil, ::T.untyped)
  CADMIUM_VIOLET = ::T.let(nil, ::T.untyped)
  CADMIUM_YELLOW = ::T.let(nil, ::T.untyped)
  CAFE_AU_LAIT = ::T.let(nil, ::T.untyped)
  CAFE_NOIR = ::T.let(nil, ::T.untyped)
  CALAMANSI = ::T.let(nil, ::T.untyped)
  CAL_POLY_POMONA_GREEN = ::T.let(nil, ::T.untyped)
  CAMBRIDGE_BLUE = ::T.let(nil, ::T.untyped)
  CAMEL = ::T.let(nil, ::T.untyped)
  CAMEO_PINK = ::T.let(nil, ::T.untyped)
  CAMOUFLAGE_GREEN = ::T.let(nil, ::T.untyped)
  CANARY = ::T.let(nil, ::T.untyped)
  CANARY_YELLOW = ::T.let(nil, ::T.untyped)
  CANDY_APPLE_RED = ::T.let(nil, ::T.untyped)
  CANDY_PINK = ::T.let(nil, ::T.untyped)
  CAPRI = ::T.let(nil, ::T.untyped)
  CAPUT_MORTUUM = ::T.let(nil, ::T.untyped)
  CARAMEL = ::T.let(nil, ::T.untyped)
  CARDINAL = ::T.let(nil, ::T.untyped)
  CARIBBEAN_GREEN = ::T.let(nil, ::T.untyped)
  CARMINE = ::T.let(nil, ::T.untyped)
  CARMINE_PINK = ::T.let(nil, ::T.untyped)
  CARMINE_RED = ::T.let(nil, ::T.untyped)
  CARNATION_PINK = ::T.let(nil, ::T.untyped)
  CARNELIAN = ::T.let(nil, ::T.untyped)
  CAROLINA_BLUE = ::T.let(nil, ::T.untyped)
  CARROT_ORANGE = ::T.let(nil, ::T.untyped)
  CASTLETON_GREEN = ::T.let(nil, ::T.untyped)
  CATALINA_BLUE = ::T.let(nil, ::T.untyped)
  CATAWBA = ::T.let(nil, ::T.untyped)
  CEDAR_CHEST = ::T.let(nil, ::T.untyped)
  CEIL = ::T.let(nil, ::T.untyped)
  CELADON = ::T.let(nil, ::T.untyped)
  CELADON_BLUE = ::T.let(nil, ::T.untyped)
  CELADON_GREEN = ::T.let(nil, ::T.untyped)
  CELESTE = ::T.let(nil, ::T.untyped)
  CELESTIAL_BLUE = ::T.let(nil, ::T.untyped)
  CELTIC_BLUE = ::T.let(nil, ::T.untyped)
  CERISE = ::T.let(nil, ::T.untyped)
  CERISE_PINK = ::T.let(nil, ::T.untyped)
  CERULEAN = ::T.let(nil, ::T.untyped)
  CERULEAN_BLUE = ::T.let(nil, ::T.untyped)
  CERULEAN_CRAYOLA = ::T.let(nil, ::T.untyped)
  CERULEAN_FROST = ::T.let(nil, ::T.untyped)
  CETACEAN_BLUE = ::T.let(nil, ::T.untyped)
  CG_BLUE = ::T.let(nil, ::T.untyped)
  CG_RED = ::T.let(nil, ::T.untyped)
  CHAMBRAY = ::T.let(nil, ::T.untyped)
  CHAMOISEE = ::T.let(nil, ::T.untyped)
  CHAMPAGNE = ::T.let(nil, ::T.untyped)
  CHAMPAGNE_PINK = ::T.let(nil, ::T.untyped)
  CHARCOAL = ::T.let(nil, ::T.untyped)
  CHARLESTON_GREEN = ::T.let(nil, ::T.untyped)
  CHARM = ::T.let(nil, ::T.untyped)
  CHARM_PINK = ::T.let(nil, ::T.untyped)
  CHARTREUSE_TRADITIONAL = ::T.let(nil, ::T.untyped)
  CHARTREUSE_WEB = ::T.let(nil, ::T.untyped)
  CHEESE = ::T.let(nil, ::T.untyped)
  CHERRY = ::T.let(nil, ::T.untyped)
  CHERRY_BLOSSOM_PINK = ::T.let(nil, ::T.untyped)
  CHESTNUT = ::T.let(nil, ::T.untyped)
  CHINA_PINK = ::T.let(nil, ::T.untyped)
  CHINA_ROSE = ::T.let(nil, ::T.untyped)
  CHINESE_BLACK = ::T.let(nil, ::T.untyped)
  CHINESE_BLUE = ::T.let(nil, ::T.untyped)
  CHINESE_BRONZE = ::T.let(nil, ::T.untyped)
  CHINESE_BROWN = ::T.let(nil, ::T.untyped)
  CHINESE_GOLD = ::T.let(nil, ::T.untyped)
  CHINESE_GREEN = ::T.let(nil, ::T.untyped)
  CHINESE_ORANGE = ::T.let(nil, ::T.untyped)
  CHINESE_PINK = ::T.let(nil, ::T.untyped)
  CHINESE_PURPLE = ::T.let(nil, ::T.untyped)
  CHINESE_RED = ::T.let(nil, ::T.untyped)
  CHINESE_SILVER = ::T.let(nil, ::T.untyped)
  CHINESE_VIOLET = ::T.let(nil, ::T.untyped)
  CHINESE_WHITE = ::T.let(nil, ::T.untyped)
  CHINESE_YELLOW = ::T.let(nil, ::T.untyped)
  CHLOROPHYLL_GREEN = ::T.let(nil, ::T.untyped)
  CHOCOLATE_BROWN = ::T.let(nil, ::T.untyped)
  CHOCOLATE_COSMOS = ::T.let(nil, ::T.untyped)
  CHOCOLATE_KISSES = ::T.let(nil, ::T.untyped)
  CHOCOLATE_TRADITIONAL = ::T.let(nil, ::T.untyped)
  CHOCOLATE_WEB = ::T.let(nil, ::T.untyped)
  CHRISTMAS_BLUE = ::T.let(nil, ::T.untyped)
  CHRISTMAS_BROWN = ::T.let(nil, ::T.untyped)
  CHRISTMAS_GOLD = ::T.let(nil, ::T.untyped)
  CHRISTMAS_GREEN = ::T.let(nil, ::T.untyped)
  CHRISTMAS_ORANGE = ::T.let(nil, ::T.untyped)
  CHRISTMAS_PINK = ::T.let(nil, ::T.untyped)
  CHRISTMAS_PURPLE = ::T.let(nil, ::T.untyped)
  CHRISTMAS_RED = ::T.let(nil, ::T.untyped)
  CHRISTMAS_SILVER = ::T.let(nil, ::T.untyped)
  CHRISTMAS_YELLOW = ::T.let(nil, ::T.untyped)
  CHROME_YELLOW = ::T.let(nil, ::T.untyped)
  CINEREOUS = ::T.let(nil, ::T.untyped)
  CINNABAR = ::T.let(nil, ::T.untyped)
  CINNAMON = ::T.let(nil, ::T.untyped)
  CINNAMON_SATIN = ::T.let(nil, ::T.untyped)
  CITRINE = ::T.let(nil, ::T.untyped)
  CITRINE_BROWN = ::T.let(nil, ::T.untyped)
  CITRON = ::T.let(nil, ::T.untyped)
  CLARET = ::T.let(nil, ::T.untyped)
  CLASSIC_ROSE = ::T.let(nil, ::T.untyped)
  COBALT_BLUE = ::T.let(nil, ::T.untyped)
  COCOA_BROWN = ::T.let(nil, ::T.untyped)
  COCONUT = ::T.let(nil, ::T.untyped)
  COFFEE = ::T.let(nil, ::T.untyped)
  COLA = ::T.let(nil, ::T.untyped)
  COLUMBIA_BLUE = ::T.let(nil, ::T.untyped)
  CONDITIONER = ::T.let(nil, ::T.untyped)
  CONGO_PINK = ::T.let(nil, ::T.untyped)
  COOKIES_AND_CREAM = ::T.let(nil, ::T.untyped)
  COOL_BLACK = ::T.let(nil, ::T.untyped)
  COOL_GREY = ::T.let(nil, ::T.untyped)
  COPPER = ::T.let(nil, ::T.untyped)
  COPPER_CRAYOLA = ::T.let(nil, ::T.untyped)
  COPPER_PENNY = ::T.let(nil, ::T.untyped)
  COPPER_RED = ::T.let(nil, ::T.untyped)
  COPPER_ROSE = ::T.let(nil, ::T.untyped)
  COQUELICOT = ::T.let(nil, ::T.untyped)
  CORAL = ::T.let(nil, ::T.untyped)
  CORAL_PINK = ::T.let(nil, ::T.untyped)
  CORAL_RED = ::T.let(nil, ::T.untyped)
  CORAL_REEF = ::T.let(nil, ::T.untyped)
  CORAL_REEF_VALSPAR_PAINT_COLOR = ::T.let(nil, ::T.untyped)
  CORDOVAN = ::T.let(nil, ::T.untyped)
  CORN = ::T.let(nil, ::T.untyped)
  CORNELL_RED = ::T.let(nil, ::T.untyped)
  CORNFLOWER = ::T.let(nil, ::T.untyped)
  CORNFLOWER_BLUE = ::T.let(nil, ::T.untyped)
  CORNSILK = ::T.let(nil, ::T.untyped)
  COSMIC_COBALT = ::T.let(nil, ::T.untyped)
  COSMIC_LATTE = ::T.let(nil, ::T.untyped)
  COTTON_CANDY = ::T.let(nil, ::T.untyped)
  COYOTE_BROWN = ::T.let(nil, ::T.untyped)
  CREAM = ::T.let(nil, ::T.untyped)
  CRIMSON = ::T.let(nil, ::T.untyped)
  CRIMSON_GLORY = ::T.let(nil, ::T.untyped)
  CRIMSON_RED = ::T.let(nil, ::T.untyped)
  CULTURED = ::T.let(nil, ::T.untyped)
  CYAN = ::T.let(nil, ::T.untyped)
  CYAN_AZURE = ::T.let(nil, ::T.untyped)
  CYAN_BLUE_AZURE = ::T.let(nil, ::T.untyped)
  CYAN_COBALT_BLUE = ::T.let(nil, ::T.untyped)
  CYAN_CORNFLOWER_BLUE = ::T.let(nil, ::T.untyped)
  CYAN_PROCESS = ::T.let(nil, ::T.untyped)
  CYBER_GRAPE = ::T.let(nil, ::T.untyped)
  CYBER_YELLOW = ::T.let(nil, ::T.untyped)
  CYCLAMEN = ::T.let(nil, ::T.untyped)
  DAFFODIL = ::T.let(nil, ::T.untyped)
  DANDELION = ::T.let(nil, ::T.untyped)
  DANDELION_CRAYOLA = ::T.let(nil, ::T.untyped)
  DARK_BLUE = ::T.let(nil, ::T.untyped)
  DARK_BLUE_GRAY = ::T.let(nil, ::T.untyped)
  DARK_BRONZE = ::T.let(nil, ::T.untyped)
  DARK_BRONZE_COIN = ::T.let(nil, ::T.untyped)
  DARK_BROWN = ::T.let(nil, ::T.untyped)
  DARK_BROWN_TANGELO = ::T.let(nil, ::T.untyped)
  DARK_BYZANTIUM = ::T.let(nil, ::T.untyped)
  DARK_CANDY_APPLE_RED = ::T.let(nil, ::T.untyped)
  DARK_CERULEAN = ::T.let(nil, ::T.untyped)
  DARK_CHARCOAL = ::T.let(nil, ::T.untyped)
  DARK_CHESTNUT = ::T.let(nil, ::T.untyped)
  DARK_CHOCOLATE = ::T.let(nil, ::T.untyped)
  DARK_CHOCOLATE_HERSHEYS = ::T.let(nil, ::T.untyped)
  DARK_CORAL = ::T.let(nil, ::T.untyped)
  DARK_CORNFLOWER_BLUE = ::T.let(nil, ::T.untyped)
  DARK_CYAN = ::T.let(nil, ::T.untyped)
  DARK_ELECTRIC_BLUE = ::T.let(nil, ::T.untyped)
  DARK_GOLD = ::T.let(nil, ::T.untyped)
  DARK_GOLDENROD = ::T.let(nil, ::T.untyped)
  DARK_GRAY_X11 = ::T.let(nil, ::T.untyped)
  DARK_GREEN = ::T.let(nil, ::T.untyped)
  DARK_GREEN_X11 = ::T.let(nil, ::T.untyped)
  DARK_GUNMETAL = ::T.let(nil, ::T.untyped)
  DARK_IMPERIAL_BLUE = ::T.let(nil, ::T.untyped)
  DARK_JUNGLE_GREEN = ::T.let(nil, ::T.untyped)
  DARK_KHAKI = ::T.let(nil, ::T.untyped)
  DARK_LAVA = ::T.let(nil, ::T.untyped)
  DARK_LAVENDER = ::T.let(nil, ::T.untyped)
  DARK_LEMON_LIME = ::T.let(nil, ::T.untyped)
  DARK_LIVER = ::T.let(nil, ::T.untyped)
  DARK_LIVER_HORSES = ::T.let(nil, ::T.untyped)
  DARK_MAGENTA = ::T.let(nil, ::T.untyped)
  DARK_MEDIUM_GRAY = ::T.let(nil, ::T.untyped)
  DARK_MIDNIGHT_BLUE = ::T.let(nil, ::T.untyped)
  DARK_MOSS_GREEN = ::T.let(nil, ::T.untyped)
  DARK_OLIVE_GREEN = ::T.let(nil, ::T.untyped)
  DARK_ORANGE = ::T.let(nil, ::T.untyped)
  DARK_ORCHID = ::T.let(nil, ::T.untyped)
  DARK_PASTEL_BLUE = ::T.let(nil, ::T.untyped)
  DARK_PASTEL_GREEN = ::T.let(nil, ::T.untyped)
  DARK_PASTEL_PURPLE = ::T.let(nil, ::T.untyped)
  DARK_PASTEL_RED = ::T.let(nil, ::T.untyped)
  DARK_PINK = ::T.let(nil, ::T.untyped)
  DARK_POWDER_BLUE = ::T.let(nil, ::T.untyped)
  DARK_PUCE = ::T.let(nil, ::T.untyped)
  DARK_PURPLE = ::T.let(nil, ::T.untyped)
  DARK_RASPBERRY = ::T.let(nil, ::T.untyped)
  DARK_RED = ::T.let(nil, ::T.untyped)
  DARK_SALMON = ::T.let(nil, ::T.untyped)
  DARK_SCARLET = ::T.let(nil, ::T.untyped)
  DARK_SEA_GREEN = ::T.let(nil, ::T.untyped)
  DARK_SIENNA = ::T.let(nil, ::T.untyped)
  DARK_SILVER = ::T.let(nil, ::T.untyped)
  DARK_SKY_BLUE = ::T.let(nil, ::T.untyped)
  DARK_SLATE_BLUE = ::T.let(nil, ::T.untyped)
  DARK_SLATE_GRAY = ::T.let(nil, ::T.untyped)
  DARK_SPRING_GREEN = ::T.let(nil, ::T.untyped)
  DARK_TAN = ::T.let(nil, ::T.untyped)
  DARK_TANGERINE = ::T.let(nil, ::T.untyped)
  DARK_TAUPE = ::T.let(nil, ::T.untyped)
  DARK_TERRA_COTTA = ::T.let(nil, ::T.untyped)
  DARK_TURQUOISE = ::T.let(nil, ::T.untyped)
  DARK_VANILLA = ::T.let(nil, ::T.untyped)
  DARK_VIOLET = ::T.let(nil, ::T.untyped)
  DARK_YELLOW = ::T.let(nil, ::T.untyped)
  DARTMOUTH_GREEN = ::T.let(nil, ::T.untyped)
  DAVYS_GREY = ::T.let(nil, ::T.untyped)
  DEBIAN_RED = ::T.let(nil, ::T.untyped)
  DEEP_AMETHYST = ::T.let(nil, ::T.untyped)
  DEEP_AQUAMARINE = ::T.let(nil, ::T.untyped)
  DEEP_CARMINE = ::T.let(nil, ::T.untyped)
  DEEP_CARMINE_PINK = ::T.let(nil, ::T.untyped)
  DEEP_CARROT_ORANGE = ::T.let(nil, ::T.untyped)
  DEEP_CERISE = ::T.let(nil, ::T.untyped)
  DEEP_CHAMPAGNE = ::T.let(nil, ::T.untyped)
  DEEP_CHESTNUT = ::T.let(nil, ::T.untyped)
  DEEP_COFFEE = ::T.let(nil, ::T.untyped)
  DEEP_FUCHSIA = ::T.let(nil, ::T.untyped)
  DEEP_GREEN = ::T.let(nil, ::T.untyped)
  DEEP_GREEN_CYAN_TURQUOISE = ::T.let(nil, ::T.untyped)
  DEEP_JUNGLE_GREEN = ::T.let(nil, ::T.untyped)
  DEEP_KOAMARU = ::T.let(nil, ::T.untyped)
  DEEP_LEMON = ::T.let(nil, ::T.untyped)
  DEEP_LILAC = ::T.let(nil, ::T.untyped)
  DEEP_MAGENTA = ::T.let(nil, ::T.untyped)
  DEEP_MAROON = ::T.let(nil, ::T.untyped)
  DEEP_MAUVE = ::T.let(nil, ::T.untyped)
  DEEP_MOSS_GREEN = ::T.let(nil, ::T.untyped)
  DEEP_PEACH = ::T.let(nil, ::T.untyped)
  DEEP_PINK = ::T.let(nil, ::T.untyped)
  DEEP_PUCE = ::T.let(nil, ::T.untyped)
  DEEP_RED = ::T.let(nil, ::T.untyped)
  DEEP_RUBY = ::T.let(nil, ::T.untyped)
  DEEP_SAFFRON = ::T.let(nil, ::T.untyped)
  DEEP_SKY_BLUE = ::T.let(nil, ::T.untyped)
  DEEP_SPACE_SPARKLE = ::T.let(nil, ::T.untyped)
  DEEP_SPRING_BUD = ::T.let(nil, ::T.untyped)
  DEEP_TAUPE = ::T.let(nil, ::T.untyped)
  DEEP_TUSCAN_RED = ::T.let(nil, ::T.untyped)
  DEEP_VIOLET = ::T.let(nil, ::T.untyped)
  DEER = ::T.let(nil, ::T.untyped)
  DENIM = ::T.let(nil, ::T.untyped)
  DENIM_BLUE = ::T.let(nil, ::T.untyped)
  DESATURATED_CYAN = ::T.let(nil, ::T.untyped)
  DESERT = ::T.let(nil, ::T.untyped)
  DESERT_SAND = ::T.let(nil, ::T.untyped)
  DESIRE = ::T.let(nil, ::T.untyped)
  DIAMOND = ::T.let(nil, ::T.untyped)
  DIM_GRAY = ::T.let(nil, ::T.untyped)
  DINGY_DUNGEON = ::T.let(nil, ::T.untyped)
  DIRT = ::T.let(nil, ::T.untyped)
  DIRTY_BROWN = ::T.let(nil, ::T.untyped)
  DIRTY_WHITE = ::T.let(nil, ::T.untyped)
  DODGER_BLUE = ::T.let(nil, ::T.untyped)
  DODIE_YELLOW = ::T.let(nil, ::T.untyped)
  DOGWOOD_ROSE = ::T.let(nil, ::T.untyped)
  DOLLAR_BILL = ::T.let(nil, ::T.untyped)
  DOLPHIN_GRAY = ::T.let(nil, ::T.untyped)
  DONKEY_BROWN = ::T.let(nil, ::T.untyped)
  DRAB = ::T.let(nil, ::T.untyped)
  DUKE_BLUE = ::T.let(nil, ::T.untyped)
  DUST_STORM = ::T.let(nil, ::T.untyped)
  DUTCH_WHITE = ::T.let(nil, ::T.untyped)
  EARTHTONE = ::T.let(nil, ::T.untyped)
  EARTH_YELLOW = ::T.let(nil, ::T.untyped)
  EBONY = ::T.let(nil, ::T.untyped)
  ECRU = ::T.let(nil, ::T.untyped)
  EERIE_BLACK = ::T.let(nil, ::T.untyped)
  EGGPLANT = ::T.let(nil, ::T.untyped)
  EGGSHELL = ::T.let(nil, ::T.untyped)
  EGYPTIAN_BLUE = ::T.let(nil, ::T.untyped)
  ELECTRIC_BLUE = ::T.let(nil, ::T.untyped)
  ELECTRIC_BROWN = ::T.let(nil, ::T.untyped)
  ELECTRIC_CRIMSON = ::T.let(nil, ::T.untyped)
  ELECTRIC_CYAN = ::T.let(nil, ::T.untyped)
  ELECTRIC_GREEN = ::T.let(nil, ::T.untyped)
  ELECTRIC_INDIGO = ::T.let(nil, ::T.untyped)
  ELECTRIC_LAVENDER = ::T.let(nil, ::T.untyped)
  ELECTRIC_LIME = ::T.let(nil, ::T.untyped)
  ELECTRIC_ORANGE = ::T.let(nil, ::T.untyped)
  ELECTRIC_PINK = ::T.let(nil, ::T.untyped)
  ELECTRIC_PURPLE = ::T.let(nil, ::T.untyped)
  ELECTRIC_RED = ::T.let(nil, ::T.untyped)
  ELECTRIC_ULTRAMARINE = ::T.let(nil, ::T.untyped)
  ELECTRIC_VIOLET = ::T.let(nil, ::T.untyped)
  ELECTRIC_YELLOW = ::T.let(nil, ::T.untyped)
  EMERALD = ::T.let(nil, ::T.untyped)
  EMERALD_GREEN = ::T.let(nil, ::T.untyped)
  EMINENCE = ::T.let(nil, ::T.untyped)
  ENGLISH_GREEN = ::T.let(nil, ::T.untyped)
  ENGLISH_LAVENDER = ::T.let(nil, ::T.untyped)
  ENGLISH_RED = ::T.let(nil, ::T.untyped)
  ENGLISH_VERMILLION = ::T.let(nil, ::T.untyped)
  ENGLISH_VIOLET = ::T.let(nil, ::T.untyped)
  ETON_BLUE = ::T.let(nil, ::T.untyped)
  EUCALYPTUS = ::T.let(nil, ::T.untyped)
  FACEBOOK_BLUE = ::T.let(nil, ::T.untyped)
  FALLOW = ::T.let(nil, ::T.untyped)
  FALU_RED = ::T.let(nil, ::T.untyped)
  FANDANGO = ::T.let(nil, ::T.untyped)
  FANDANGO_PINK = ::T.let(nil, ::T.untyped)
  FASHION_FUCHSIA = ::T.let(nil, ::T.untyped)
  FAWN = ::T.let(nil, ::T.untyped)
  FELDGRAU = ::T.let(nil, ::T.untyped)
  FELDSPAR = ::T.let(nil, ::T.untyped)
  FERN_GREEN = ::T.let(nil, ::T.untyped)
  FERRARI_RED = ::T.let(nil, ::T.untyped)
  FIELD_DRAB = ::T.let(nil, ::T.untyped)
  FIERY_ROSE = ::T.let(nil, ::T.untyped)
  FIREBRICK = ::T.let(nil, ::T.untyped)
  FIRE_ENGINE_RED = ::T.let(nil, ::T.untyped)
  FIRE_OPAL = ::T.let(nil, ::T.untyped)
  FLAME = ::T.let(nil, ::T.untyped)
  FLAMINGO_PINK = ::T.let(nil, ::T.untyped)
  FLATTERY = ::T.let(nil, ::T.untyped)
  FLAVESCENT = ::T.let(nil, ::T.untyped)
  FLAX = ::T.let(nil, ::T.untyped)
  FLICKR_BLUE = ::T.let(nil, ::T.untyped)
  FLICKR_PINK = ::T.let(nil, ::T.untyped)
  FLIRT = ::T.let(nil, ::T.untyped)
  FLORAL_WHITE = ::T.let(nil, ::T.untyped)
  FLOWER_GIRL = ::T.let(nil, ::T.untyped)
  FLUORESCENT_BLUE = ::T.let(nil, ::T.untyped)
  FLUORESCENT_ORANGE = ::T.let(nil, ::T.untyped)
  FLUORESCENT_PINK = ::T.let(nil, ::T.untyped)
  FLUORESCENT_YELLOW = ::T.let(nil, ::T.untyped)
  FOLLY = ::T.let(nil, ::T.untyped)
  FOREST_GREEN_CRAYOLA = ::T.let(nil, ::T.untyped)
  FOREST_GREEN_TRADITIONAL = ::T.let(nil, ::T.untyped)
  FOREST_GREEN_WEB = ::T.let(nil, ::T.untyped)
  FRENCH_BEIGE = ::T.let(nil, ::T.untyped)
  FRENCH_BISTRE = ::T.let(nil, ::T.untyped)
  FRENCH_BLUE = ::T.let(nil, ::T.untyped)
  FRENCH_FUCHSIA = ::T.let(nil, ::T.untyped)
  FRENCH_LILAC = ::T.let(nil, ::T.untyped)
  FRENCH_LIME = ::T.let(nil, ::T.untyped)
  FRENCH_MAUVE = ::T.let(nil, ::T.untyped)
  FRENCH_MIDDLE_RED_PURPLE = ::T.let(nil, ::T.untyped)
  FRENCH_PINK = ::T.let(nil, ::T.untyped)
  FRENCH_PLUM = ::T.let(nil, ::T.untyped)
  FRENCH_PUCE = ::T.let(nil, ::T.untyped)
  FRENCH_RASPBERRY = ::T.let(nil, ::T.untyped)
  FRENCH_ROSE = ::T.let(nil, ::T.untyped)
  FRENCH_SKY_BLUE = ::T.let(nil, ::T.untyped)
  FRENCH_VIOLET = ::T.let(nil, ::T.untyped)
  FRENCH_WINE = ::T.let(nil, ::T.untyped)
  FRESH_AIR = ::T.let(nil, ::T.untyped)
  FROSTBITE = ::T.let(nil, ::T.untyped)
  FUCHSIA = ::T.let(nil, ::T.untyped)
  FUCHSIA_CRAYOLA = ::T.let(nil, ::T.untyped)
  FUCHSIA_PINK = ::T.let(nil, ::T.untyped)
  FUCHSIA_PURPLE = ::T.let(nil, ::T.untyped)
  FUCHSIA_ROSE = ::T.let(nil, ::T.untyped)
  FULVOUS = ::T.let(nil, ::T.untyped)
  FUZZY_WUZZY = ::T.let(nil, ::T.untyped)
  GAINSBORO = ::T.let(nil, ::T.untyped)
  GAMBOGE = ::T.let(nil, ::T.untyped)
  GAMBOGE_ORANGE_BROWN = ::T.let(nil, ::T.untyped)
  GARGOYLE_GAS = ::T.let(nil, ::T.untyped)
  GARNET = ::T.let(nil, ::T.untyped)
  GENERIC_VIRIDIAN = ::T.let(nil, ::T.untyped)
  GHOST_WHITE = ::T.let(nil, ::T.untyped)
  GIANTS_CLUB = ::T.let(nil, ::T.untyped)
  GIANTS_ORANGE = ::T.let(nil, ::T.untyped)
  GIN = ::T.let(nil, ::T.untyped)
  GLAUCOUS = ::T.let(nil, ::T.untyped)
  GLOSSY_GRAPE = ::T.let(nil, ::T.untyped)
  GOLD = ::T.let(nil, ::T.untyped)
  GOLDENROD = ::T.let(nil, ::T.untyped)
  GOLDEN_BROWN = ::T.let(nil, ::T.untyped)
  GOLDEN_POPPY = ::T.let(nil, ::T.untyped)
  GOLDEN_YELLOW = ::T.let(nil, ::T.untyped)
  GOLD_CRAYOLA = ::T.let(nil, ::T.untyped)
  GOLD_FOIL = ::T.let(nil, ::T.untyped)
  GOLD_FUSION = ::T.let(nil, ::T.untyped)
  GOLD_METALLIC = ::T.let(nil, ::T.untyped)
  GOLD_WEB_GOLDEN = ::T.let(nil, ::T.untyped)
  GOOGLE_CHROME_BLUE = ::T.let(nil, ::T.untyped)
  GOOGLE_CHROME_GREEN = ::T.let(nil, ::T.untyped)
  GOOGLE_CHROME_RED = ::T.let(nil, ::T.untyped)
  GOOGLE_CHROME_YELLOW = ::T.let(nil, ::T.untyped)
  GO_GREEN = ::T.let(nil, ::T.untyped)
  GRANITE_GRAY = ::T.let(nil, ::T.untyped)
  GRANNY_SMITH_APPLE = ::T.let(nil, ::T.untyped)
  GRAPE = ::T.let(nil, ::T.untyped)
  GRAY_ASPARAGUS = ::T.let(nil, ::T.untyped)
  GRAY_BLUE = ::T.let(nil, ::T.untyped)
  GRAY_HTML_CSS_GRAY = ::T.let(nil, ::T.untyped)
  GRAY_X11_GRAY = ::T.let(nil, ::T.untyped)
  GREEN = ::T.let(nil, ::T.untyped)
  GREEN_BLUE = ::T.let(nil, ::T.untyped)
  GREEN_BLUE_CRAYOLA = ::T.let(nil, ::T.untyped)
  GREEN_COLA = ::T.let(nil, ::T.untyped)
  GREEN_COLOR_WHEEL_X11_GREEN = ::T.let(nil, ::T.untyped)
  GREEN_CRAYOLA = ::T.let(nil, ::T.untyped)
  GREEN_CYAN = ::T.let(nil, ::T.untyped)
  GREEN_HTML_CSS_COLOR = ::T.let(nil, ::T.untyped)
  GREEN_LIZARD = ::T.let(nil, ::T.untyped)
  GREEN_MUNSELL = ::T.let(nil, ::T.untyped)
  GREEN_NCS = ::T.let(nil, ::T.untyped)
  GREEN_PANTONE = ::T.let(nil, ::T.untyped)
  GREEN_PIGMENT = ::T.let(nil, ::T.untyped)
  GREEN_RYB = ::T.let(nil, ::T.untyped)
  GREEN_SHEEN = ::T.let(nil, ::T.untyped)
  GREEN_SLIME = ::T.let(nil, ::T.untyped)
  GREEN_YELLOW = ::T.let(nil, ::T.untyped)
  GREEN_YELLOW_CRAYOLA = ::T.let(nil, ::T.untyped)
  GRULLO = ::T.let(nil, ::T.untyped)
  GUNMETAL = ::T.let(nil, ::T.untyped)
  GUPPIE_GREEN = ::T.let(nil, ::T.untyped)
  GUYABANO = ::T.let(nil, ::T.untyped)
  HALAYA_UBE = ::T.let(nil, ::T.untyped)
  HALLOWEEN_ORANGE = ::T.let(nil, ::T.untyped)
  HANSA_YELLOW = ::T.let(nil, ::T.untyped)
  HAN_BLUE = ::T.let(nil, ::T.untyped)
  HAN_PURPLE = ::T.let(nil, ::T.untyped)
  HARLEQUIN = ::T.let(nil, ::T.untyped)
  HARLEQUIN_GREEN = ::T.let(nil, ::T.untyped)
  HARMONIOUS_ROSE = ::T.let(nil, ::T.untyped)
  HARVARD_CRIMSON = ::T.let(nil, ::T.untyped)
  HARVEST_GOLD = ::T.let(nil, ::T.untyped)
  HEART_GOLD = ::T.let(nil, ::T.untyped)
  HEAT_WAVE = ::T.let(nil, ::T.untyped)
  HEIDELBERG_RED = ::T.let(nil, ::T.untyped)
  HELIOTROPE = ::T.let(nil, ::T.untyped)
  HELIOTROPE_GRAY = ::T.let(nil, ::T.untyped)
  HELIOTROPE_MAGENTA = ::T.let(nil, ::T.untyped)
  HEX_RE = ::T.let(nil, ::T.untyped)
  HOLLYWOOD_CERISE = ::T.let(nil, ::T.untyped)
  HONEYDEW = ::T.let(nil, ::T.untyped)
  HONOLULU_BLUE = ::T.let(nil, ::T.untyped)
  HOOKERS_GREEN = ::T.let(nil, ::T.untyped)
  HOT_MAGENTA = ::T.let(nil, ::T.untyped)
  HOT_PINK = ::T.let(nil, ::T.untyped)
  HUNTER_GREEN = ::T.let(nil, ::T.untyped)
  ICEBERG = ::T.let(nil, ::T.untyped)
  ICED_TEA = ::T.let(nil, ::T.untyped)
  ICTERINE = ::T.let(nil, ::T.untyped)
  IGUANA_GREEN = ::T.let(nil, ::T.untyped)
  ILLUMINATING_EMERALD = ::T.let(nil, ::T.untyped)
  IMPERIAL = ::T.let(nil, ::T.untyped)
  IMPERIAL_BLUE = ::T.let(nil, ::T.untyped)
  IMPERIAL_PURPLE = ::T.let(nil, ::T.untyped)
  IMPERIAL_RED = ::T.let(nil, ::T.untyped)
  INCHWORM = ::T.let(nil, ::T.untyped)
  INDEPENDENCE = ::T.let(nil, ::T.untyped)
  INDIAN_RED = ::T.let(nil, ::T.untyped)
  INDIAN_YELLOW = ::T.let(nil, ::T.untyped)
  INDIA_GREEN = ::T.let(nil, ::T.untyped)
  INDIGO = ::T.let(nil, ::T.untyped)
  INDIGO_CRAYOLA = ::T.let(nil, ::T.untyped)
  INDIGO_DYE = ::T.let(nil, ::T.untyped)
  INDIGO_RAINBOW = ::T.let(nil, ::T.untyped)
  INDIGO_WEB = ::T.let(nil, ::T.untyped)
  INFRA_RED = ::T.let(nil, ::T.untyped)
  INTERDIMENSIONAL_BLUE = ::T.let(nil, ::T.untyped)
  INTERNATIONAL_KLEIN_BLUE = ::T.let(nil, ::T.untyped)
  INTERNATIONAL_ORANGE_AEROSPACE = ::T.let(nil, ::T.untyped)
  INTERNATIONAL_ORANGE_ENGINEERING = ::T.let(nil, ::T.untyped)
  INTERNATIONAL_ORANGE_GOLDEN_GATE_BRIDGE = ::T.let(nil, ::T.untyped)
  IRIS = ::T.let(nil, ::T.untyped)
  IRON = ::T.let(nil, ::T.untyped)
  IRRESISTIBLE = ::T.let(nil, ::T.untyped)
  ISABELLINE = ::T.let(nil, ::T.untyped)
  ISLAMIC_GREEN = ::T.let(nil, ::T.untyped)
  ITALIAN_SKY_BLUE = ::T.let(nil, ::T.untyped)
  IVORY = ::T.let(nil, ::T.untyped)
  JACARTA = ::T.let(nil, ::T.untyped)
  JACKO_BEAN = ::T.let(nil, ::T.untyped)
  JADE = ::T.let(nil, ::T.untyped)
  JAPANESE_CARMINE = ::T.let(nil, ::T.untyped)
  JAPANESE_INDIGO = ::T.let(nil, ::T.untyped)
  JAPANESE_LAUREL = ::T.let(nil, ::T.untyped)
  JAPANESE_VIOLET = ::T.let(nil, ::T.untyped)
  JASMINE = ::T.let(nil, ::T.untyped)
  JASPER = ::T.let(nil, ::T.untyped)
  JASPER_ORANGE = ::T.let(nil, ::T.untyped)
  JAZZBERRY_JAM = ::T.let(nil, ::T.untyped)
  JELLY_BEAN = ::T.let(nil, ::T.untyped)
  JELLY_BEAN_BLUE = ::T.let(nil, ::T.untyped)
  JET = ::T.let(nil, ::T.untyped)
  JET_STREAM = ::T.let(nil, ::T.untyped)
  JONQUIL = ::T.let(nil, ::T.untyped)
  JORDY_BLUE = ::T.let(nil, ::T.untyped)
  JUNE_BUD = ::T.let(nil, ::T.untyped)
  JUNGLE_GREEN = ::T.let(nil, ::T.untyped)
  KELLY_GREEN = ::T.let(nil, ::T.untyped)
  KENYAN_COPPER = ::T.let(nil, ::T.untyped)
  KEPPEL = ::T.let(nil, ::T.untyped)
  KEY_LIME = ::T.let(nil, ::T.untyped)
  KHAKI = ::T.let(nil, ::T.untyped)
  KHAKI_X11 = ::T.let(nil, ::T.untyped)
  KIWI = ::T.let(nil, ::T.untyped)
  KOBE = ::T.let(nil, ::T.untyped)
  KOBI = ::T.let(nil, ::T.untyped)
  KOBICHA = ::T.let(nil, ::T.untyped)
  KOMBU_GREEN = ::T.let(nil, ::T.untyped)
  KSU_PURPLE = ::T.let(nil, ::T.untyped)
  KU_CRIMSON = ::T.let(nil, ::T.untyped)
  LANGUID_LAVENDER = ::T.let(nil, ::T.untyped)
  LANZONES = ::T.let(nil, ::T.untyped)
  LAPIS_LAZULI = ::T.let(nil, ::T.untyped)
  LASER_LEMON = ::T.let(nil, ::T.untyped)
  LAUREL_GREEN = ::T.let(nil, ::T.untyped)
  LAVA = ::T.let(nil, ::T.untyped)
  LAVENDER = ::T.let(nil, ::T.untyped)
  LAVENDER_BLUE = ::T.let(nil, ::T.untyped)
  LAVENDER_BLUSH = ::T.let(nil, ::T.untyped)
  LAVENDER_GRAY = ::T.let(nil, ::T.untyped)
  LAVENDER_INDIGO = ::T.let(nil, ::T.untyped)
  LAVENDER_MAGENTA = ::T.let(nil, ::T.untyped)
  LAVENDER_MIST = ::T.let(nil, ::T.untyped)
  LAVENDER_PINK = ::T.let(nil, ::T.untyped)
  LAVENDER_PURPLE = ::T.let(nil, ::T.untyped)
  LAVENDER_ROSE = ::T.let(nil, ::T.untyped)
  LAVENDER_WEB = ::T.let(nil, ::T.untyped)
  LAWN_GREEN = ::T.let(nil, ::T.untyped)
  LA_SALLE_GREEN = ::T.let(nil, ::T.untyped)
  LEMON = ::T.let(nil, ::T.untyped)
  LEMON_CHIFFON = ::T.let(nil, ::T.untyped)
  LEMON_CURRY = ::T.let(nil, ::T.untyped)
  LEMON_GLACIER = ::T.let(nil, ::T.untyped)
  LEMON_ICED_TEA = ::T.let(nil, ::T.untyped)
  LEMON_LIME = ::T.let(nil, ::T.untyped)
  LEMON_MERINGUE = ::T.let(nil, ::T.untyped)
  LEMON_YELLOW = ::T.let(nil, ::T.untyped)
  LEMON_YELLOW_CRAYOLA = ::T.let(nil, ::T.untyped)
  LENURPLE = ::T.let(nil, ::T.untyped)
  LIBERTY = ::T.let(nil, ::T.untyped)
  LICORICE = ::T.let(nil, ::T.untyped)
  LIGHT_APRICOT = ::T.let(nil, ::T.untyped)
  LIGHT_BLUE = ::T.let(nil, ::T.untyped)
  LIGHT_BROWN = ::T.let(nil, ::T.untyped)
  LIGHT_CARMINE_PINK = ::T.let(nil, ::T.untyped)
  LIGHT_CHOCOLATE_COSMOS = ::T.let(nil, ::T.untyped)
  LIGHT_COBALT_BLUE = ::T.let(nil, ::T.untyped)
  LIGHT_CORAL = ::T.let(nil, ::T.untyped)
  LIGHT_CORNFLOWER_BLUE = ::T.let(nil, ::T.untyped)
  LIGHT_CRIMSON = ::T.let(nil, ::T.untyped)
  LIGHT_CYAN = ::T.let(nil, ::T.untyped)
  LIGHT_DEEP_PINK = ::T.let(nil, ::T.untyped)
  LIGHT_FRENCH_BEIGE = ::T.let(nil, ::T.untyped)
  LIGHT_FUCHSIA_PINK = ::T.let(nil, ::T.untyped)
  LIGHT_GOLD = ::T.let(nil, ::T.untyped)
  LIGHT_GOLDENROD = ::T.let(nil, ::T.untyped)
  LIGHT_GOLDENROD_YELLOW = ::T.let(nil, ::T.untyped)
  LIGHT_GRAY = ::T.let(nil, ::T.untyped)
  LIGHT_GRAYISH_MAGENTA = ::T.let(nil, ::T.untyped)
  LIGHT_GREEN = ::T.let(nil, ::T.untyped)
  LIGHT_HOT_PINK = ::T.let(nil, ::T.untyped)
  LIGHT_KHAKI = ::T.let(nil, ::T.untyped)
  LIGHT_MEDIUM_ORCHID = ::T.let(nil, ::T.untyped)
  LIGHT_MOSS_GREEN = ::T.let(nil, ::T.untyped)
  LIGHT_MUSTARD = ::T.let(nil, ::T.untyped)
  LIGHT_ORANGE = ::T.let(nil, ::T.untyped)
  LIGHT_ORCHID = ::T.let(nil, ::T.untyped)
  LIGHT_PASTEL_PURPLE = ::T.let(nil, ::T.untyped)
  LIGHT_PERIWINKLE = ::T.let(nil, ::T.untyped)
  LIGHT_PINK = ::T.let(nil, ::T.untyped)
  LIGHT_RED = ::T.let(nil, ::T.untyped)
  LIGHT_RED_OCHRE = ::T.let(nil, ::T.untyped)
  LIGHT_SALMON = ::T.let(nil, ::T.untyped)
  LIGHT_SALMON_PINK = ::T.let(nil, ::T.untyped)
  LIGHT_SEA_GREEN = ::T.let(nil, ::T.untyped)
  LIGHT_SILVER = ::T.let(nil, ::T.untyped)
  LIGHT_SKY_BLUE = ::T.let(nil, ::T.untyped)
  LIGHT_SLATE_GRAY = ::T.let(nil, ::T.untyped)
  LIGHT_STEEL_BLUE = ::T.let(nil, ::T.untyped)
  LIGHT_TAUPE = ::T.let(nil, ::T.untyped)
  LIGHT_THULIAN_PINK = ::T.let(nil, ::T.untyped)
  LIGHT_TURQUOISE = ::T.let(nil, ::T.untyped)
  LIGHT_VIOLET = ::T.let(nil, ::T.untyped)
  LIGHT_YELLOW = ::T.let(nil, ::T.untyped)
  LILAC = ::T.let(nil, ::T.untyped)
  LILAC_LUSTER = ::T.let(nil, ::T.untyped)
  LIMERICK = ::T.let(nil, ::T.untyped)
  LIME_COLOR_WHEEL = ::T.let(nil, ::T.untyped)
  LIME_GREEN = ::T.let(nil, ::T.untyped)
  LIME_WEB_X11_GREEN = ::T.let(nil, ::T.untyped)
  LINCOLN_GREEN = ::T.let(nil, ::T.untyped)
  LINEN = ::T.let(nil, ::T.untyped)
  LION = ::T.let(nil, ::T.untyped)
  LISERAN_PURPLE = ::T.let(nil, ::T.untyped)
  LITTLE_BOY_BLUE = ::T.let(nil, ::T.untyped)
  LITTLE_GIRL_PINK = ::T.let(nil, ::T.untyped)
  LIVER = ::T.let(nil, ::T.untyped)
  LIVER_CHESTNUT = ::T.let(nil, ::T.untyped)
  LIVER_DOGS = ::T.let(nil, ::T.untyped)
  LIVER_ORGAN = ::T.let(nil, ::T.untyped)
  LIVID = ::T.let(nil, ::T.untyped)
  LOTION = ::T.let(nil, ::T.untyped)
  LOTION_BLUE = ::T.let(nil, ::T.untyped)
  LOTION_PINK = ::T.let(nil, ::T.untyped)
  LUMBER = ::T.let(nil, ::T.untyped)
  LUST = ::T.let(nil, ::T.untyped)
  MAASTRICHT_BLUE = ::T.let(nil, ::T.untyped)
  MACARONI_AND_CHEESE = ::T.let(nil, ::T.untyped)
  MADDER_LAKE = ::T.let(nil, ::T.untyped)
  MAGENTA = ::T.let(nil, ::T.untyped)
  MAHOGANY = ::T.let(nil, ::T.untyped)
  MAIZE = ::T.let(nil, ::T.untyped)
  MAIZE_CRAYOLA = ::T.let(nil, ::T.untyped)
  MAJORELLE_BLUE = ::T.let(nil, ::T.untyped)
  MALACHITE = ::T.let(nil, ::T.untyped)
  MANATEE = ::T.let(nil, ::T.untyped)
  MANDARIN = ::T.let(nil, ::T.untyped)
  MANGO = ::T.let(nil, ::T.untyped)
  MANGO_GREEN = ::T.let(nil, ::T.untyped)
  MANGO_TANGO = ::T.let(nil, ::T.untyped)
  MANTIS = ::T.let(nil, ::T.untyped)
  MARDI_GRAS = ::T.let(nil, ::T.untyped)
  MARIGOLD = ::T.let(nil, ::T.untyped)
  MAROON_CRAYOLA = ::T.let(nil, ::T.untyped)
  MAROON_HTML_CSS = ::T.let(nil, ::T.untyped)
  MAROON_X11 = ::T.let(nil, ::T.untyped)
  MAUVE = ::T.let(nil, ::T.untyped)
  MAUVELOUS = ::T.let(nil, ::T.untyped)
  MAUVE_TAUPE = ::T.let(nil, ::T.untyped)
  MAXIMUM_BLUE = ::T.let(nil, ::T.untyped)
  MAXIMUM_BLUE_GREEN = ::T.let(nil, ::T.untyped)
  MAXIMUM_BLUE_PURPLE = ::T.let(nil, ::T.untyped)
  MAXIMUM_GREEN = ::T.let(nil, ::T.untyped)
  MAXIMUM_GREEN_YELLOW = ::T.let(nil, ::T.untyped)
  MAXIMUM_ORANGE = ::T.let(nil, ::T.untyped)
  MAXIMUM_PINK = ::T.let(nil, ::T.untyped)
  MAXIMUM_PURPLE = ::T.let(nil, ::T.untyped)
  MAXIMUM_RED = ::T.let(nil, ::T.untyped)
  MAXIMUM_RED_PURPLE = ::T.let(nil, ::T.untyped)
  MAXIMUM_VIOLET = ::T.let(nil, ::T.untyped)
  MAXIMUM_YELLOW = ::T.let(nil, ::T.untyped)
  MAXIMUM_YELLOW_RED = ::T.let(nil, ::T.untyped)
  MAYA_BLUE = ::T.let(nil, ::T.untyped)
  MAY_GREEN = ::T.let(nil, ::T.untyped)
  MEAT_BROWN = ::T.let(nil, ::T.untyped)
  MEDIUM_AQUAMARINE = ::T.let(nil, ::T.untyped)
  MEDIUM_BLUE = ::T.let(nil, ::T.untyped)
  MEDIUM_CANDY_APPLE_RED = ::T.let(nil, ::T.untyped)
  MEDIUM_CARMINE = ::T.let(nil, ::T.untyped)
  MEDIUM_CHAMPAGNE = ::T.let(nil, ::T.untyped)
  MEDIUM_ELECTRIC_BLUE = ::T.let(nil, ::T.untyped)
  MEDIUM_GREEN = ::T.let(nil, ::T.untyped)
  MEDIUM_JUNGLE_GREEN = ::T.let(nil, ::T.untyped)
  MEDIUM_LAVENDER_MAGENTA = ::T.let(nil, ::T.untyped)
  MEDIUM_ORANGE = ::T.let(nil, ::T.untyped)
  MEDIUM_ORCHID = ::T.let(nil, ::T.untyped)
  MEDIUM_PERSIAN_BLUE = ::T.let(nil, ::T.untyped)
  MEDIUM_PINK = ::T.let(nil, ::T.untyped)
  MEDIUM_PURPLE = ::T.let(nil, ::T.untyped)
  MEDIUM_RED = ::T.let(nil, ::T.untyped)
  MEDIUM_RED_VIOLET = ::T.let(nil, ::T.untyped)
  MEDIUM_RUBY = ::T.let(nil, ::T.untyped)
  MEDIUM_SEA_GREEN = ::T.let(nil, ::T.untyped)
  MEDIUM_SKY_BLUE = ::T.let(nil, ::T.untyped)
  MEDIUM_SLATE_BLUE = ::T.let(nil, ::T.untyped)
  MEDIUM_SPRING_BUD = ::T.let(nil, ::T.untyped)
  MEDIUM_SPRING_GREEN = ::T.let(nil, ::T.untyped)
  MEDIUM_TAUPE = ::T.let(nil, ::T.untyped)
  MEDIUM_TURQUOISE = ::T.let(nil, ::T.untyped)
  MEDIUM_TUSCAN_RED = ::T.let(nil, ::T.untyped)
  MEDIUM_VERMILION = ::T.let(nil, ::T.untyped)
  MEDIUM_VIOLET = ::T.let(nil, ::T.untyped)
  MEDIUM_VIOLET_RED = ::T.let(nil, ::T.untyped)
  MEDIUM_YELLOW = ::T.let(nil, ::T.untyped)
  MELLOW_APRICOT = ::T.let(nil, ::T.untyped)
  MELLOW_YELLOW = ::T.let(nil, ::T.untyped)
  MELON = ::T.let(nil, ::T.untyped)
  MELON_CRAYOLA = ::T.let(nil, ::T.untyped)
  MENTHOL = ::T.let(nil, ::T.untyped)
  METALLIC_BLUE = ::T.let(nil, ::T.untyped)
  METALLIC_BRONZE = ::T.let(nil, ::T.untyped)
  METALLIC_BROWN = ::T.let(nil, ::T.untyped)
  METALLIC_GOLD = ::T.let(nil, ::T.untyped)
  METALLIC_GREEN = ::T.let(nil, ::T.untyped)
  METALLIC_ORANGE = ::T.let(nil, ::T.untyped)
  METALLIC_PINK = ::T.let(nil, ::T.untyped)
  METALLIC_RED = ::T.let(nil, ::T.untyped)
  METALLIC_SEAWEED = ::T.let(nil, ::T.untyped)
  METALLIC_SILVER = ::T.let(nil, ::T.untyped)
  METALLIC_SUNBURST = ::T.let(nil, ::T.untyped)
  METALLIC_VIOLET = ::T.let(nil, ::T.untyped)
  METALLIC_YELLOW = ::T.let(nil, ::T.untyped)
  MEXICAN_PINK = ::T.let(nil, ::T.untyped)
  MICROSOFT_BLUE = ::T.let(nil, ::T.untyped)
  MICROSOFT_EDGE_BLUE = ::T.let(nil, ::T.untyped)
  MICROSOFT_GREEN = ::T.let(nil, ::T.untyped)
  MICROSOFT_RED = ::T.let(nil, ::T.untyped)
  MICROSOFT_YELLOW = ::T.let(nil, ::T.untyped)
  MIDDLE_BLUE = ::T.let(nil, ::T.untyped)
  MIDDLE_BLUE_GREEN = ::T.let(nil, ::T.untyped)
  MIDDLE_BLUE_PURPLE = ::T.let(nil, ::T.untyped)
  MIDDLE_GREEN = ::T.let(nil, ::T.untyped)
  MIDDLE_GREEN_YELLOW = ::T.let(nil, ::T.untyped)
  MIDDLE_GREY = ::T.let(nil, ::T.untyped)
  MIDDLE_PURPLE = ::T.let(nil, ::T.untyped)
  MIDDLE_RED = ::T.let(nil, ::T.untyped)
  MIDDLE_RED_PURPLE = ::T.let(nil, ::T.untyped)
  MIDDLE_YELLOW = ::T.let(nil, ::T.untyped)
  MIDDLE_YELLOW_RED = ::T.let(nil, ::T.untyped)
  MIDNIGHT = ::T.let(nil, ::T.untyped)
  MIDNIGHT_BLUE = ::T.let(nil, ::T.untyped)
  MIDNIGHT_GREEN_EAGLE_GREEN = ::T.let(nil, ::T.untyped)
  MIKADO_YELLOW = ::T.let(nil, ::T.untyped)
  MILK = ::T.let(nil, ::T.untyped)
  MILK_CHOCOLATE = ::T.let(nil, ::T.untyped)
  MIMI_PINK = ::T.let(nil, ::T.untyped)
  MINDARO = ::T.let(nil, ::T.untyped)
  MING = ::T.let(nil, ::T.untyped)
  MINION_YELLOW = ::T.let(nil, ::T.untyped)
  MINT = ::T.let(nil, ::T.untyped)
  MINT_CREAM = ::T.let(nil, ::T.untyped)
  MINT_GREEN = ::T.let(nil, ::T.untyped)
  MISTY_MOSS = ::T.let(nil, ::T.untyped)
  MISTY_ROSE = ::T.let(nil, ::T.untyped)
  MOCCASIN = ::T.let(nil, ::T.untyped)
  MOCHA = ::T.let(nil, ::T.untyped)
  MODE_BEIGE = ::T.let(nil, ::T.untyped)
  MOONSTONE = ::T.let(nil, ::T.untyped)
  MOONSTONE_BLUE = ::T.let(nil, ::T.untyped)
  MORDANT_RED_19 = ::T.let(nil, ::T.untyped)
  MORNING_BLUE = ::T.let(nil, ::T.untyped)
  MOSS_GREEN = ::T.let(nil, ::T.untyped)
  MOUNTAIN_MEADOW = ::T.let(nil, ::T.untyped)
  MOUNTBATTEN_PINK = ::T.let(nil, ::T.untyped)
  MSU_GREEN = ::T.let(nil, ::T.untyped)
  MUD = ::T.let(nil, ::T.untyped)
  MUGHAL_GREEN = ::T.let(nil, ::T.untyped)
  MULBERRY = ::T.let(nil, ::T.untyped)
  MULBERRY_CRAYOLA = ::T.let(nil, ::T.untyped)
  MUMMYS_TOMB = ::T.let(nil, ::T.untyped)
  MUSTARD = ::T.let(nil, ::T.untyped)
  MUSTARD_BROWN = ::T.let(nil, ::T.untyped)
  MUSTARD_GREEN = ::T.let(nil, ::T.untyped)
  MUSTARD_YELLOW = ::T.let(nil, ::T.untyped)
  MYRTLE_GREEN = ::T.let(nil, ::T.untyped)
  MYSTIC = ::T.let(nil, ::T.untyped)
  MYSTIC_MAROON = ::T.let(nil, ::T.untyped)
  MYSTIC_RED = ::T.let(nil, ::T.untyped)
  NADESHIKO_PINK = ::T.let(nil, ::T.untyped)
  NAPIER_GREEN = ::T.let(nil, ::T.untyped)
  NAPLES_YELLOW = ::T.let(nil, ::T.untyped)
  NAVAJO_WHITE = ::T.let(nil, ::T.untyped)
  NAVY_BLUE = ::T.let(nil, ::T.untyped)
  NAVY_BLUE_CRAYOLA = ::T.let(nil, ::T.untyped)
  NAVY_PURPLE = ::T.let(nil, ::T.untyped)
  NEON_BLUE = ::T.let(nil, ::T.untyped)
  NEON_BROWN = ::T.let(nil, ::T.untyped)
  NEON_CARROT = ::T.let(nil, ::T.untyped)
  NEON_CYAN = ::T.let(nil, ::T.untyped)
  NEON_DARK_GREEN = ::T.let(nil, ::T.untyped)
  NEON_FUCHSIA = ::T.let(nil, ::T.untyped)
  NEON_GOLD = ::T.let(nil, ::T.untyped)
  NEON_GRAY = ::T.let(nil, ::T.untyped)
  NEON_GREEN = ::T.let(nil, ::T.untyped)
  NEON_PINK = ::T.let(nil, ::T.untyped)
  NEON_PURPLE = ::T.let(nil, ::T.untyped)
  NEON_RED = ::T.let(nil, ::T.untyped)
  NEON_SCARLET = ::T.let(nil, ::T.untyped)
  NEON_SILVER = ::T.let(nil, ::T.untyped)
  NEON_TANGERINE = ::T.let(nil, ::T.untyped)
  NEON_YELLOW = ::T.let(nil, ::T.untyped)
  NEW_CAR = ::T.let(nil, ::T.untyped)
  NEW_YORK_PINK = ::T.let(nil, ::T.untyped)
  NICKEL = ::T.let(nil, ::T.untyped)
  NINTENDO_RED = ::T.let(nil, ::T.untyped)
  NON_PHOTO_BLUE = ::T.let(nil, ::T.untyped)
  NYANZA = ::T.let(nil, ::T.untyped)
  OCEAN_BLUE = ::T.let(nil, ::T.untyped)
  OCEAN_BOAT_BLUE = ::T.let(nil, ::T.untyped)
  OCEAN_GREEN = ::T.let(nil, ::T.untyped)
  OCHRE = ::T.let(nil, ::T.untyped)
  OFFICE_GREEN = ::T.let(nil, ::T.untyped)
  OGRE_ODOR = ::T.let(nil, ::T.untyped)
  OLD_BURGUNDY = ::T.let(nil, ::T.untyped)
  OLD_GOLD = ::T.let(nil, ::T.untyped)
  OLD_HELIOTROPE = ::T.let(nil, ::T.untyped)
  OLD_LACE = ::T.let(nil, ::T.untyped)
  OLD_LAVENDER = ::T.let(nil, ::T.untyped)
  OLD_MAUVE = ::T.let(nil, ::T.untyped)
  OLD_MOSS_GREEN = ::T.let(nil, ::T.untyped)
  OLD_ROSE = ::T.let(nil, ::T.untyped)
  OLD_SILVER = ::T.let(nil, ::T.untyped)
  OLIVE = ::T.let(nil, ::T.untyped)
  OLIVE_DRAB3 = ::T.let(nil, ::T.untyped)
  OLIVE_DRAB7 = ::T.let(nil, ::T.untyped)
  OLIVE_GREEN = ::T.let(nil, ::T.untyped)
  OLIVINE = ::T.let(nil, ::T.untyped)
  ONYX = ::T.let(nil, ::T.untyped)
  OPAL = ::T.let(nil, ::T.untyped)
  OPERA_MAUVE = ::T.let(nil, ::T.untyped)
  ORANGE = ::T.let(nil, ::T.untyped)
  ORANGE_COLOR_WHEEL = ::T.let(nil, ::T.untyped)
  ORANGE_CRAYOLA = ::T.let(nil, ::T.untyped)
  ORANGE_ICED_TEA = ::T.let(nil, ::T.untyped)
  ORANGE_PANTONE = ::T.let(nil, ::T.untyped)
  ORANGE_PEEL = ::T.let(nil, ::T.untyped)
  ORANGE_RED = ::T.let(nil, ::T.untyped)
  ORANGE_RED_CRAYOLA = ::T.let(nil, ::T.untyped)
  ORANGE_RYB = ::T.let(nil, ::T.untyped)
  ORANGE_SODA = ::T.let(nil, ::T.untyped)
  ORANGE_WEB = ::T.let(nil, ::T.untyped)
  ORANGE_YELLOW = ::T.let(nil, ::T.untyped)
  ORANGE_YELLOW_CRAYOLA = ::T.let(nil, ::T.untyped)
  ORCHID = ::T.let(nil, ::T.untyped)
  ORCHID_CRAYOLA = ::T.let(nil, ::T.untyped)
  ORCHID_PINK = ::T.let(nil, ::T.untyped)
  ORIOLES_ORANGE = ::T.let(nil, ::T.untyped)
  OTTER_BROWN = ::T.let(nil, ::T.untyped)
  OUTER_SPACE = ::T.let(nil, ::T.untyped)
  OUTER_SPACE_CRAYOLA = ::T.let(nil, ::T.untyped)
  OUTRAGEOUS_ORANGE = ::T.let(nil, ::T.untyped)
  OU_CRIMSON_RED = ::T.let(nil, ::T.untyped)
  OXBLOOD = ::T.let(nil, ::T.untyped)
  OXFORD_BLUE = ::T.let(nil, ::T.untyped)
  OXLEY = ::T.let(nil, ::T.untyped)
  PACIFIC_BLUE = ::T.let(nil, ::T.untyped)
  PAKISTAN_GREEN = ::T.let(nil, ::T.untyped)
  PALATINATE_BLUE = ::T.let(nil, ::T.untyped)
  PALATINATE_PURPLE = ::T.let(nil, ::T.untyped)
  PALE_AQUA = ::T.let(nil, ::T.untyped)
  PALE_BLUE = ::T.let(nil, ::T.untyped)
  PALE_BROWN = ::T.let(nil, ::T.untyped)
  PALE_CARMINE = ::T.let(nil, ::T.untyped)
  PALE_CERULEAN = ::T.let(nil, ::T.untyped)
  PALE_CHESTNUT = ::T.let(nil, ::T.untyped)
  PALE_COPPER = ::T.let(nil, ::T.untyped)
  PALE_CORNFLOWER_BLUE = ::T.let(nil, ::T.untyped)
  PALE_CYAN = ::T.let(nil, ::T.untyped)
  PALE_GOLD = ::T.let(nil, ::T.untyped)
  PALE_GOLDENROD = ::T.let(nil, ::T.untyped)
  PALE_GREEN = ::T.let(nil, ::T.untyped)
  PALE_LAVENDER = ::T.let(nil, ::T.untyped)
  PALE_MAGENTA = ::T.let(nil, ::T.untyped)
  PALE_MAGENTA_PINK = ::T.let(nil, ::T.untyped)
  PALE_PINK = ::T.let(nil, ::T.untyped)
  PALE_PLUM = ::T.let(nil, ::T.untyped)
  PALE_RED_VIOLET = ::T.let(nil, ::T.untyped)
  PALE_ROBIN_EGG_BLUE = ::T.let(nil, ::T.untyped)
  PALE_SILVER = ::T.let(nil, ::T.untyped)
  PALE_SPRING_BUD = ::T.let(nil, ::T.untyped)
  PALE_TAUPE = ::T.let(nil, ::T.untyped)
  PALE_TURQUOISE = ::T.let(nil, ::T.untyped)
  PALE_VIOLET = ::T.let(nil, ::T.untyped)
  PALE_VIOLET_RED = ::T.let(nil, ::T.untyped)
  PALM_LEAF = ::T.let(nil, ::T.untyped)
  PANSY_PURPLE = ::T.let(nil, ::T.untyped)
  PAOLO_VERONESE_GREEN = ::T.let(nil, ::T.untyped)
  PAPAYA_WHIP = ::T.let(nil, ::T.untyped)
  PARADISE_PINK = ::T.let(nil, ::T.untyped)
  PARIS_GREEN = ::T.let(nil, ::T.untyped)
  PARROT_PINK = ::T.let(nil, ::T.untyped)
  PASTEL_BLUE = ::T.let(nil, ::T.untyped)
  PASTEL_BROWN = ::T.let(nil, ::T.untyped)
  PASTEL_GRAY = ::T.let(nil, ::T.untyped)
  PASTEL_GREEN = ::T.let(nil, ::T.untyped)
  PASTEL_MAGENTA = ::T.let(nil, ::T.untyped)
  PASTEL_ORANGE = ::T.let(nil, ::T.untyped)
  PASTEL_PINK = ::T.let(nil, ::T.untyped)
  PASTEL_PURPLE = ::T.let(nil, ::T.untyped)
  PASTEL_RED = ::T.let(nil, ::T.untyped)
  PASTEL_VIOLET = ::T.let(nil, ::T.untyped)
  PASTEL_YELLOW = ::T.let(nil, ::T.untyped)
  PATRIARCH = ::T.let(nil, ::T.untyped)
  PAYNES_GREY = ::T.let(nil, ::T.untyped)
  PEACH = ::T.let(nil, ::T.untyped)
  PEACH_CRAYOLA = ::T.let(nil, ::T.untyped)
  PEACH_ORANGE = ::T.let(nil, ::T.untyped)
  PEACH_PUFF = ::T.let(nil, ::T.untyped)
  PEACH_YELLOW = ::T.let(nil, ::T.untyped)
  PEAR = ::T.let(nil, ::T.untyped)
  PEARL = ::T.let(nil, ::T.untyped)
  PEARLY_PURPLE = ::T.let(nil, ::T.untyped)
  PEARL_AQUA = ::T.let(nil, ::T.untyped)
  PERIDOT = ::T.let(nil, ::T.untyped)
  PERIWINKLE = ::T.let(nil, ::T.untyped)
  PERIWINKLE_CRAYOLA = ::T.let(nil, ::T.untyped)
  PERMANENT_GERANIUM_LAKE = ::T.let(nil, ::T.untyped)
  PERSIAN_BLUE = ::T.let(nil, ::T.untyped)
  PERSIAN_GREEN = ::T.let(nil, ::T.untyped)
  PERSIAN_INDIGO = ::T.let(nil, ::T.untyped)
  PERSIAN_ORANGE = ::T.let(nil, ::T.untyped)
  PERSIAN_PINK = ::T.let(nil, ::T.untyped)
  PERSIAN_PLUM = ::T.let(nil, ::T.untyped)
  PERSIAN_RED = ::T.let(nil, ::T.untyped)
  PERSIAN_ROSE = ::T.let(nil, ::T.untyped)
  PERSIMMON = ::T.let(nil, ::T.untyped)
  PERU = ::T.let(nil, ::T.untyped)
  PEWTER_BLUE = ::T.let(nil, ::T.untyped)
  PHILIPPINE_BLUE = ::T.let(nil, ::T.untyped)
  PHILIPPINE_BRONZE = ::T.let(nil, ::T.untyped)
  PHILIPPINE_BROWN = ::T.let(nil, ::T.untyped)
  PHILIPPINE_GOLD = ::T.let(nil, ::T.untyped)
  PHILIPPINE_GOLDEN_YELLOW = ::T.let(nil, ::T.untyped)
  PHILIPPINE_GRAY = ::T.let(nil, ::T.untyped)
  PHILIPPINE_GREEN = ::T.let(nil, ::T.untyped)
  PHILIPPINE_INDIGO = ::T.let(nil, ::T.untyped)
  PHILIPPINE_ORANGE = ::T.let(nil, ::T.untyped)
  PHILIPPINE_PINK = ::T.let(nil, ::T.untyped)
  PHILIPPINE_RED = ::T.let(nil, ::T.untyped)
  PHILIPPINE_SILVER = ::T.let(nil, ::T.untyped)
  PHILIPPINE_SKY_BLUE = ::T.let(nil, ::T.untyped)
  PHILIPPINE_VIOLET = ::T.let(nil, ::T.untyped)
  PHILIPPINE_YELLOW = ::T.let(nil, ::T.untyped)
  PHLOX = ::T.let(nil, ::T.untyped)
  PHTHALO_BLUE = ::T.let(nil, ::T.untyped)
  PHTHALO_GREEN = ::T.let(nil, ::T.untyped)
  PICTON_BLUE = ::T.let(nil, ::T.untyped)
  PICTORIAL_CARMINE = ::T.let(nil, ::T.untyped)
  PIGGY_PINK = ::T.let(nil, ::T.untyped)
  PINEAPPLE = ::T.let(nil, ::T.untyped)
  PINE_GREEN = ::T.let(nil, ::T.untyped)
  PINE_TREE = ::T.let(nil, ::T.untyped)
  PINK = ::T.let(nil, ::T.untyped)
  PINK_DIAMOND_ACE_HARDWARE_COLOR = ::T.let(nil, ::T.untyped)
  PINK_DIAMOND_INDEPENDENT_RETAILERS_COLORS = ::T.let(nil, ::T.untyped)
  PINK_FLAMINGO = ::T.let(nil, ::T.untyped)
  PINK_LACE = ::T.let(nil, ::T.untyped)
  PINK_LAVENDER = ::T.let(nil, ::T.untyped)
  PINK_ORANGE = ::T.let(nil, ::T.untyped)
  PINK_PANTONE = ::T.let(nil, ::T.untyped)
  PINK_PEARL = ::T.let(nil, ::T.untyped)
  PINK_RASPBERRY = ::T.let(nil, ::T.untyped)
  PINK_SHERBET = ::T.let(nil, ::T.untyped)
  PISTACHIO = ::T.let(nil, ::T.untyped)
  PIXIE_POWDER = ::T.let(nil, ::T.untyped)
  PLATINUM = ::T.let(nil, ::T.untyped)
  PLUM = ::T.let(nil, ::T.untyped)
  PLUMP_PURPLE = ::T.let(nil, ::T.untyped)
  PLUM_WEB = ::T.let(nil, ::T.untyped)
  POLICE_BLUE = ::T.let(nil, ::T.untyped)
  POLISHED_PINE = ::T.let(nil, ::T.untyped)
  POMP_AND_POWER = ::T.let(nil, ::T.untyped)
  POPSTAR = ::T.let(nil, ::T.untyped)
  PORTLAND_ORANGE = ::T.let(nil, ::T.untyped)
  POWDER_BLUE = ::T.let(nil, ::T.untyped)
  PRILLY_BLUE = ::T.let(nil, ::T.untyped)
  PRILLY_PINK = ::T.let(nil, ::T.untyped)
  PRILLY_RED = ::T.let(nil, ::T.untyped)
  PRINCESS_PERFUME = ::T.let(nil, ::T.untyped)
  PRINCETON_ORANGE = ::T.let(nil, ::T.untyped)
  PRUNE = ::T.let(nil, ::T.untyped)
  PRUSSIAN_BLUE = ::T.let(nil, ::T.untyped)
  PSYCHEDELIC_PURPLE = ::T.let(nil, ::T.untyped)
  PUCE = ::T.let(nil, ::T.untyped)
  PUCE_RED = ::T.let(nil, ::T.untyped)
  PULLMAN_BROWN_UPS_BROWN = ::T.let(nil, ::T.untyped)
  PULLMAN_GREEN = ::T.let(nil, ::T.untyped)
  PUMPKIN = ::T.let(nil, ::T.untyped)
  PURPLE_HEART = ::T.let(nil, ::T.untyped)
  PURPLE_HTML = ::T.let(nil, ::T.untyped)
  PURPLE_MOUNTAIN_MAJESTY = ::T.let(nil, ::T.untyped)
  PURPLE_MUNSELL = ::T.let(nil, ::T.untyped)
  PURPLE_NAVY = ::T.let(nil, ::T.untyped)
  PURPLE_PIZZAZZ = ::T.let(nil, ::T.untyped)
  PURPLE_PLUM = ::T.let(nil, ::T.untyped)
  PURPLE_TAUPE = ::T.let(nil, ::T.untyped)
  PURPLE_X11 = ::T.let(nil, ::T.untyped)
  PURPUREUS = ::T.let(nil, ::T.untyped)
  QUARTZ = ::T.let(nil, ::T.untyped)
  QUEEN_BLUE = ::T.let(nil, ::T.untyped)
  QUEEN_PINK = ::T.let(nil, ::T.untyped)
  QUICK_SILVER = ::T.let(nil, ::T.untyped)
  QUINACRIDONE_MAGENTA = ::T.let(nil, ::T.untyped)
  QUINCY = ::T.let(nil, ::T.untyped)
  RACKLEY = ::T.let(nil, ::T.untyped)
  RADICAL_RED = ::T.let(nil, ::T.untyped)
  RAISIN_BLACK = ::T.let(nil, ::T.untyped)
  RAJAH = ::T.let(nil, ::T.untyped)
  RASPBERRY = ::T.let(nil, ::T.untyped)
  RASPBERRY_GLACE = ::T.let(nil, ::T.untyped)
  RASPBERRY_PINK = ::T.let(nil, ::T.untyped)
  RASPBERRY_ROSE = ::T.let(nil, ::T.untyped)
  RAW_SIENNA = ::T.let(nil, ::T.untyped)
  RAW_UMBER = ::T.let(nil, ::T.untyped)
  RAZZLE_DAZZLE_ROSE = ::T.let(nil, ::T.untyped)
  RAZZMATAZZ = ::T.let(nil, ::T.untyped)
  RAZZMIC_BERRY = ::T.let(nil, ::T.untyped)
  REBECCA_PURPLE = ::T.let(nil, ::T.untyped)
  RED = ::T.let(nil, ::T.untyped)
  REDWOOD = ::T.let(nil, ::T.untyped)
  RED_BROWN = ::T.let(nil, ::T.untyped)
  RED_COLA = ::T.let(nil, ::T.untyped)
  RED_CRAYOLA = ::T.let(nil, ::T.untyped)
  RED_DEVIL = ::T.let(nil, ::T.untyped)
  RED_MUNSELL = ::T.let(nil, ::T.untyped)
  RED_NCS = ::T.let(nil, ::T.untyped)
  RED_ORANGE = ::T.let(nil, ::T.untyped)
  RED_ORANGE_COLOR_WHEEL = ::T.let(nil, ::T.untyped)
  RED_ORANGE_CRAYOLA = ::T.let(nil, ::T.untyped)
  RED_PANTONE = ::T.let(nil, ::T.untyped)
  RED_PIGMENT = ::T.let(nil, ::T.untyped)
  RED_PURPLE = ::T.let(nil, ::T.untyped)
  RED_RUM = ::T.let(nil, ::T.untyped)
  RED_RYB = ::T.let(nil, ::T.untyped)
  RED_SALSA = ::T.let(nil, ::T.untyped)
  RED_STRAWBERRY = ::T.let(nil, ::T.untyped)
  RED_VIOLET = ::T.let(nil, ::T.untyped)
  RED_VIOLET_COLOR_WHEEL = ::T.let(nil, ::T.untyped)
  RED_VIOLET_CRAYOLA = ::T.let(nil, ::T.untyped)
  REGISTRATION_BLACK = ::T.let(nil, ::T.untyped)
  RESOLUTION_BLUE = ::T.let(nil, ::T.untyped)
  RHYTHM = ::T.let(nil, ::T.untyped)
  RICH_BRILLIANT_LAVENDER = ::T.let(nil, ::T.untyped)
  RICH_CARMINE = ::T.let(nil, ::T.untyped)
  RICH_ELECTRIC_BLUE = ::T.let(nil, ::T.untyped)
  RICH_LAVENDER = ::T.let(nil, ::T.untyped)
  RICH_LILAC = ::T.let(nil, ::T.untyped)
  RICH_MAROON = ::T.let(nil, ::T.untyped)
  RIFLE_GREEN = ::T.let(nil, ::T.untyped)
  RIPE_MANGO = ::T.let(nil, ::T.untyped)
  ROAST_COFFEE = ::T.let(nil, ::T.untyped)
  ROBIN_EGG_BLUE = ::T.let(nil, ::T.untyped)
  ROCKET_METALLIC = ::T.let(nil, ::T.untyped)
  ROMAN_SILVER = ::T.let(nil, ::T.untyped)
  ROOT_BEER = ::T.let(nil, ::T.untyped)
  ROSE = ::T.let(nil, ::T.untyped)
  ROSEWOOD = ::T.let(nil, ::T.untyped)
  ROSE_BONBON = ::T.let(nil, ::T.untyped)
  ROSE_DUST = ::T.let(nil, ::T.untyped)
  ROSE_EBONY = ::T.let(nil, ::T.untyped)
  ROSE_GARNET = ::T.let(nil, ::T.untyped)
  ROSE_GOLD = ::T.let(nil, ::T.untyped)
  ROSE_MADDER = ::T.let(nil, ::T.untyped)
  ROSE_PINK = ::T.let(nil, ::T.untyped)
  ROSE_QUARTZ = ::T.let(nil, ::T.untyped)
  ROSE_QUARTZ_PINK = ::T.let(nil, ::T.untyped)
  ROSE_RED = ::T.let(nil, ::T.untyped)
  ROSE_TAUPE = ::T.let(nil, ::T.untyped)
  ROSE_VALE = ::T.let(nil, ::T.untyped)
  ROSY_BROWN = ::T.let(nil, ::T.untyped)
  ROYAL_AZURE = ::T.let(nil, ::T.untyped)
  ROYAL_BLUE = ::T.let(nil, ::T.untyped)
  ROYAL_BROWN = ::T.let(nil, ::T.untyped)
  ROYAL_FUCHSIA = ::T.let(nil, ::T.untyped)
  ROYAL_GREEN = ::T.let(nil, ::T.untyped)
  ROYAL_ORANGE = ::T.let(nil, ::T.untyped)
  ROYAL_PINK = ::T.let(nil, ::T.untyped)
  ROYAL_PURPLE = ::T.let(nil, ::T.untyped)
  ROYAL_RED = ::T.let(nil, ::T.untyped)
  ROYAL_YELLOW = ::T.let(nil, ::T.untyped)
  RUBER = ::T.let(nil, ::T.untyped)
  RUBINE_RED = ::T.let(nil, ::T.untyped)
  RUBY = ::T.let(nil, ::T.untyped)
  RUBY_RED = ::T.let(nil, ::T.untyped)
  RUFOUS = ::T.let(nil, ::T.untyped)
  RUM = ::T.let(nil, ::T.untyped)
  RUSSET = ::T.let(nil, ::T.untyped)
  RUSSIAN_GREEN = ::T.let(nil, ::T.untyped)
  RUSSIAN_VIOLET = ::T.let(nil, ::T.untyped)
  RUST = ::T.let(nil, ::T.untyped)
  RUSTY_RED = ::T.let(nil, ::T.untyped)
  SACRAMENTO_STATE_GREEN = ::T.let(nil, ::T.untyped)
  SADDLE_BROWN = ::T.let(nil, ::T.untyped)
  SAFETY_ORANGE = ::T.let(nil, ::T.untyped)
  SAFETY_ORANGE_BLAZE_ORANGE = ::T.let(nil, ::T.untyped)
  SAFETY_YELLOW = ::T.let(nil, ::T.untyped)
  SAFFRON = ::T.let(nil, ::T.untyped)
  SAGE = ::T.let(nil, ::T.untyped)
  SALEM = ::T.let(nil, ::T.untyped)
  SALMON = ::T.let(nil, ::T.untyped)
  SALMON_PINK = ::T.let(nil, ::T.untyped)
  SALMON_ROSE = ::T.let(nil, ::T.untyped)
  SAMSUNG_BLUE = ::T.let(nil, ::T.untyped)
  SAND = ::T.let(nil, ::T.untyped)
  SANDSTORM = ::T.let(nil, ::T.untyped)
  SANDY_BROWN = ::T.let(nil, ::T.untyped)
  SANDY_TAN = ::T.let(nil, ::T.untyped)
  SANDY_TAUPE = ::T.let(nil, ::T.untyped)
  SAND_DUNE = ::T.let(nil, ::T.untyped)
  SAPPHIRE = ::T.let(nil, ::T.untyped)
  SAPPHIRE_BLUE = ::T.let(nil, ::T.untyped)
  SAP_GREEN = ::T.let(nil, ::T.untyped)
  SASQUATCH_SOCKS = ::T.let(nil, ::T.untyped)
  SATIN_SHEEN_GOLD = ::T.let(nil, ::T.untyped)
  SCARLET = ::T.let(nil, ::T.untyped)
  SCHAUSS_PINK = ::T.let(nil, ::T.untyped)
  SCHOOL_BUS_YELLOW = ::T.let(nil, ::T.untyped)
  SCREAMIN_GREEN = ::T.let(nil, ::T.untyped)
  SEAL_BROWN = ::T.let(nil, ::T.untyped)
  SEASHELL = ::T.let(nil, ::T.untyped)
  SEA_BLUE = ::T.let(nil, ::T.untyped)
  SEA_FOAM_GREEN = ::T.let(nil, ::T.untyped)
  SEA_GREEN = ::T.let(nil, ::T.untyped)
  SEA_GREEN_CRAYOLA = ::T.let(nil, ::T.untyped)
  SEA_SERPENT = ::T.let(nil, ::T.untyped)
  SELECTIVE_YELLOW = ::T.let(nil, ::T.untyped)
  SEPIA = ::T.let(nil, ::T.untyped)
  SHADOW = ::T.let(nil, ::T.untyped)
  SHADOW_BLUE = ::T.let(nil, ::T.untyped)
  SHAMPOO = ::T.let(nil, ::T.untyped)
  SHAMROCK_GREEN = ::T.let(nil, ::T.untyped)
  SHANDY = ::T.let(nil, ::T.untyped)
  SHEEN_GREEN = ::T.let(nil, ::T.untyped)
  SHIMMERING_BLUSH = ::T.let(nil, ::T.untyped)
  SHINY_SHAMROCK = ::T.let(nil, ::T.untyped)
  SHOCKING_PINK = ::T.let(nil, ::T.untyped)
  SHOCKING_PINK_CRAYOLA = ::T.let(nil, ::T.untyped)
  SIENNA = ::T.let(nil, ::T.untyped)
  SILVER = ::T.let(nil, ::T.untyped)
  SILVER_CHALICE = ::T.let(nil, ::T.untyped)
  SILVER_CRAYOLA = ::T.let(nil, ::T.untyped)
  SILVER_FOIL = ::T.let(nil, ::T.untyped)
  SILVER_LAKE_BLUE = ::T.let(nil, ::T.untyped)
  SILVER_METALLIC = ::T.let(nil, ::T.untyped)
  SILVER_PINK = ::T.let(nil, ::T.untyped)
  SILVER_SAND = ::T.let(nil, ::T.untyped)
  SINOPIA = ::T.let(nil, ::T.untyped)
  SIZZLING_RED = ::T.let(nil, ::T.untyped)
  SIZZLING_SUNRISE = ::T.let(nil, ::T.untyped)
  SKOBELOFF = ::T.let(nil, ::T.untyped)
  SKY_BLUE = ::T.let(nil, ::T.untyped)
  SKY_BLUE_CRAYOLA = ::T.let(nil, ::T.untyped)
  SKY_MAGENTA = ::T.let(nil, ::T.untyped)
  SLATE_BLUE = ::T.let(nil, ::T.untyped)
  SLATE_GRAY = ::T.let(nil, ::T.untyped)
  SLIMY_GREEN = ::T.let(nil, ::T.untyped)
  SMALT_DARK_POWDER_BLUE = ::T.let(nil, ::T.untyped)
  SMASHED_PUMPKIN = ::T.let(nil, ::T.untyped)
  SMITTEN = ::T.let(nil, ::T.untyped)
  SMOKE = ::T.let(nil, ::T.untyped)
  SMOKEY_TOPAZ = ::T.let(nil, ::T.untyped)
  SMOKY_BLACK = ::T.let(nil, ::T.untyped)
  SNOW = ::T.let(nil, ::T.untyped)
  SOAP = ::T.let(nil, ::T.untyped)
  SOLID_PINK = ::T.let(nil, ::T.untyped)
  SONIC_SILVER = ::T.let(nil, ::T.untyped)
  SPACE_CADET = ::T.let(nil, ::T.untyped)
  SPANISH_BISTRE = ::T.let(nil, ::T.untyped)
  SPANISH_BLUE = ::T.let(nil, ::T.untyped)
  SPANISH_CARMINE = ::T.let(nil, ::T.untyped)
  SPANISH_CRIMSON = ::T.let(nil, ::T.untyped)
  SPANISH_GRAY = ::T.let(nil, ::T.untyped)
  SPANISH_GREEN = ::T.let(nil, ::T.untyped)
  SPANISH_ORANGE = ::T.let(nil, ::T.untyped)
  SPANISH_PINK = ::T.let(nil, ::T.untyped)
  SPANISH_PURPLE = ::T.let(nil, ::T.untyped)
  SPANISH_RED = ::T.let(nil, ::T.untyped)
  SPANISH_SKY_BLUE = ::T.let(nil, ::T.untyped)
  SPANISH_VIOLET = ::T.let(nil, ::T.untyped)
  SPANISH_VIRIDIAN = ::T.let(nil, ::T.untyped)
  SPANISH_YELLOW = ::T.let(nil, ::T.untyped)
  SPARTAN_CRIMSON = ::T.let(nil, ::T.untyped)
  SPICY_MIX = ::T.let(nil, ::T.untyped)
  SPIRO_DISCO_BALL = ::T.let(nil, ::T.untyped)
  SPRING_BUD = ::T.let(nil, ::T.untyped)
  SPRING_FROST = ::T.let(nil, ::T.untyped)
  SPRING_GREEN = ::T.let(nil, ::T.untyped)
  SPRING_GREEN_CRAYOLA = ::T.let(nil, ::T.untyped)
  STAR_COMMAND_BLUE = ::T.let(nil, ::T.untyped)
  STEEL_BLUE = ::T.let(nil, ::T.untyped)
  STEEL_PINK = ::T.let(nil, ::T.untyped)
  STEEL_TEAL = ::T.let(nil, ::T.untyped)
  STIL_DE_GRAIN_YELLOW = ::T.let(nil, ::T.untyped)
  STOP_RED = ::T.let(nil, ::T.untyped)
  STRAW = ::T.let(nil, ::T.untyped)
  STRAWBERRY = ::T.let(nil, ::T.untyped)
  STRAWBERRY_ICED_TEA = ::T.let(nil, ::T.untyped)
  STRAWBERRY_RED = ::T.let(nil, ::T.untyped)
  ST_PATRICKS_BLUE = ::T.let(nil, ::T.untyped)
  SUGAR_PLUM = ::T.let(nil, ::T.untyped)
  SUNBURNT_CYCLOPS = ::T.let(nil, ::T.untyped)
  SUNGLOW = ::T.let(nil, ::T.untyped)
  SUNNY = ::T.let(nil, ::T.untyped)
  SUNRAY = ::T.let(nil, ::T.untyped)
  SUNSET = ::T.let(nil, ::T.untyped)
  SUNSET_ORANGE = ::T.let(nil, ::T.untyped)
  SUPER_PINK = ::T.let(nil, ::T.untyped)
  SWEET_BROWN = ::T.let(nil, ::T.untyped)
  TAN = ::T.let(nil, ::T.untyped)
  TANGELO = ::T.let(nil, ::T.untyped)
  TANGERINE = ::T.let(nil, ::T.untyped)
  TANGERINE_YELLOW = ::T.let(nil, ::T.untyped)
  TANGO_PINK = ::T.let(nil, ::T.untyped)
  TAN_CRAYOLA = ::T.let(nil, ::T.untyped)
  TART_ORANGE = ::T.let(nil, ::T.untyped)
  TAUPE = ::T.let(nil, ::T.untyped)
  TAUPE_GRAY = ::T.let(nil, ::T.untyped)
  TAWNY = ::T.let(nil, ::T.untyped)
  TEAL = ::T.let(nil, ::T.untyped)
  TEAL_BLUE = ::T.let(nil, ::T.untyped)
  TEAL_DEER = ::T.let(nil, ::T.untyped)
  TEAL_GREEN = ::T.let(nil, ::T.untyped)
  TEA_GREEN = ::T.let(nil, ::T.untyped)
  TEA_ROSE = ::T.let(nil, ::T.untyped)
  TELEMAGENTA = ::T.let(nil, ::T.untyped)
  TEMPTRESS = ::T.let(nil, ::T.untyped)
  TERRA_COTTA = ::T.let(nil, ::T.untyped)
  THISTLE = ::T.let(nil, ::T.untyped)
  THISTLE_CRAYOLA = ::T.let(nil, ::T.untyped)
  THULIAN_PINK = ::T.let(nil, ::T.untyped)
  TICKLE_ME_PINK = ::T.let(nil, ::T.untyped)
  TIFFANY_BLUE = ::T.let(nil, ::T.untyped)
  TIGERS_EYE = ::T.let(nil, ::T.untyped)
  TIMBERWOLF = ::T.let(nil, ::T.untyped)
  TITANIUM = ::T.let(nil, ::T.untyped)
  TITANIUM_YELLOW = ::T.let(nil, ::T.untyped)
  TOMATO = ::T.let(nil, ::T.untyped)
  TOMATO_SAUCE = ::T.let(nil, ::T.untyped)
  TOOLBOX = ::T.let(nil, ::T.untyped)
  TOOTH = ::T.let(nil, ::T.untyped)
  TOPAZ = ::T.let(nil, ::T.untyped)
  TRACTOR_RED = ::T.let(nil, ::T.untyped)
  TROLLEY_GREY = ::T.let(nil, ::T.untyped)
  TROPICAL_RAIN_FOREST = ::T.let(nil, ::T.untyped)
  TROPICAL_VIOLET = ::T.let(nil, ::T.untyped)
  TRUE_BLUE = ::T.let(nil, ::T.untyped)
  TUFTS_BLUE = ::T.let(nil, ::T.untyped)
  TULIP = ::T.let(nil, ::T.untyped)
  TUMBLEWEED = ::T.let(nil, ::T.untyped)
  TURKISH_ROSE = ::T.let(nil, ::T.untyped)
  TURQUOISE = ::T.let(nil, ::T.untyped)
  TURQUOISE_BLUE = ::T.let(nil, ::T.untyped)
  TURQUOISE_GREEN = ::T.let(nil, ::T.untyped)
  TURQUOISE_SURF = ::T.let(nil, ::T.untyped)
  TURTLE_GREEN = ::T.let(nil, ::T.untyped)
  TUSCAN = ::T.let(nil, ::T.untyped)
  TUSCANY = ::T.let(nil, ::T.untyped)
  TUSCAN_BROWN = ::T.let(nil, ::T.untyped)
  TUSCAN_RED = ::T.let(nil, ::T.untyped)
  TUSCAN_TAN = ::T.let(nil, ::T.untyped)
  TWILIGHT_LAVENDER = ::T.let(nil, ::T.untyped)
  TWITTER_BLUE = ::T.let(nil, ::T.untyped)
  TYRIAN_PURPLE = ::T.let(nil, ::T.untyped)
  ULTRAMARINE = ::T.let(nil, ::T.untyped)
  ULTRAMARINE_BLUE = ::T.let(nil, ::T.untyped)
  ULTRAMARINE_BLUE_CARAN_DACHE = ::T.let(nil, ::T.untyped)
  ULTRA_PINK = ::T.let(nil, ::T.untyped)
  ULTRA_RED = ::T.let(nil, ::T.untyped)
  UMBER = ::T.let(nil, ::T.untyped)
  UNBLEACHED_SILK = ::T.let(nil, ::T.untyped)
  UNITED_NATIONS_BLUE = ::T.let(nil, ::T.untyped)
  UNMELLOW_YELLOW = ::T.let(nil, ::T.untyped)
  UPSDELL_RED = ::T.let(nil, ::T.untyped)
  UP_MAROON = ::T.let(nil, ::T.untyped)
  UROBILIN = ::T.let(nil, ::T.untyped)
  VAMPIRE_BLACK = ::T.let(nil, ::T.untyped)
  VANILLA = ::T.let(nil, ::T.untyped)
  VANILLA_ICE = ::T.let(nil, ::T.untyped)
  VAN_DYKE_BROWN = ::T.let(nil, ::T.untyped)
  VEGAS_GOLD = ::T.let(nil, ::T.untyped)
  VENETIAN_RED = ::T.let(nil, ::T.untyped)
  VERDIGRIS = ::T.let(nil, ::T.untyped)
  VERMILION = ::T.let(nil, ::T.untyped)
  VERONICA = ::T.let(nil, ::T.untyped)
  VERSE_GREEN = ::T.let(nil, ::T.untyped)
  VERY_LIGHT_AZURE = ::T.let(nil, ::T.untyped)
  VERY_LIGHT_BLUE = ::T.let(nil, ::T.untyped)
  VERY_LIGHT_MALACHITE_GREEN = ::T.let(nil, ::T.untyped)
  VERY_LIGHT_TANGELO = ::T.let(nil, ::T.untyped)
  VERY_PALE_ORANGE = ::T.let(nil, ::T.untyped)
  VERY_PALE_YELLOW = ::T.let(nil, ::T.untyped)
  VINE_GREEN = ::T.let(nil, ::T.untyped)
  VIOLET = ::T.let(nil, ::T.untyped)
  VIOLET_BLUE = ::T.let(nil, ::T.untyped)
  VIOLET_BLUE_CRAYOLA = ::T.let(nil, ::T.untyped)
  VIOLET_CARAN_DACHE = ::T.let(nil, ::T.untyped)
  VIOLET_COLOR_WHEEL = ::T.let(nil, ::T.untyped)
  VIOLET_CRAYOLA = ::T.let(nil, ::T.untyped)
  VIOLET_RED = ::T.let(nil, ::T.untyped)
  VIOLET_RYB = ::T.let(nil, ::T.untyped)
  VIOLET_WEB = ::T.let(nil, ::T.untyped)
  VIOLIN_BROWN = ::T.let(nil, ::T.untyped)
  VIRIDIAN = ::T.let(nil, ::T.untyped)
  VIRIDIAN_GREEN = ::T.let(nil, ::T.untyped)
  VISTA_BLUE = ::T.let(nil, ::T.untyped)
  VIVID_AMBER = ::T.let(nil, ::T.untyped)
  VIVID_AUBURN = ::T.let(nil, ::T.untyped)
  VIVID_BURGUNDY = ::T.let(nil, ::T.untyped)
  VIVID_CERISE = ::T.let(nil, ::T.untyped)
  VIVID_CERULEAN = ::T.let(nil, ::T.untyped)
  VIVID_CRIMSON = ::T.let(nil, ::T.untyped)
  VIVID_GAMBOGE = ::T.let(nil, ::T.untyped)
  VIVID_LIME_GREEN = ::T.let(nil, ::T.untyped)
  VIVID_MALACHITE = ::T.let(nil, ::T.untyped)
  VIVID_MULBERRY = ::T.let(nil, ::T.untyped)
  VIVID_ORANGE = ::T.let(nil, ::T.untyped)
  VIVID_ORANGE_PEEL = ::T.let(nil, ::T.untyped)
  VIVID_ORCHID = ::T.let(nil, ::T.untyped)
  VIVID_RASPBERRY = ::T.let(nil, ::T.untyped)
  VIVID_RED = ::T.let(nil, ::T.untyped)
  VIVID_RED_TANGELO = ::T.let(nil, ::T.untyped)
  VIVID_SKY_BLUE = ::T.let(nil, ::T.untyped)
  VIVID_TANGELO = ::T.let(nil, ::T.untyped)
  VIVID_TANGERINE = ::T.let(nil, ::T.untyped)
  VIVID_VERMILION = ::T.let(nil, ::T.untyped)
  VIVID_VIOLET = ::T.let(nil, ::T.untyped)
  VIVID_YELLOW = ::T.let(nil, ::T.untyped)
  WATER = ::T.let(nil, ::T.untyped)
  WATERMELON = ::T.let(nil, ::T.untyped)
  WATERMELON_RED = ::T.let(nil, ::T.untyped)
  WATERMELON_YELLOW = ::T.let(nil, ::T.untyped)
  WATERSPOUT = ::T.let(nil, ::T.untyped)
  WELDON_BLUE = ::T.let(nil, ::T.untyped)
  WENGE = ::T.let(nil, ::T.untyped)
  WHEAT = ::T.let(nil, ::T.untyped)
  WHITE = ::T.let(nil, ::T.untyped)
  WHITE_CHOCOLATE = ::T.let(nil, ::T.untyped)
  WHITE_COFFEE = ::T.let(nil, ::T.untyped)
  WHITE_SMOKE = ::T.let(nil, ::T.untyped)
  WILD_ORCHID = ::T.let(nil, ::T.untyped)
  WILD_STRAWBERRY = ::T.let(nil, ::T.untyped)
  WILD_WATERMELON = ::T.let(nil, ::T.untyped)
  WILLPOWER_ORANGE = ::T.let(nil, ::T.untyped)
  WINDSOR_TAN = ::T.let(nil, ::T.untyped)
  WINE = ::T.let(nil, ::T.untyped)
  WINE_DREGS = ::T.let(nil, ::T.untyped)
  WINE_RED = ::T.let(nil, ::T.untyped)
  WINTERGREEN_DREAM = ::T.let(nil, ::T.untyped)
  WINTER_SKY = ::T.let(nil, ::T.untyped)
  WINTER_WIZARD = ::T.let(nil, ::T.untyped)
  WISTERIA = ::T.let(nil, ::T.untyped)
  WOOD_BROWN = ::T.let(nil, ::T.untyped)
  XANADU = ::T.let(nil, ::T.untyped)
  YELLOW = ::T.let(nil, ::T.untyped)
  YELLOW_CRAYOLA = ::T.let(nil, ::T.untyped)
  YELLOW_GREEN = ::T.let(nil, ::T.untyped)
  YELLOW_GREEN_CRAYOLA = ::T.let(nil, ::T.untyped)
  YELLOW_MUNSELL = ::T.let(nil, ::T.untyped)
  YELLOW_NCS = ::T.let(nil, ::T.untyped)
  YELLOW_ORANGE = ::T.let(nil, ::T.untyped)
  YELLOW_ORANGE_COLOR_WHEEL = ::T.let(nil, ::T.untyped)
  YELLOW_PANTONE = ::T.let(nil, ::T.untyped)
  YELLOW_PROCESS = ::T.let(nil, ::T.untyped)
  YELLOW_ROSE = ::T.let(nil, ::T.untyped)
  YELLOW_RYB = ::T.let(nil, ::T.untyped)
  YELLOW_SUNSHINE = ::T.let(nil, ::T.untyped)
  YINMN_BLUE = ::T.let(nil, ::T.untyped)
  ZAFFRE = ::T.let(nil, ::T.untyped)
  ZEBRA_WHITE = ::T.let(nil, ::T.untyped)
  ZINNWALDITE = ::T.let(nil, ::T.untyped)
end

module Cairo::Color::X11
  ALICE_BLUE = ::T.let(nil, ::T.untyped)
  ANTIQUE_WHITE = ::T.let(nil, ::T.untyped)
  AQUA = ::T.let(nil, ::T.untyped)
  AQUAMARINE = ::T.let(nil, ::T.untyped)
  AZURE = ::T.let(nil, ::T.untyped)
  BEIGE = ::T.let(nil, ::T.untyped)
  BISQUE = ::T.let(nil, ::T.untyped)
  BLACK = ::T.let(nil, ::T.untyped)
  BLANCHED_ALMOND = ::T.let(nil, ::T.untyped)
  BLUE = ::T.let(nil, ::T.untyped)
  BLUE_VIOLET = ::T.let(nil, ::T.untyped)
  BROWN = ::T.let(nil, ::T.untyped)
  BURLYWOOD = ::T.let(nil, ::T.untyped)
  CADET_BLUE = ::T.let(nil, ::T.untyped)
  CHARTREUSE = ::T.let(nil, ::T.untyped)
  CHOCOLATE = ::T.let(nil, ::T.untyped)
  CORAL = ::T.let(nil, ::T.untyped)
  CORNFLOWER_BLUE = ::T.let(nil, ::T.untyped)
  CORNSILK = ::T.let(nil, ::T.untyped)
  CRIMSON = ::T.let(nil, ::T.untyped)
  CYAN = ::T.let(nil, ::T.untyped)
  DARK_BLUE = ::T.let(nil, ::T.untyped)
  DARK_CYAN = ::T.let(nil, ::T.untyped)
  DARK_GOLDENROD = ::T.let(nil, ::T.untyped)
  DARK_GRAY = ::T.let(nil, ::T.untyped)
  DARK_GREEN = ::T.let(nil, ::T.untyped)
  DARK_KHAKI = ::T.let(nil, ::T.untyped)
  DARK_MAGENTA = ::T.let(nil, ::T.untyped)
  DARK_OLIVE_GREEN = ::T.let(nil, ::T.untyped)
  DARK_ORANGE = ::T.let(nil, ::T.untyped)
  DARK_ORCHID = ::T.let(nil, ::T.untyped)
  DARK_RED = ::T.let(nil, ::T.untyped)
  DARK_SALMON = ::T.let(nil, ::T.untyped)
  DARK_SEA_GREEN = ::T.let(nil, ::T.untyped)
  DARK_SLATE_BLUE = ::T.let(nil, ::T.untyped)
  DARK_SLATE_GRAY = ::T.let(nil, ::T.untyped)
  DARK_TURQUOISE = ::T.let(nil, ::T.untyped)
  DARK_VIOLET = ::T.let(nil, ::T.untyped)
  DEEP_PINK = ::T.let(nil, ::T.untyped)
  DEEP_SKY_BLUE = ::T.let(nil, ::T.untyped)
  DIM_GRAY = ::T.let(nil, ::T.untyped)
  DODGER_BLUE = ::T.let(nil, ::T.untyped)
  FIREBRICK = ::T.let(nil, ::T.untyped)
  FLORAL_WHITE = ::T.let(nil, ::T.untyped)
  FOREST_GREEN = ::T.let(nil, ::T.untyped)
  FUCHSIA = ::T.let(nil, ::T.untyped)
  GAINSBORO = ::T.let(nil, ::T.untyped)
  GHOST_WHITE = ::T.let(nil, ::T.untyped)
  GOLD = ::T.let(nil, ::T.untyped)
  GOLDENROD = ::T.let(nil, ::T.untyped)
  GRAY = ::T.let(nil, ::T.untyped)
  GREEN = ::T.let(nil, ::T.untyped)
  GREEN_YELLOW = ::T.let(nil, ::T.untyped)
  HONEYDEW = ::T.let(nil, ::T.untyped)
  HOT_PINK = ::T.let(nil, ::T.untyped)
  INDIAN_RED = ::T.let(nil, ::T.untyped)
  INDIGO = ::T.let(nil, ::T.untyped)
  IVORY = ::T.let(nil, ::T.untyped)
  KHAKI = ::T.let(nil, ::T.untyped)
  LAVENDER = ::T.let(nil, ::T.untyped)
  LAVENDER_BLUSH = ::T.let(nil, ::T.untyped)
  LAWN_GREEN = ::T.let(nil, ::T.untyped)
  LEMON_CHIFFON = ::T.let(nil, ::T.untyped)
  LIGHT_BLUE = ::T.let(nil, ::T.untyped)
  LIGHT_CORAL = ::T.let(nil, ::T.untyped)
  LIGHT_CYAN = ::T.let(nil, ::T.untyped)
  LIGHT_GOLDENROD = ::T.let(nil, ::T.untyped)
  LIGHT_GRAY = ::T.let(nil, ::T.untyped)
  LIGHT_GREEN = ::T.let(nil, ::T.untyped)
  LIGHT_PINK = ::T.let(nil, ::T.untyped)
  LIGHT_SALMON = ::T.let(nil, ::T.untyped)
  LIGHT_SEA_GREEN = ::T.let(nil, ::T.untyped)
  LIGHT_SKY_BLUE = ::T.let(nil, ::T.untyped)
  LIGHT_SLATE_GRAY = ::T.let(nil, ::T.untyped)
  LIGHT_STEEL_BLUE = ::T.let(nil, ::T.untyped)
  LIGHT_YELLOW = ::T.let(nil, ::T.untyped)
  LIME = ::T.let(nil, ::T.untyped)
  LIME_GREEN = ::T.let(nil, ::T.untyped)
  LINEN = ::T.let(nil, ::T.untyped)
  MAGENTA = ::T.let(nil, ::T.untyped)
  MAROON = ::T.let(nil, ::T.untyped)
  MEDIUM_AQUAMARINE = ::T.let(nil, ::T.untyped)
  MEDIUM_BLUE = ::T.let(nil, ::T.untyped)
  MEDIUM_ORCHID = ::T.let(nil, ::T.untyped)
  MEDIUM_PURPLE = ::T.let(nil, ::T.untyped)
  MEDIUM_SEA_GREEN = ::T.let(nil, ::T.untyped)
  MEDIUM_SLATE_BLUE = ::T.let(nil, ::T.untyped)
  MEDIUM_SPRING_GREEN = ::T.let(nil, ::T.untyped)
  MEDIUM_TURQUOISE = ::T.let(nil, ::T.untyped)
  MEDIUM_VIOLET_RED = ::T.let(nil, ::T.untyped)
  MIDNIGHT_BLUE = ::T.let(nil, ::T.untyped)
  MINT_CREAM = ::T.let(nil, ::T.untyped)
  MISTY_ROSE = ::T.let(nil, ::T.untyped)
  MOCCASIN = ::T.let(nil, ::T.untyped)
  NAVAJO_WHITE = ::T.let(nil, ::T.untyped)
  NAVY_BLUE = ::T.let(nil, ::T.untyped)
  OLD_LACE = ::T.let(nil, ::T.untyped)
  OLIVE = ::T.let(nil, ::T.untyped)
  OLIVE_DRAB = ::T.let(nil, ::T.untyped)
  ORANGE = ::T.let(nil, ::T.untyped)
  ORANGE_RED = ::T.let(nil, ::T.untyped)
  ORCHID = ::T.let(nil, ::T.untyped)
  PALE_GOLDENROD = ::T.let(nil, ::T.untyped)
  PALE_GREEN = ::T.let(nil, ::T.untyped)
  PALE_TURQUOISE = ::T.let(nil, ::T.untyped)
  PALE_VIOLET_RED = ::T.let(nil, ::T.untyped)
  PAPAYA_WHIP = ::T.let(nil, ::T.untyped)
  PEACH_PUFF = ::T.let(nil, ::T.untyped)
  PERU = ::T.let(nil, ::T.untyped)
  PINK = ::T.let(nil, ::T.untyped)
  PLUM = ::T.let(nil, ::T.untyped)
  POWDER_BLUE = ::T.let(nil, ::T.untyped)
  PURPLE = ::T.let(nil, ::T.untyped)
  REBECCA_PURPLE = ::T.let(nil, ::T.untyped)
  RED = ::T.let(nil, ::T.untyped)
  ROSY_BROWN = ::T.let(nil, ::T.untyped)
  ROYAL_BLUE = ::T.let(nil, ::T.untyped)
  SADDLE_BROWN = ::T.let(nil, ::T.untyped)
  SALMON = ::T.let(nil, ::T.untyped)
  SANDY_BROWN = ::T.let(nil, ::T.untyped)
  SEASHELL = ::T.let(nil, ::T.untyped)
  SEA_GREEN = ::T.let(nil, ::T.untyped)
  SIENNA = ::T.let(nil, ::T.untyped)
  SILVER = ::T.let(nil, ::T.untyped)
  SKY_BLUE = ::T.let(nil, ::T.untyped)
  SLATE_BLUE = ::T.let(nil, ::T.untyped)
  SLATE_GRAY = ::T.let(nil, ::T.untyped)
  SNOW = ::T.let(nil, ::T.untyped)
  SPRING_GREEN = ::T.let(nil, ::T.untyped)
  STEEL_BLUE = ::T.let(nil, ::T.untyped)
  TAN = ::T.let(nil, ::T.untyped)
  TEAL = ::T.let(nil, ::T.untyped)
  THISTLE = ::T.let(nil, ::T.untyped)
  TOMATO = ::T.let(nil, ::T.untyped)
  TURQUOISE = ::T.let(nil, ::T.untyped)
  VIOLET = ::T.let(nil, ::T.untyped)
  WEB_GRAY = ::T.let(nil, ::T.untyped)
  WEB_GREEN = ::T.let(nil, ::T.untyped)
  WEB_MAROON = ::T.let(nil, ::T.untyped)
  WEB_PURPLE = ::T.let(nil, ::T.untyped)
  WHEAT = ::T.let(nil, ::T.untyped)
  WHITE = ::T.let(nil, ::T.untyped)
  WHITE_SMOKE = ::T.let(nil, ::T.untyped)
  YELLOW = ::T.let(nil, ::T.untyped)
  YELLOW_GREEN = ::T.let(nil, ::T.untyped)
end

module Cairo::Content
  ALPHA = ::T.let(nil, ::T.untyped)
  COLOR = ::T.let(nil, ::T.untyped)
  COLOR_ALPHA = ::T.let(nil, ::T.untyped)
end

module Cairo::Content
end

class Cairo::DRMDevice
end

class Cairo::DRMDevice
end

class Cairo::DRMSurface
end

class Cairo::DRMSurface
end

class Cairo::DeviceError
end

class Cairo::DeviceError
end

class Cairo::DeviceFinished
end

class Cairo::DeviceFinished
end

class Cairo::DeviceTypeMismatch
end

class Cairo::DeviceTypeMismatch
end

class Cairo::Error
end

class Cairo::Error
end

module Cairo::Extend
  NONE = ::T.let(nil, ::T.untyped)
  PAD = ::T.let(nil, ::T.untyped)
  REFLECT = ::T.let(nil, ::T.untyped)
  REPEAT = ::T.let(nil, ::T.untyped)
end

module Cairo::Extend
end

class Cairo::FileNotFound
end

class Cairo::FileNotFound
end

module Cairo::FillRule
  EVEN_ODD = ::T.let(nil, ::T.untyped)
  WINDING = ::T.let(nil, ::T.untyped)
end

module Cairo::FillRule
end

module Cairo::Filter
  BEST = ::T.let(nil, ::T.untyped)
  BILINEAR = ::T.let(nil, ::T.untyped)
  FAST = ::T.let(nil, ::T.untyped)
  GAUSSIAN = ::T.let(nil, ::T.untyped)
  GOOD = ::T.let(nil, ::T.untyped)
  NEAREST = ::T.let(nil, ::T.untyped)
end

module Cairo::Filter
end

module Cairo::FontSlant
  ITALIC = ::T.let(nil, ::T.untyped)
  NORMAL = ::T.let(nil, ::T.untyped)
  OBLIQUE = ::T.let(nil, ::T.untyped)
end

module Cairo::FontSlant
end

class Cairo::FontTypeMismatch
end

class Cairo::FontTypeMismatch
end

module Cairo::FontWeight
  BOLD = ::T.let(nil, ::T.untyped)
  NORMAL = ::T.let(nil, ::T.untyped)
end

module Cairo::FontWeight
end

module Cairo::Format
  A1 = ::T.let(nil, ::T.untyped)
  A8 = ::T.let(nil, ::T.untyped)
  ARGB32 = ::T.let(nil, ::T.untyped)
  INVALID = ::T.let(nil, ::T.untyped)
  RGB16_565 = ::T.let(nil, ::T.untyped)
  RGB24 = ::T.let(nil, ::T.untyped)
  RGB30 = ::T.let(nil, ::T.untyped)
end

class Cairo::FreeTypeError
end

class Cairo::FreeTypeError
end

class Cairo::GLDevice
end

class Cairo::GLDevice
end

class Cairo::GLSurface
end

class Cairo::GLSurface
end

class Cairo::GLTextureSurface
end

class Cairo::GLTextureSurface
end

module Cairo::HintMetrics
  DEFAULT = ::T.let(nil, ::T.untyped)
  OFF = ::T.let(nil, ::T.untyped)
  ON = ::T.let(nil, ::T.untyped)
end

module Cairo::HintMetrics
end

module Cairo::HintStyle
  DEFAULT = ::T.let(nil, ::T.untyped)
  FULL = ::T.let(nil, ::T.untyped)
  MEDIUM = ::T.let(nil, ::T.untyped)
  NONE = ::T.let(nil, ::T.untyped)
  SLIGHT = ::T.let(nil, ::T.untyped)
end

module Cairo::HintStyle
end

class Cairo::InvalidClusters
end

class Cairo::InvalidClusters
end

class Cairo::InvalidContentError
end

class Cairo::InvalidContentError
end

class Cairo::InvalidDashError
end

class Cairo::InvalidDashError
end

class Cairo::InvalidDscCommentError
end

class Cairo::InvalidDscCommentError
end

class Cairo::InvalidFormatError
end

class Cairo::InvalidFormatError
end

class Cairo::InvalidIndexError
end

class Cairo::InvalidIndexError
end

class Cairo::InvalidMatrixError
end

class Cairo::InvalidMatrixError
end

class Cairo::InvalidMeshConstruction
end

class Cairo::InvalidMeshConstruction
end

class Cairo::InvalidPathDataError
end

class Cairo::InvalidPathDataError
end

class Cairo::InvalidPopGroupError
end

class Cairo::InvalidPopGroupError
end

class Cairo::InvalidRestoreError
end

class Cairo::InvalidRestoreError
end

class Cairo::InvalidSize
end

class Cairo::InvalidSize
end

class Cairo::InvalidSlant
end

class Cairo::InvalidSlant
end

class Cairo::InvalidStatusError
end

class Cairo::InvalidStatusError
end

class Cairo::InvalidStrideError
end

class Cairo::InvalidStrideError
end

class Cairo::InvalidStringError
end

class Cairo::InvalidStringError
end

class Cairo::InvalidVisualError
end

class Cairo::InvalidVisualError
end

class Cairo::InvalidWeight
end

class Cairo::InvalidWeight
end

class Cairo::JBIG2GlobalMissing
end

class Cairo::JBIG2GlobalMissing
end

module Cairo::LineCap
  BUTT = ::T.let(nil, ::T.untyped)
  ROUND = ::T.let(nil, ::T.untyped)
  SQUARE = ::T.let(nil, ::T.untyped)
end

module Cairo::LineCap
end

module Cairo::LineJoin
  BEVEL = ::T.let(nil, ::T.untyped)
  MITER = ::T.let(nil, ::T.untyped)
  ROUND = ::T.let(nil, ::T.untyped)
end

module Cairo::LineJoin
end

module Cairo::MimeType
  CCITT_FAX = ::T.let(nil, ::T.untyped)
  CCITT_FAX_PARAMS = ::T.let(nil, ::T.untyped)
  EPS = ::T.let(nil, ::T.untyped)
  EPS_PARAMS = ::T.let(nil, ::T.untyped)
  JBIG2 = ::T.let(nil, ::T.untyped)
  JBIG2_GLOBAL = ::T.let(nil, ::T.untyped)
  JBIG2_GLOBAL_ID = ::T.let(nil, ::T.untyped)
  JP2 = ::T.let(nil, ::T.untyped)
  JPEG = ::T.let(nil, ::T.untyped)
  PNG = ::T.let(nil, ::T.untyped)
  UNIQUE_ID = ::T.let(nil, ::T.untyped)
  URI = ::T.let(nil, ::T.untyped)
end

module Cairo::MimeType
end

class Cairo::NegativeCount
end

class Cairo::NegativeCount
end

class Cairo::NoCurrentPointError
end

class Cairo::NoCurrentPointError
end

class Cairo::NullPointerError
end

class Cairo::NullPointerError
end

module Cairo::Operator
  ADD = ::T.let(nil, ::T.untyped)
  ATOP = ::T.let(nil, ::T.untyped)
  CLEAR = ::T.let(nil, ::T.untyped)
  COLOR_BURN = ::T.let(nil, ::T.untyped)
  COLOR_DODGE = ::T.let(nil, ::T.untyped)
  DARKEN = ::T.let(nil, ::T.untyped)
  DEST = ::T.let(nil, ::T.untyped)
  DEST_ATOP = ::T.let(nil, ::T.untyped)
  DEST_IN = ::T.let(nil, ::T.untyped)
  DEST_OUT = ::T.let(nil, ::T.untyped)
  DEST_OVER = ::T.let(nil, ::T.untyped)
  DIFFERENCE = ::T.let(nil, ::T.untyped)
  EXCLUSION = ::T.let(nil, ::T.untyped)
  HARD_LIGHT = ::T.let(nil, ::T.untyped)
  HSL_COLOR = ::T.let(nil, ::T.untyped)
  HSL_HUE = ::T.let(nil, ::T.untyped)
  HSL_LUMINOSITY = ::T.let(nil, ::T.untyped)
  HSL_SATURATION = ::T.let(nil, ::T.untyped)
  IN = ::T.let(nil, ::T.untyped)
  LIGHTEN = ::T.let(nil, ::T.untyped)
  MULTIPLY = ::T.let(nil, ::T.untyped)
  OUT = ::T.let(nil, ::T.untyped)
  OVER = ::T.let(nil, ::T.untyped)
  OVERLAY = ::T.let(nil, ::T.untyped)
  SATURATE = ::T.let(nil, ::T.untyped)
  SCREEN = ::T.let(nil, ::T.untyped)
  SOFT_LIGHT = ::T.let(nil, ::T.untyped)
  SOURCE = ::T.let(nil, ::T.untyped)
  XOR = ::T.let(nil, ::T.untyped)
end

module Cairo::Operator
end

module Cairo::PDFMetadata
  AUTHOR = ::T.let(nil, ::T.untyped)
  CREATE_DATE = ::T.let(nil, ::T.untyped)
  CREATOR = ::T.let(nil, ::T.untyped)
  KEYWORDS = ::T.let(nil, ::T.untyped)
  MOD_DATE = ::T.let(nil, ::T.untyped)
  SUBJECT = ::T.let(nil, ::T.untyped)
  TITLE = ::T.let(nil, ::T.untyped)
end

module Cairo::PDFMetadata
end

module Cairo::PDFOutline
  ROOT = ::T.let(nil, ::T.untyped)
end

module Cairo::PDFOutline
end

module Cairo::PDFOutlineFlags
  BOLD = ::T.let(nil, ::T.untyped)
  ITALIC = ::T.let(nil, ::T.untyped)
  OPEN = ::T.let(nil, ::T.untyped)
end

module Cairo::PDFOutlineFlags
end

module Cairo::PDFVersion
  VERSION_1_4 = ::T.let(nil, ::T.untyped)
  VERSION_1_5 = ::T.let(nil, ::T.untyped)
end

class Cairo::PNGError
end

class Cairo::PNGError
end

module Cairo::PSLevel
  LEVEL_2 = ::T.let(nil, ::T.untyped)
  LEVEL_3 = ::T.let(nil, ::T.untyped)
end

class Cairo::Paper
  A0 = ::T.let(nil, ::T.untyped)
  A0_LANDSCAPE = ::T.let(nil, ::T.untyped)
  A1 = ::T.let(nil, ::T.untyped)
  A10 = ::T.let(nil, ::T.untyped)
  A10_LANDSCAPE = ::T.let(nil, ::T.untyped)
  A1_LANDSCAPE = ::T.let(nil, ::T.untyped)
  A2 = ::T.let(nil, ::T.untyped)
  A2_LANDSCAPE = ::T.let(nil, ::T.untyped)
  A3 = ::T.let(nil, ::T.untyped)
  A3_LANDSCAPE = ::T.let(nil, ::T.untyped)
  A4 = ::T.let(nil, ::T.untyped)
  A4_LANDSCAPE = ::T.let(nil, ::T.untyped)
  A5 = ::T.let(nil, ::T.untyped)
  A5_LANDSCAPE = ::T.let(nil, ::T.untyped)
  A6 = ::T.let(nil, ::T.untyped)
  A6_LANDSCAPE = ::T.let(nil, ::T.untyped)
  A7 = ::T.let(nil, ::T.untyped)
  A7_LANDSCAPE = ::T.let(nil, ::T.untyped)
  A8 = ::T.let(nil, ::T.untyped)
  A8_LANDSCAPE = ::T.let(nil, ::T.untyped)
  A9 = ::T.let(nil, ::T.untyped)
  A9_LANDSCAPE = ::T.let(nil, ::T.untyped)
  B0 = ::T.let(nil, ::T.untyped)
  B0_LANDSCAPE = ::T.let(nil, ::T.untyped)
  B1 = ::T.let(nil, ::T.untyped)
  B10 = ::T.let(nil, ::T.untyped)
  B10_LANDSCAPE = ::T.let(nil, ::T.untyped)
  B1_LANDSCAPE = ::T.let(nil, ::T.untyped)
  B2 = ::T.let(nil, ::T.untyped)
  B2_LANDSCAPE = ::T.let(nil, ::T.untyped)
  B3 = ::T.let(nil, ::T.untyped)
  B3_LANDSCAPE = ::T.let(nil, ::T.untyped)
  B4 = ::T.let(nil, ::T.untyped)
  B4_LANDSCAPE = ::T.let(nil, ::T.untyped)
  B5 = ::T.let(nil, ::T.untyped)
  B5_LANDSCAPE = ::T.let(nil, ::T.untyped)
  B6 = ::T.let(nil, ::T.untyped)
  B6_LANDSCAPE = ::T.let(nil, ::T.untyped)
  B7 = ::T.let(nil, ::T.untyped)
  B7_LANDSCAPE = ::T.let(nil, ::T.untyped)
  B8 = ::T.let(nil, ::T.untyped)
  B8_LANDSCAPE = ::T.let(nil, ::T.untyped)
  B9 = ::T.let(nil, ::T.untyped)
  B9_LANDSCAPE = ::T.let(nil, ::T.untyped)
  ISO_B0 = ::T.let(nil, ::T.untyped)
  ISO_B0_LANDSCAPE = ::T.let(nil, ::T.untyped)
  ISO_B1 = ::T.let(nil, ::T.untyped)
  ISO_B10 = ::T.let(nil, ::T.untyped)
  ISO_B10_LANDSCAPE = ::T.let(nil, ::T.untyped)
  ISO_B1_LANDSCAPE = ::T.let(nil, ::T.untyped)
  ISO_B2 = ::T.let(nil, ::T.untyped)
  ISO_B2_LANDSCAPE = ::T.let(nil, ::T.untyped)
  ISO_B3 = ::T.let(nil, ::T.untyped)
  ISO_B3_LANDSCAPE = ::T.let(nil, ::T.untyped)
  ISO_B4 = ::T.let(nil, ::T.untyped)
  ISO_B4_LANDSCAPE = ::T.let(nil, ::T.untyped)
  ISO_B5 = ::T.let(nil, ::T.untyped)
  ISO_B5_LANDSCAPE = ::T.let(nil, ::T.untyped)
  ISO_B6 = ::T.let(nil, ::T.untyped)
  ISO_B6_LANDSCAPE = ::T.let(nil, ::T.untyped)
  ISO_B7 = ::T.let(nil, ::T.untyped)
  ISO_B7_LANDSCAPE = ::T.let(nil, ::T.untyped)
  ISO_B8 = ::T.let(nil, ::T.untyped)
  ISO_B8_LANDSCAPE = ::T.let(nil, ::T.untyped)
  ISO_B9 = ::T.let(nil, ::T.untyped)
  ISO_B9_LANDSCAPE = ::T.let(nil, ::T.untyped)
  JAPANESE_POSTCARD = ::T.let(nil, ::T.untyped)
  JAPANESE_POSTCARD_LANDSCAPE = ::T.let(nil, ::T.untyped)
  JIS_B0 = ::T.let(nil, ::T.untyped)
  JIS_B0_LANDSCAPE = ::T.let(nil, ::T.untyped)
  JIS_B1 = ::T.let(nil, ::T.untyped)
  JIS_B10 = ::T.let(nil, ::T.untyped)
  JIS_B10_LANDSCAPE = ::T.let(nil, ::T.untyped)
  JIS_B1_LANDSCAPE = ::T.let(nil, ::T.untyped)
  JIS_B2 = ::T.let(nil, ::T.untyped)
  JIS_B2_LANDSCAPE = ::T.let(nil, ::T.untyped)
  JIS_B3 = ::T.let(nil, ::T.untyped)
  JIS_B3_LANDSCAPE = ::T.let(nil, ::T.untyped)
  JIS_B4 = ::T.let(nil, ::T.untyped)
  JIS_B4_LANDSCAPE = ::T.let(nil, ::T.untyped)
  JIS_B5 = ::T.let(nil, ::T.untyped)
  JIS_B5_LANDSCAPE = ::T.let(nil, ::T.untyped)
  JIS_B6 = ::T.let(nil, ::T.untyped)
  JIS_B6_LANDSCAPE = ::T.let(nil, ::T.untyped)
  JIS_B7 = ::T.let(nil, ::T.untyped)
  JIS_B7_LANDSCAPE = ::T.let(nil, ::T.untyped)
  JIS_B8 = ::T.let(nil, ::T.untyped)
  JIS_B8_LANDSCAPE = ::T.let(nil, ::T.untyped)
  JIS_B9 = ::T.let(nil, ::T.untyped)
  JIS_B9_LANDSCAPE = ::T.let(nil, ::T.untyped)
  LEGAL = ::T.let(nil, ::T.untyped)
  LEGAL_LANDSCAPE = ::T.let(nil, ::T.untyped)
  LETTER = ::T.let(nil, ::T.untyped)
  LETTER_LANDSCAPE = ::T.let(nil, ::T.untyped)
  TABLOID = ::T.let(nil, ::T.untyped)
  TABLOID_LANDSCAPE = ::T.let(nil, ::T.untyped)
end

class Cairo::Path
  include ::Enumerable
  CLOSE_PATH = ::T.let(nil, ::T.untyped)
  CURVE_TO = ::T.let(nil, ::T.untyped)
  LINE_TO = ::T.let(nil, ::T.untyped)
  MOVE_TO = ::T.let(nil, ::T.untyped)
end

class Cairo::PathData
  include ::Enumerable
end

module Cairo::PathDataType
  CLOSE_PATH = ::T.let(nil, ::T.untyped)
  CURVE_TO = ::T.let(nil, ::T.untyped)
  LINE_TO = ::T.let(nil, ::T.untyped)
  MOVE_TO = ::T.let(nil, ::T.untyped)
end

module Cairo::PathDataType
end

class Cairo::PatternTypeMismatchError
end

class Cairo::PatternTypeMismatchError
end

class Cairo::QtSurface
end

class Cairo::QtSurface
end

class Cairo::QuartzImageSurface
end

class Cairo::QuartzImageSurface
end

class Cairo::QuartzSurface
end

class Cairo::QuartzSurface
end

class Cairo::ReadError
end

class Cairo::ReadError
end

module Cairo::RegionOverlap
  IN = ::T.let(nil, ::T.untyped)
  OUT = ::T.let(nil, ::T.untyped)
  PART = ::T.let(nil, ::T.untyped)
end

module Cairo::RegionOverlap
end

class Cairo::SVGSurface
  VERSION_1_1 = ::T.let(nil, ::T.untyped)
  VERSION_1_2 = ::T.let(nil, ::T.untyped)
end

module Cairo::SVGUnit
  CM = ::T.let(nil, ::T.untyped)
  EM = ::T.let(nil, ::T.untyped)
  EX = ::T.let(nil, ::T.untyped)
  IN = ::T.let(nil, ::T.untyped)
  MM = ::T.let(nil, ::T.untyped)
  PC = ::T.let(nil, ::T.untyped)
  PERCENT = ::T.let(nil, ::T.untyped)
  PT = ::T.let(nil, ::T.untyped)
  PX = ::T.let(nil, ::T.untyped)
  USER = ::T.let(nil, ::T.untyped)
end

module Cairo::SVGUnit
end

module Cairo::SVGVersion
  VERSION_1_1 = ::T.let(nil, ::T.untyped)
  VERSION_1_2 = ::T.let(nil, ::T.untyped)
end

module Cairo::ScriptMode
  ASCII = ::T.let(nil, ::T.untyped)
  BINARY = ::T.let(nil, ::T.untyped)
end

module Cairo::ScriptMode
end

class Cairo::SubSurface
end

class Cairo::SubSurface
end

module Cairo::SubpixelOrder
  BGR = ::T.let(nil, ::T.untyped)
  DEFAULT = ::T.let(nil, ::T.untyped)
  RGB = ::T.let(nil, ::T.untyped)
  VBGR = ::T.let(nil, ::T.untyped)
  VRGB = ::T.let(nil, ::T.untyped)
end

module Cairo::SubpixelOrder
end

class Cairo::SurfaceFinishedError
end

class Cairo::SurfaceFinishedError
end

class Cairo::SurfaceTypeMismatchError
end

class Cairo::SurfaceTypeMismatchError
end

module Cairo::Tag
  DEST = ::T.let(nil, ::T.untyped)
  LINK = ::T.let(nil, ::T.untyped)
end

module Cairo::Tag
end

class Cairo::TagError
end

class Cairo::TagError
end

class Cairo::TempFileError
end

class Cairo::TempFileError
end

module Cairo::TextClusterFlag
  BACKWARD = ::T.let(nil, ::T.untyped)
end

module Cairo::TextClusterFlag
end

class Cairo::UserFontError
end

class Cairo::UserFontError
end

class Cairo::UserFontImmutable
end

class Cairo::UserFontImmutable
end

class Cairo::UserFontNotImplemented
end

class Cairo::UserFontNotImplemented
end

class Cairo::VGSurface
end

class Cairo::VGSurface
end

Cairo::WIN32Surface = Cairo::Win32Surface

class Cairo::Win32Device
end

class Cairo::Win32Device
end

class Cairo::Win32GDIError
end

class Cairo::Win32GDIError
end

class Cairo::Win32PrintingSurface
end

class Cairo::Win32PrintingSurface
end

class Cairo::Win32Surface
end

class Cairo::Win32Surface
end

class Cairo::WriteError
end

class Cairo::WriteError
end

class Cairo::XCBDevice
end

class Cairo::XCBDevice
end

class Cairo::XCBSurface
end

class Cairo::XCBSurface
end

class Cairo::XLibSurface
end

class Cairo::XLibSurface
end

class Cairo::XMLDevice
end

class Cairo::XMLDevice
end

class Cairo::XMLSurface
end

class Cairo::XMLSurface
end

class Cairo::XlibDevice
end

class Cairo::XlibDevice
end

module CairoGObject
  BUILD_VERSION = ::T.let(nil, ::T.untyped)
  LOG_DOMAIN = ::T.let(nil, ::T.untyped)
end

class CairoGObject::Antialias
  BEST = ::T.let(nil, ::T.untyped)
  DEFAULT = ::T.let(nil, ::T.untyped)
  FAST = ::T.let(nil, ::T.untyped)
  GOOD = ::T.let(nil, ::T.untyped)
  GRAY = ::T.let(nil, ::T.untyped)
  NONE = ::T.let(nil, ::T.untyped)
  SUBPIXEL = ::T.let(nil, ::T.untyped)
end

class CairoGObject::Content
  ALPHA = ::T.let(nil, ::T.untyped)
  COLOR = ::T.let(nil, ::T.untyped)
  COLOR_ALPHA = ::T.let(nil, ::T.untyped)
end

class CairoGObject::DeviceType
  DRM = ::T.let(nil, ::T.untyped)
  GL = ::T.let(nil, ::T.untyped)
  SCRIPT = ::T.let(nil, ::T.untyped)
  XCB = ::T.let(nil, ::T.untyped)
  XLIB = ::T.let(nil, ::T.untyped)
  XML = ::T.let(nil, ::T.untyped)
end

class CairoGObject::Extend
  NONE = ::T.let(nil, ::T.untyped)
  PAD = ::T.let(nil, ::T.untyped)
  REFLECT = ::T.let(nil, ::T.untyped)
  REPEAT = ::T.let(nil, ::T.untyped)
end

class CairoGObject::FillRule
  EVEN_ODD = ::T.let(nil, ::T.untyped)
  WINDING = ::T.let(nil, ::T.untyped)
end

class CairoGObject::Filter
  BEST = ::T.let(nil, ::T.untyped)
  BILINEAR = ::T.let(nil, ::T.untyped)
  FAST = ::T.let(nil, ::T.untyped)
  GAUSSIAN = ::T.let(nil, ::T.untyped)
  GOOD = ::T.let(nil, ::T.untyped)
  NEAREST = ::T.let(nil, ::T.untyped)
end

class CairoGObject::FontSlant
  ITALIC = ::T.let(nil, ::T.untyped)
  NORMAL = ::T.let(nil, ::T.untyped)
  OBLIQUE = ::T.let(nil, ::T.untyped)
end

class CairoGObject::FontType
  FT = ::T.let(nil, ::T.untyped)
  QUARTZ = ::T.let(nil, ::T.untyped)
  TOY = ::T.let(nil, ::T.untyped)
  USER = ::T.let(nil, ::T.untyped)
  WIN32 = ::T.let(nil, ::T.untyped)
end

class CairoGObject::FontWeight
  BOLD = ::T.let(nil, ::T.untyped)
  NORMAL = ::T.let(nil, ::T.untyped)
end

class CairoGObject::Format
  A1 = ::T.let(nil, ::T.untyped)
  A8 = ::T.let(nil, ::T.untyped)
  ARGB32 = ::T.let(nil, ::T.untyped)
  INVALID = ::T.let(nil, ::T.untyped)
  RGB16_565 = ::T.let(nil, ::T.untyped)
  RGB24 = ::T.let(nil, ::T.untyped)
end

class CairoGObject::HintMetrics
  DEFAULT = ::T.let(nil, ::T.untyped)
  OFF = ::T.let(nil, ::T.untyped)
  ON = ::T.let(nil, ::T.untyped)
end

class CairoGObject::HintStyle
  DEFAULT = ::T.let(nil, ::T.untyped)
  FULL = ::T.let(nil, ::T.untyped)
  MEDIUM = ::T.let(nil, ::T.untyped)
  NONE = ::T.let(nil, ::T.untyped)
  SLIGHT = ::T.let(nil, ::T.untyped)
end

class CairoGObject::LineCap
  BUTT = ::T.let(nil, ::T.untyped)
  ROUND = ::T.let(nil, ::T.untyped)
  SQUARE = ::T.let(nil, ::T.untyped)
end

class CairoGObject::LineJoin
  BEVEL = ::T.let(nil, ::T.untyped)
  MITER = ::T.let(nil, ::T.untyped)
  ROUND = ::T.let(nil, ::T.untyped)
end

class CairoGObject::Operator
  ADD = ::T.let(nil, ::T.untyped)
  ATOP = ::T.let(nil, ::T.untyped)
  CLEAR = ::T.let(nil, ::T.untyped)
  COLOR_BURN = ::T.let(nil, ::T.untyped)
  COLOR_DODGE = ::T.let(nil, ::T.untyped)
  DARKEN = ::T.let(nil, ::T.untyped)
  DEST = ::T.let(nil, ::T.untyped)
  DEST_ATOP = ::T.let(nil, ::T.untyped)
  DEST_IN = ::T.let(nil, ::T.untyped)
  DEST_OUT = ::T.let(nil, ::T.untyped)
  DEST_OVER = ::T.let(nil, ::T.untyped)
  DIFFERENCE = ::T.let(nil, ::T.untyped)
  EXCLUSION = ::T.let(nil, ::T.untyped)
  HARD_LIGHT = ::T.let(nil, ::T.untyped)
  HSL_COLOR = ::T.let(nil, ::T.untyped)
  HSL_HUE = ::T.let(nil, ::T.untyped)
  HSL_LUMINOSITY = ::T.let(nil, ::T.untyped)
  HSL_SATURATION = ::T.let(nil, ::T.untyped)
  IN = ::T.let(nil, ::T.untyped)
  LIGHTEN = ::T.let(nil, ::T.untyped)
  MULTIPLY = ::T.let(nil, ::T.untyped)
  OUT = ::T.let(nil, ::T.untyped)
  OVER = ::T.let(nil, ::T.untyped)
  OVERLAY = ::T.let(nil, ::T.untyped)
  SATURATE = ::T.let(nil, ::T.untyped)
  SCREEN = ::T.let(nil, ::T.untyped)
  SOFT_LIGHT = ::T.let(nil, ::T.untyped)
  SOURCE = ::T.let(nil, ::T.untyped)
  XOR = ::T.let(nil, ::T.untyped)
end

class CairoGObject::PathDataType
  CLOSE_PATH = ::T.let(nil, ::T.untyped)
  CURVE_TO = ::T.let(nil, ::T.untyped)
  LINE_TO = ::T.let(nil, ::T.untyped)
  MOVE_TO = ::T.let(nil, ::T.untyped)
end

class CairoGObject::PatternType
  LINEAR = ::T.let(nil, ::T.untyped)
  MESH = ::T.let(nil, ::T.untyped)
  RADIAL = ::T.let(nil, ::T.untyped)
  SOLID = ::T.let(nil, ::T.untyped)
  SURFACE = ::T.let(nil, ::T.untyped)
end

class CairoGObject::RegionOverlap
  IN = ::T.let(nil, ::T.untyped)
  OUT = ::T.let(nil, ::T.untyped)
  PART = ::T.let(nil, ::T.untyped)
end

class CairoGObject::Status
  CLIP_NOT_REPRESENTABLE = ::T.let(nil, ::T.untyped)
  DEVICE_ERROR = ::T.let(nil, ::T.untyped)
  DEVICE_FINISHED = ::T.let(nil, ::T.untyped)
  DEVICE_TYPE_MISMATCH = ::T.let(nil, ::T.untyped)
  FILE_NOT_FOUND = ::T.let(nil, ::T.untyped)
  FONT_TYPE_MISMATCH = ::T.let(nil, ::T.untyped)
  FREETYPE_ERROR = ::T.let(nil, ::T.untyped)
  INVALID_CLUSTERS = ::T.let(nil, ::T.untyped)
  INVALID_CONTENT = ::T.let(nil, ::T.untyped)
  INVALID_DASH = ::T.let(nil, ::T.untyped)
  INVALID_DSC_COMMENT = ::T.let(nil, ::T.untyped)
  INVALID_FORMAT = ::T.let(nil, ::T.untyped)
  INVALID_INDEX = ::T.let(nil, ::T.untyped)
  INVALID_MATRIX = ::T.let(nil, ::T.untyped)
  INVALID_MESH_CONSTRUCTION = ::T.let(nil, ::T.untyped)
  INVALID_PATH_DATA = ::T.let(nil, ::T.untyped)
  INVALID_POP_GROUP = ::T.let(nil, ::T.untyped)
  INVALID_RESTORE = ::T.let(nil, ::T.untyped)
  INVALID_SIZE = ::T.let(nil, ::T.untyped)
  INVALID_SLANT = ::T.let(nil, ::T.untyped)
  INVALID_STATUS = ::T.let(nil, ::T.untyped)
  INVALID_STRIDE = ::T.let(nil, ::T.untyped)
  INVALID_STRING = ::T.let(nil, ::T.untyped)
  INVALID_VISUAL = ::T.let(nil, ::T.untyped)
  INVALID_WEIGHT = ::T.let(nil, ::T.untyped)
  JBIG2_GLOBAL_MISSING = ::T.let(nil, ::T.untyped)
  LAST_STATUS = ::T.let(nil, ::T.untyped)
  NEGATIVE_COUNT = ::T.let(nil, ::T.untyped)
  NO_CURRENT_POINT = ::T.let(nil, ::T.untyped)
  NO_MEMORY = ::T.let(nil, ::T.untyped)
  NULL_POINTER = ::T.let(nil, ::T.untyped)
  PATTERN_TYPE_MISMATCH = ::T.let(nil, ::T.untyped)
  PNG_ERROR = ::T.let(nil, ::T.untyped)
  READ_ERROR = ::T.let(nil, ::T.untyped)
  SUCCESS = ::T.let(nil, ::T.untyped)
  SURFACE_FINISHED = ::T.let(nil, ::T.untyped)
  SURFACE_TYPE_MISMATCH = ::T.let(nil, ::T.untyped)
  TEMP_FILE_ERROR = ::T.let(nil, ::T.untyped)
  USER_FONT_ERROR = ::T.let(nil, ::T.untyped)
  USER_FONT_IMMUTABLE = ::T.let(nil, ::T.untyped)
  USER_FONT_NOT_IMPLEMENTED = ::T.let(nil, ::T.untyped)
  WIN32_GDI_ERROR = ::T.let(nil, ::T.untyped)
  WRITE_ERROR = ::T.let(nil, ::T.untyped)
end

class CairoGObject::SubpixelOrder
  BGR = ::T.let(nil, ::T.untyped)
  DEFAULT = ::T.let(nil, ::T.untyped)
  RGB = ::T.let(nil, ::T.untyped)
  VBGR = ::T.let(nil, ::T.untyped)
  VRGB = ::T.let(nil, ::T.untyped)
end

class CairoGObject::SurfaceType
  BEOS = ::T.let(nil, ::T.untyped)
  DIRECTFB = ::T.let(nil, ::T.untyped)
  DRM = ::T.let(nil, ::T.untyped)
  GL = ::T.let(nil, ::T.untyped)
  GLITZ = ::T.let(nil, ::T.untyped)
  IMAGE = ::T.let(nil, ::T.untyped)
  OS2 = ::T.let(nil, ::T.untyped)
  PDF = ::T.let(nil, ::T.untyped)
  PS = ::T.let(nil, ::T.untyped)
  QT = ::T.let(nil, ::T.untyped)
  QUARTZ = ::T.let(nil, ::T.untyped)
  QUARTZ_IMAGE = ::T.let(nil, ::T.untyped)
  RECORDING = ::T.let(nil, ::T.untyped)
  SCRIPT = ::T.let(nil, ::T.untyped)
  SKIA = ::T.let(nil, ::T.untyped)
  SVG = ::T.let(nil, ::T.untyped)
  TEE = ::T.let(nil, ::T.untyped)
  VG = ::T.let(nil, ::T.untyped)
  WIN32 = ::T.let(nil, ::T.untyped)
  WIN32_PRINTING = ::T.let(nil, ::T.untyped)
  XCB = ::T.let(nil, ::T.untyped)
  XLIB = ::T.let(nil, ::T.untyped)
  XML = ::T.let(nil, ::T.untyped)
end

class CairoGObject::TextClusterFlags
  BACKWARD = ::T.let(nil, ::T.untyped)
end

class Class
  def class_attribute(*attrs, instance_accessor: T.unsafe(nil), instance_reader: T.unsafe(nil), instance_writer: T.unsafe(nil), instance_predicate: T.unsafe(nil), default: T.unsafe(nil)); end

  def json_creatable?(); end
end

module ClassyHash
  NO_VALUE = ::T.let(nil, ::T.untyped)
end

ClassyHash::G = ClassyHash::Generate

module CodeRay
  CODERAY_PATH = ::T.let(nil, ::T.untyped)
  TokenKinds = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class CodeRay::Duo
  def call(code, options=T.unsafe(nil)); end

  def encode(code, options=T.unsafe(nil)); end

  def encoder(); end

  def format(); end

  def format=(format); end

  def highlight(code, options=T.unsafe(nil)); end

  def initialize(lang=T.unsafe(nil), format=T.unsafe(nil), options=T.unsafe(nil)); end

  def lang(); end

  def lang=(lang); end

  def options(); end

  def options=(options); end

  def scanner(); end
end

class CodeRay::Duo
  def self.[](*arg); end
end

class CodeRay::Encoders::Encoder
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

CodeRay::Encoders::Encoder::PLUGIN_HOST = CodeRay::Encoders

class CodeRay::Encoders::Terminal
  TOKEN_COLORS = ::T.let(nil, ::T.untyped)
end

module CodeRay::FileType
  TypeFromExt = ::T.let(nil, ::T.untyped)
  TypeFromName = ::T.let(nil, ::T.untyped)
  TypeFromShebang = ::T.let(nil, ::T.untyped)
end

class CodeRay::FileType::UnknownFileType
end

class CodeRay::FileType::UnknownFileType
end

module CodeRay::FileType
  def self.[](filename, read_shebang=T.unsafe(nil)); end

  def self.fetch(filename, default=T.unsafe(nil), read_shebang=T.unsafe(nil)); end

  def self.type_from_shebang(filename); end
end

module CodeRay::PluginHost
  PLUGIN_HOSTS = ::T.let(nil, ::T.untyped)
  PLUGIN_HOSTS_BY_ID = ::T.let(nil, ::T.untyped)
end

module CodeRay::Scanners
end

class CodeRay::Scanners::Scanner
  include ::Enumerable
  def binary_string(); end

  def column(pos=T.unsafe(nil)); end

  def each(&block); end

  def file_extension(); end

  def initialize(code=T.unsafe(nil), options=T.unsafe(nil)); end

  def lang(); end

  def line(pos=T.unsafe(nil)); end

  def raise_inspect(message, tokens, state=T.unsafe(nil), ambit=T.unsafe(nil), backtrace=T.unsafe(nil)); end

  def raise_inspect_arguments(message, tokens, state, ambit); end

  def reset_instance(); end

  def scan_rest(); end

  def scan_tokens(tokens, options); end

  def scanner_state_info(state); end

  def set_string_from_source(source); end

  def set_tokens_from_options(options); end

  def setup(); end

  def state(); end

  def state=(state); end

  def string=(code); end

  def tokenize(source=T.unsafe(nil), options=T.unsafe(nil)); end

  def tokens(); end

  def tokens_last(tokens, n); end

  def tokens_size(tokens); end
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
  KINDS_NOT_LOC = ::T.let(nil, ::T.untyped)
  SCANNER_STATE_INFO = ::T.let(nil, ::T.untyped)
  SCAN_ERROR_MESSAGE = ::T.let(nil, ::T.untyped)
end

CodeRay::Scanners::Scanner::PLUGIN_HOST = CodeRay::Scanners

class CodeRay::Scanners::Scanner::ScanError
end

class CodeRay::Scanners::Scanner::ScanError
end

class CodeRay::Scanners::Scanner
  extend ::CodeRay::Plugin
  def self.encode_with_encoding(code, target_encoding); end

  def self.encoding(name=T.unsafe(nil)); end

  def self.file_extension(extension=T.unsafe(nil)); end

  def self.guess_encoding(s); end

  def self.lang(); end

  def self.normalize(code); end

  def self.to_unix(code); end
end

module CodeRay::Scanners
  extend ::CodeRay::PluginHost
end

module CodeRay::Styles
end

class CodeRay::Styles::Style
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

CodeRay::Styles::Style::PLUGIN_HOST = CodeRay::Styles

class CodeRay::Styles::Style
  extend ::CodeRay::Plugin
end

module CodeRay::Styles
  extend ::CodeRay::PluginHost
end

class CodeRay::Tokens
  def begin_group(kind); end

  def begin_line(kind); end

  def count(); end

  def encode(encoder, options=T.unsafe(nil)); end

  def end_group(kind); end

  def end_line(kind); end

  def method_missing(meth, options=T.unsafe(nil)); end

  def scanner(); end

  def scanner=(scanner); end

  def split_into_parts(*sizes); end

  def text_token(*arg); end

  def to_s(); end

  def tokens(*arg); end
end

class CodeRay::Tokens
end

class CodeRay::TokensProxy
  def block(); end

  def block=(block); end

  def each(*args, &blk); end

  def encode(encoder, options=T.unsafe(nil)); end

  def initialize(input, lang, options=T.unsafe(nil), block=T.unsafe(nil)); end

  def input(); end

  def input=(input); end

  def lang(); end

  def lang=(lang); end

  def method_missing(method, *args, &blk); end

  def options(); end

  def options=(options); end

  def scanner(); end

  def tokens(); end
end

class CodeRay::TokensProxy
end

module Colors
  WHITE_POINT_D65 = ::T.let(nil, ::T.untyped)
end

module Colors::ColorData
  BASE_COLORS = ::T.let(nil, ::T.untyped)
  CSS4_COLORS = ::T.let(nil, ::T.untyped)
  DEFAULT_COLOR_CYCLE = ::T.let(nil, ::T.untyped)
  TABLEAU_COLORS = ::T.let(nil, ::T.untyped)
  XKCD_COLORS = ::T.let(nil, ::T.untyped)
end

class Colors::Colormap
  PNG_HEIGHT = ::T.let(nil, ::T.untyped)
  PNG_WIDTH = ::T.let(nil, ::T.untyped)
end

module Colors::ColormapRegistry
  BUILTIN_COLORMAPS = ::T.let(nil, ::T.untyped)
  LUT_SIZE = ::T.let(nil, ::T.untyped)
end

module Colors::Convert
  B_XYZ = ::T.let(nil, ::T.untyped)
  B_xyY = ::T.let(nil, ::T.untyped)
  D65_XYZ = ::T.let(nil, ::T.untyped)
  D65_xyY = ::T.let(nil, ::T.untyped)
  DEG2RAD = ::T.let(nil, ::T.untyped)
  G_XYZ = ::T.let(nil, ::T.untyped)
  G_xyY = ::T.let(nil, ::T.untyped)
  M_P = ::T.let(nil, ::T.untyped)
  M_RGB_XYZ = ::T.let(nil, ::T.untyped)
  M_S = ::T.let(nil, ::T.untyped)
  M_XYZ_RGB = ::T.let(nil, ::T.untyped)
  RGB2XYZ = ::T.let(nil, ::T.untyped)
  R_XYZ = ::T.let(nil, ::T.untyped)
  R_xyY = ::T.let(nil, ::T.untyped)
end

module Colors::NamedColors
  MAPPING = ::T.let(nil, ::T.untyped)
end

class Colors::XYZ
  EPSILON = ::T.let(nil, ::T.untyped)
  KAPPA = ::T.let(nil, ::T.untyped)
end

module Concurrent
  NULL = ::T.let(nil, ::T.untyped)
  NULL_LOGGER = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Concurrent::AbstractExecutorService
  FALLBACK_POLICIES = ::T.let(nil, ::T.untyped)
end

Concurrent::Collection::MapImplementation = Concurrent::Collection::MriMapBackend

class Concurrent::ConcurrentUpdateError
  CONC_UP_ERR_BACKTRACE = ::T.let(nil, ::T.untyped)
end

class Concurrent::LockFreeStack
  EMPTY = ::T.let(nil, ::T.untyped)
end

class Concurrent::MVar
  EMPTY = ::T.let(nil, ::T.untyped)
  TIMEOUT = ::T.let(nil, ::T.untyped)
end

class Concurrent::Maybe
  NONE = ::T.let(nil, ::T.untyped)
end

module Concurrent::Promises::InternalStates
  PENDING = ::T.let(nil, ::T.untyped)
  RESERVED = ::T.let(nil, ::T.untyped)
  RESOLVED = ::T.let(nil, ::T.untyped)
end

class Concurrent::ReadWriteLock
  MAX_READERS = ::T.let(nil, ::T.untyped)
  MAX_WRITERS = ::T.let(nil, ::T.untyped)
  RUNNING_WRITER = ::T.let(nil, ::T.untyped)
  WAITING_WRITER = ::T.let(nil, ::T.untyped)
end

class Concurrent::ReentrantReadWriteLock
  MAX_READERS = ::T.let(nil, ::T.untyped)
  MAX_WRITERS = ::T.let(nil, ::T.untyped)
  READER_BITS = ::T.let(nil, ::T.untyped)
  READ_LOCK_MASK = ::T.let(nil, ::T.untyped)
  RUNNING_WRITER = ::T.let(nil, ::T.untyped)
  WAITING_WRITER = ::T.let(nil, ::T.untyped)
  WRITER_BITS = ::T.let(nil, ::T.untyped)
  WRITE_LOCK_HELD = ::T.let(nil, ::T.untyped)
  WRITE_LOCK_MASK = ::T.let(nil, ::T.untyped)
end

class Concurrent::RubyThreadPoolExecutor
  DEFAULT_MAX_POOL_SIZE = ::T.let(nil, ::T.untyped)
  DEFAULT_MAX_QUEUE_SIZE = ::T.let(nil, ::T.untyped)
  DEFAULT_MIN_POOL_SIZE = ::T.let(nil, ::T.untyped)
  DEFAULT_SYNCHRONOUS = ::T.let(nil, ::T.untyped)
  DEFAULT_THREAD_IDLETIMEOUT = ::T.let(nil, ::T.untyped)
end

class Concurrent::SerializedExecutionDelegator
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

Concurrent::Synchronization::Volatile = Concurrent::Synchronization::MriAttrVolatile

class Concurrent::SynchronizedDelegator
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

module Concurrent::ThreadSafe::Util
  CPU_COUNT = ::T.let(nil, ::T.untyped)
  FIXNUM_BIT_SIZE = ::T.let(nil, ::T.untyped)
  MAX_INT = ::T.let(nil, ::T.untyped)
end

class Concurrent::TimerTask
  EXECUTION_INTERVAL = ::T.let(nil, ::T.untyped)
  TIMEOUT_INTERVAL = ::T.let(nil, ::T.untyped)
end

class Concurrent::Transaction
  ABORTED = ::T.let(nil, ::T.untyped)
end

module Concurrent::Utility::NativeInteger
  MAX_VALUE = ::T.let(nil, ::T.untyped)
  MIN_VALUE = ::T.let(nil, ::T.untyped)
end

module Coveralls
  VERSION = ::T.let(nil, ::T.untyped)
end

class Coveralls::API
  API_BASE = ::T.let(nil, ::T.untyped)
  API_DOMAIN = ::T.let(nil, ::T.untyped)
  API_HOST = ::T.let(nil, ::T.untyped)
  API_PROTOCOL = ::T.let(nil, ::T.untyped)
end

class DRb::DRbArray
  def _dump(lv); end
end

class DRb::DRbArray
  def self._load(s); end
end

class DRb::DRbConn
  def alive?(); end

  def close(); end

  def initialize(remote_uri); end

  def send_message(ref, msg_id, arg, block); end

  def uri(); end
end

class DRb::DRbConn
  def self.make_pool(); end

  def self.open(remote_uri); end

  def self.stop_pool(); end
end

class DRb::DRbMessage
  def dump(obj, error=T.unsafe(nil)); end

  def initialize(config); end

  def load(soc); end

  def recv_reply(stream); end

  def recv_request(stream); end

  def send_reply(stream, succ, result); end

  def send_request(stream, ref, msg_id, arg, b); end
end

class DRb::DRbObject
  def ==(other); end

  def eql?(other); end

  def initialize(obj, uri=T.unsafe(nil)); end
end

class DRb::DRbObject
  def self.prepare_backtrace(uri, result); end

  def self.with_friend(uri); end
end

module DRb::DRbProtocol
  def self.auto_load(uri); end
end

class DRb::DRbRemoteError
  def initialize(error); end
end

class DRb::DRbServer
  def initialize(uri=T.unsafe(nil), front=T.unsafe(nil), config_or_acl=T.unsafe(nil)); end

  def safe_level(); end
end

class DRb::DRbServer::InvokeMethod
  include ::DRb::DRbServer::InvokeMethod18Mixin
  def initialize(drb_server, client); end

  def perform(); end
end

class DRb::DRbServer::InvokeMethod
end

module DRb::DRbServer::InvokeMethod18Mixin
  def block_yield(x); end

  def perform_with_block(); end
end

module DRb::DRbServer::InvokeMethod18Mixin
end

class DRb::DRbServer
  def self.default_safe_level(level); end

  def self.make_config(hash=T.unsafe(nil)); end
end

class DRb::DRbTCPSocket
  def accept(); end

  def alive?(); end

  def close(); end

  def initialize(uri, soc, config=T.unsafe(nil)); end

  def peeraddr(); end

  def recv_reply(); end

  def recv_request(); end

  def send_reply(succ, result); end

  def send_request(ref, msg_id, arg, b); end

  def set_sockopt(soc); end

  def shutdown(); end

  def stream(); end

  def uri(); end
end

class DRb::DRbTCPSocket
  def self.getservername(); end

  def self.open(uri, config); end

  def self.open_server(uri, config); end

  def self.open_server_inaddr_any(host, port); end

  def self.parse_uri(uri); end

  def self.uri_option(uri, config); end
end

class DRb::DRbUNIXSocket
  def initialize(uri, soc, config=T.unsafe(nil), server_mode=T.unsafe(nil)); end
  Max_try = ::T.let(nil, ::T.untyped)
end

class DRb::DRbUNIXSocket
  def self.temp_server(); end
end

class DRb::DRbURIOption
  def ==(other); end

  def eql?(other); end

  def initialize(option); end

  def option(); end
end

class DRb::DRbURIOption
end

module DRb::DRbUndumped
  def _dump(dummy); end
end

class DRb::DRbUnknown
  def _dump(lv); end
end

class DRb::DRbUnknown
  def self._load(s); end
end

class DRb::DRbUnknownError
  def _dump(lv); end

  def initialize(unknown); end
end

class DRb::DRbUnknownError
  def self._load(s); end
end

class DRb::ThreadObject
  include ::MonitorMixin
  def _execute(); end

  def alive?(); end

  def initialize(&blk); end

  def kill(); end

  def method_missing(msg, *arg, &blk); end
end

class DRb::ThreadObject
end

module DRb
  def self.mutex(); end
end

DRbIdConv = DRb::DRbIdConv

DRbObject = DRb::DRbObject

DRbUndumped = DRb::DRbUndumped

DSLKit = Tins

class Date
  include ::DateAndTime::Zones
  def acts_like_date?(); end

  def ago(seconds); end

  def change(options); end

  def compare_with_coercion(other); end

  def compare_without_coercion(arg); end

  def default_inspect(); end

  def in(seconds); end

  def infinite?(); end

  def minus_with_duration(other); end

  def minus_without_duration(arg); end

  def plus_with_duration(other); end

  def plus_without_duration(arg); end

  def readable_inspect(); end

  def since(seconds); end

  def to_default_s(); end
end

class Date::Infinity
  def initialize(d=T.unsafe(nil)); end
end

class Date
  def self.beginning_of_week(); end

  def self.beginning_of_week=(week_start); end

  def self.beginning_of_week_default(); end

  def self.beginning_of_week_default=(beginning_of_week_default); end

  def self.find_beginning_of_week!(week_start); end
end

module DateAndTime::Calculations
  def next_day?(); end

  def prev_day?(); end

  def tomorrow?(); end

  def yesterday?(); end
end

module DateAndTime::Compatibility
  def preserve_timezone(); end

  def utc_to_local_returns_utc_offset_times(); end
end

module DateAndTime::Compatibility
  def self.preserve_timezone(); end

  def self.preserve_timezone=(val); end

  def self.utc_to_local_returns_utc_offset_times(); end

  def self.utc_to_local_returns_utc_offset_times=(val); end
end

module DateAndTime::Zones
  def in_time_zone(zone=T.unsafe(nil)); end
end

module DateAndTime::Zones
end

class DateTime
  def at_beginning_of_hour(); end

  def at_beginning_of_minute(); end

  def at_end_of_hour(); end

  def at_end_of_minute(); end

  def beginning_of_hour(); end

  def beginning_of_minute(); end

  def end_of_hour(); end

  def end_of_minute(); end

  def formatted_offset(colon=T.unsafe(nil), alternate_utc_string=T.unsafe(nil)); end

  def getgm(); end

  def getlocal(utc_offset=T.unsafe(nil)); end

  def getutc(); end

  def gmtime(); end

  def localtime(utc_offset=T.unsafe(nil)); end

  def nsec(); end

  def seconds_since_midnight(); end

  def seconds_until_end_of_day(); end

  def subsec(); end

  def to_f(); end

  def to_i(); end

  def usec(); end

  def utc(); end

  def utc?(); end

  def utc_offset(); end
end

class DateTime
  def self.civil_from_format(utc_or_local, year, month=T.unsafe(nil), day=T.unsafe(nil), hour=T.unsafe(nil), min=T.unsafe(nil), sec=T.unsafe(nil)); end
end

class Delegator
  include ::ActiveSupport::Tryable
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class DidYouMean::ClassNameChecker
  def class_name(); end

  def class_names(); end

  def corrections(); end

  def initialize(exception); end

  def scopes(); end
end

class DidYouMean::CorrectElement
  def call(names, element); end
end

class DidYouMean::CorrectElement
end

module DidYouMean::Correctable
  def corrections(); end

  def original_message(); end

  def spell_checker(); end

  def to_s(); end
end

module DidYouMean::Jaro
  def self.distance(str1, str2); end
end

module DidYouMean::JaroWinkler
  def self.distance(str1, str2); end
end

class DidYouMean::KeyErrorChecker
  def corrections(); end

  def initialize(key_error); end
end

class DidYouMean::KeyErrorChecker
end

module DidYouMean::Levenshtein
  def self.distance(str1, str2); end

  def self.min3(a, b, c); end
end

class DidYouMean::MethodNameChecker
  def corrections(); end

  def initialize(exception); end

  def method_name(); end

  def method_names(); end

  def names_to_exclude(); end

  def receiver(); end
  RB_RESERVED_WORDS = ::T.let(nil, ::T.untyped)
end

class DidYouMean::NullChecker
  def corrections(); end

  def initialize(*arg); end
end

class DidYouMean::ParseDimensions
  def call(); end

  def initialize(dictionary, separator); end
end

class DidYouMean::ParseDimensions
end

class DidYouMean::PlainFormatter
  def message_for(corrections); end
end

class DidYouMean::PlainFormatter
end

class DidYouMean::TreeSpellChecker
  def augment(); end

  def correct(input); end

  def dictionary(); end

  def dimensions(); end

  def initialize(dictionary:, separator: T.unsafe(nil), augment: T.unsafe(nil)); end

  def separator(); end
end

class DidYouMean::TreeSpellChecker
end

class DidYouMean::VariableNameChecker
  def corrections(); end

  def cvar_names(); end

  def initialize(exception); end

  def ivar_names(); end

  def lvar_names(); end

  def method_names(); end

  def name(); end
  RB_RESERVED_WORDS = ::T.let(nil, ::T.untyped)
end

module DidYouMean
  def self.correct_error(error_class, spell_checker); end

  def self.formatter(); end

  def self.formatter=(formatter); end
end

class Dir
  def children(); end

  def each_child(); end
end

module Dir::Tmpname
  UNUSABLE_CHARS = ::T.let(nil, ::T.untyped)
end

class Dir
  def self.exists?(arg); end
end

module Docile
  VERSION = ::T.let(nil, ::T.untyped)
end

module Docile::BacktraceFilter
  FILTER_PATTERN = ::T.let(nil, ::T.untyped)
end

class Docile::FallbackContextProxy
  NON_FALLBACK_METHODS = ::T.let(nil, ::T.untyped)
  NON_PROXIED_INSTANCE_VARIABLES = ::T.let(nil, ::T.untyped)
  NON_PROXIED_METHODS = ::T.let(nil, ::T.untyped)
end

class ERB
  def def_method(mod, methodname, fname=T.unsafe(nil)); end

  def def_module(methodname=T.unsafe(nil)); end
end

class ERB::Compiler::Scanner
  DEFAULT_ETAGS = ::T.let(nil, ::T.untyped)
  DEFAULT_STAGS = ::T.let(nil, ::T.untyped)
end

module ERB::Util
  HTML_ESCAPE = ::T.let(nil, ::T.untyped)
  HTML_ESCAPE_ONCE_REGEXP = ::T.let(nil, ::T.untyped)
  JSON_ESCAPE = ::T.let(nil, ::T.untyped)
  JSON_ESCAPE_REGEXP = ::T.let(nil, ::T.untyped)
end

module ERB::Util
  def self.html_escape_once(s); end

  def self.json_escape(s); end

  def self.unwrapped_html_escape(s); end
end

class Encoding
  def _dump(*arg); end
  CESU_8 = ::T.let(nil, ::T.untyped)
end

class Encoding::Converter
  def initialize(*arg); end
end

class Encoding
  def self._load(arg); end
end

module Enumerable
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def as_json(options=T.unsafe(nil)); end

  def compact_blank(); end

  def excluding(*elements); end

  def including(*elements); end

  def pick(*keys); end

  def sum(identity=T.unsafe(nil), &block); end

  def without(*elements); end
end

class Enumerator
  def +(arg); end

  def each_with_index(); end
end

class Enumerator::ArithmeticSequence
  def begin(); end

  def each(&blk); end

  def end(); end

  def exclude_end?(); end

  def last(*arg); end

  def step(); end
end

class Enumerator::ArithmeticSequence
end

class Enumerator::Chain
end

class Enumerator::Chain
end

class Enumerator::Generator
  def each(*arg, &blk); end

  def initialize(*arg); end
end

class Enumerator::Lazy
  def eager(); end
end

class Enumerator::Producer
  def each(&blk); end
end

class Enumerator::Producer
end

class Enumerator::Yielder
  def to_proc(); end
end

class Enumerator
  def self.produce(*arg); end
end

Errno::EAUTH = Errno::NOERROR

Errno::EBADARCH = Errno::NOERROR

Errno::EBADEXEC = Errno::NOERROR

Errno::EBADMACHO = Errno::NOERROR

Errno::EBADRPC = Errno::NOERROR

Errno::ECAPMODE = Errno::NOERROR

Errno::EDEADLOCK = Errno::EDEADLK

Errno::EDEVERR = Errno::NOERROR

Errno::EDOOFUS = Errno::NOERROR

Errno::EFTYPE = Errno::NOERROR

Errno::EIPSEC = Errno::NOERROR

Errno::ELAST = Errno::NOERROR

Errno::ENEEDAUTH = Errno::NOERROR

Errno::ENOATTR = Errno::NOERROR

Errno::ENOPOLICY = Errno::NOERROR

Errno::ENOTCAPABLE = Errno::NOERROR

class Errno::ENOTSUP
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::ENOTSUP
end

Errno::EPROCLIM = Errno::NOERROR

Errno::EPROCUNAVAIL = Errno::NOERROR

Errno::EPROGMISMATCH = Errno::NOERROR

Errno::EPROGUNAVAIL = Errno::NOERROR

Errno::EPWROFF = Errno::NOERROR

Errno::EQFULL = Errno::NOERROR

Errno::ERPCMISMATCH = Errno::NOERROR

Errno::ESHLIBVERS = Errno::NOERROR

module Etc
  VERSION = ::T.let(nil, ::T.untyped)
end

class Etc::Group
  def gid(); end

  def gid=(_); end

  def mem(); end

  def mem=(_); end

  def name(); end

  def name=(_); end

  def passwd(); end

  def passwd=(_); end
end

class Etc::Group
  extend ::Enumerable
  def self.[](*arg); end

  def self.each(&blk); end

  def self.members(); end
end

class Etc::Passwd
  def dir=(_); end

  def gecos(); end

  def gecos=(_); end

  def gid=(_); end

  def name=(_); end

  def passwd=(_); end

  def shell=(_); end

  def uid=(_); end
end

class Etc::Passwd
  extend ::Enumerable
  def self.[](*arg); end

  def self.each(&blk); end

  def self.members(); end
end

class Exception
  include ::ActiveSupport::Dependencies::Blamable
end

class ExitCalledError
end

class ExitCalledError
end

class FalseClass
  include ::JSON::Ext::Generator::GeneratorMethods::FalseClass
end

class Fiber
  def initialize(*arg); end

  def transfer(*arg); end
end

class Fiber
  def self.current(); end
end

class File
  def self.absolute_path?(arg); end

  def self.atomic_write(file_name, temp_dir=T.unsafe(nil)); end

  def self.exists?(arg); end

  def self.probe_stat_in(dir); end
end

FileList = Rake::FileList

module FileUtils
  include ::FileUtils::StreamUtils_
  LN_SUPPORTED = ::T.let(nil, ::T.untyped)
  RUBY = ::T.let(nil, ::T.untyped)
end

module FileUtils::DryRun
  include ::FileUtils
  include ::FileUtils::StreamUtils_
  include ::FileUtils::LowMethods
end

module FileUtils::DryRun
  extend ::FileUtils::DryRun
  extend ::FileUtils
  extend ::FileUtils::StreamUtils_
  extend ::FileUtils::LowMethods
end

module FileUtils::NoWrite
  include ::FileUtils
  include ::FileUtils::StreamUtils_
  include ::FileUtils::LowMethods
end

module FileUtils::NoWrite
  extend ::FileUtils::NoWrite
  extend ::FileUtils
  extend ::FileUtils::StreamUtils_
  extend ::FileUtils::LowMethods
end

module FileUtils::Verbose
  include ::FileUtils
  include ::FileUtils::StreamUtils_
end

module FileUtils::Verbose
  extend ::FileUtils::Verbose
  extend ::FileUtils
  extend ::FileUtils::StreamUtils_
end

module FileUtils
  extend ::FileUtils::StreamUtils_
end

class Float
  include ::JSON::Ext::Generator::GeneratorMethods::Float
end

class Formatador
  INDENT_REGEX = ::T.let(nil, ::T.untyped)
  PARSE_REGEX = ::T.let(nil, ::T.untyped)
  STYLES = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Forwardable
  VERSION = ::T.let(nil, ::T.untyped)
end

module Forwardable
  def self._compile_method(src, file, line); end

  def self._delegator_method(obj, accessor, method, ali); end

  def self._valid_method?(method); end

  def self.debug(); end

  def self.debug=(debug); end
end

class FrozenError
  def receiver(); end
end

module GC
  def garbage_collect(full_mark: T.unsafe(nil), immediate_mark: T.unsafe(nil), immediate_sweep: T.unsafe(nil)); end
end

module GC
  def self.verify_transient_heap_internal_consistency(); end
end

module GLib
  BINARY_AGE = ::T.let(nil, ::T.untyped)
  BINDING_VERSION = ::T.let(nil, ::T.untyped)
  BUILD_VERSION = ::T.let(nil, ::T.untyped)
  DIR_SEPARATOR = ::T.let(nil, ::T.untyped)
  E = ::T.let(nil, ::T.untyped)
  FILENAME_ENCODING = ::T.let(nil, ::T.untyped)
  INTERFACE_AGE = ::T.let(nil, ::T.untyped)
  LN10 = ::T.let(nil, ::T.untyped)
  LN2 = ::T.let(nil, ::T.untyped)
  LOG_2_BASE_10 = ::T.let(nil, ::T.untyped)
  LOG_DOMAIN = ::T.let(nil, ::T.untyped)
  MAJOR_VERSION = ::T.let(nil, ::T.untyped)
  MAXDOUBLE = ::T.let(nil, ::T.untyped)
  MAXFLOAT = ::T.let(nil, ::T.untyped)
  MAXINT = ::T.let(nil, ::T.untyped)
  MAXINT16 = ::T.let(nil, ::T.untyped)
  MAXINT32 = ::T.let(nil, ::T.untyped)
  MAXINT64 = ::T.let(nil, ::T.untyped)
  MAXINT8 = ::T.let(nil, ::T.untyped)
  MAXLONG = ::T.let(nil, ::T.untyped)
  MAXSHORT = ::T.let(nil, ::T.untyped)
  MAXSIZE = ::T.let(nil, ::T.untyped)
  MAXUINT = ::T.let(nil, ::T.untyped)
  MAXUINT16 = ::T.let(nil, ::T.untyped)
  MAXUINT32 = ::T.let(nil, ::T.untyped)
  MAXUINT64 = ::T.let(nil, ::T.untyped)
  MAXUINT8 = ::T.let(nil, ::T.untyped)
  MAXULONG = ::T.let(nil, ::T.untyped)
  MAXUSHORT = ::T.let(nil, ::T.untyped)
  MICRO_VERSION = ::T.let(nil, ::T.untyped)
  MINDOUBLE = ::T.let(nil, ::T.untyped)
  MINFLOAT = ::T.let(nil, ::T.untyped)
  MININT = ::T.let(nil, ::T.untyped)
  MININT16 = ::T.let(nil, ::T.untyped)
  MININT32 = ::T.let(nil, ::T.untyped)
  MININT64 = ::T.let(nil, ::T.untyped)
  MININT8 = ::T.let(nil, ::T.untyped)
  MINLONG = ::T.let(nil, ::T.untyped)
  MINOR_VERSION = ::T.let(nil, ::T.untyped)
  MINSHORT = ::T.let(nil, ::T.untyped)
  PI = ::T.let(nil, ::T.untyped)
  PI_2 = ::T.let(nil, ::T.untyped)
  PI_4 = ::T.let(nil, ::T.untyped)
  PRIORITY_DEFAULT = ::T.let(nil, ::T.untyped)
  PRIORITY_DEFAULT_IDLE = ::T.let(nil, ::T.untyped)
  PRIORITY_HIGH = ::T.let(nil, ::T.untyped)
  PRIORITY_HIGH_IDLE = ::T.let(nil, ::T.untyped)
  PRIORITY_LOW = ::T.let(nil, ::T.untyped)
  SEARCHPATH_SEPARATOR = ::T.let(nil, ::T.untyped)
  SIGNAL_HANDLER_PREFIX = ::T.let(nil, ::T.untyped)
  SQRT2 = ::T.let(nil, ::T.untyped)
  USER_DIRECTORY_DESKTOP = ::T.let(nil, ::T.untyped)
  USER_DIRECTORY_DOCUMENTS = ::T.let(nil, ::T.untyped)
  USER_DIRECTORY_DOWNLOAD = ::T.let(nil, ::T.untyped)
  USER_DIRECTORY_MUSIC = ::T.let(nil, ::T.untyped)
  USER_DIRECTORY_PICTURES = ::T.let(nil, ::T.untyped)
  USER_DIRECTORY_PUBLIC_SHARE = ::T.let(nil, ::T.untyped)
  USER_DIRECTORY_TEMPLATES = ::T.let(nil, ::T.untyped)
  USER_DIRECTORY_VIDEOS = ::T.let(nil, ::T.untyped)
  USER_N_DIRECTORIES = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
  VIRTUAL_FUNCTION_IMPLEMENTATION_PREFIX = ::T.let(nil, ::T.untyped)
end

class GLib::BindingFlags
  BIDIRECTIONAL = ::T.let(nil, ::T.untyped)
  DEFAULT = ::T.let(nil, ::T.untyped)
  INVERT_BOOLEAN = ::T.let(nil, ::T.untyped)
  SYNC_CREATE = ::T.let(nil, ::T.untyped)
end

class GLib::BookmarkFileError
  include ::GLib::ErrorInfo
  APP_NOT_REGISTERED = ::T.let(nil, ::T.untyped)
  FILE_NOT_FOUND = ::T.let(nil, ::T.untyped)
  INVALID_URI = ::T.let(nil, ::T.untyped)
  INVALID_VALUE = ::T.let(nil, ::T.untyped)
  READ = ::T.let(nil, ::T.untyped)
  UNKNOWN_ENCODING = ::T.let(nil, ::T.untyped)
  URI_NOT_FOUND = ::T.let(nil, ::T.untyped)
  WRITE = ::T.let(nil, ::T.untyped)
end

class GLib::BookmarkFileError::AppNotRegistered
end

class GLib::BookmarkFileError::AppNotRegistered
end

class GLib::BookmarkFileError::FileNotFound
end

class GLib::BookmarkFileError::FileNotFound
end

class GLib::BookmarkFileError::InvalidUri
end

class GLib::BookmarkFileError::InvalidUri
end

class GLib::BookmarkFileError::InvalidValue
end

class GLib::BookmarkFileError::InvalidValue
end

class GLib::BookmarkFileError::Read
end

class GLib::BookmarkFileError::Read
end

class GLib::BookmarkFileError::UnknownEncoding
end

class GLib::BookmarkFileError::UnknownEncoding
end

class GLib::BookmarkFileError::UriNotFound
end

class GLib::BookmarkFileError::UriNotFound
end

class GLib::BookmarkFileError::Write
end

class GLib::BookmarkFileError::Write
end

class GLib::BookmarkFileError
end

class GLib::CallbackNotInitializedError
end

class GLib::CallbackNotInitializedError
end

class GLib::ConnectFlags
  AFTER = ::T.let(nil, ::T.untyped)
  SWAPPED = ::T.let(nil, ::T.untyped)
end

class GLib::ConvertError
  include ::GLib::ErrorInfo
  BAD_URI = ::T.let(nil, ::T.untyped)
  FAILED = ::T.let(nil, ::T.untyped)
  ILLEGAL_SEQUENCE = ::T.let(nil, ::T.untyped)
  NOT_ABSOLUTE_PATH = ::T.let(nil, ::T.untyped)
  NO_CONVERSION = ::T.let(nil, ::T.untyped)
  PARTIAL_INPUT = ::T.let(nil, ::T.untyped)
end

class GLib::ConvertError
end

class GLib::Error
  include ::GLib::ErrorInfo
end

class GLib::Error
end

class GLib::FileError
  include ::GLib::ErrorInfo
  ACCES = ::T.let(nil, ::T.untyped)
  AGAIN = ::T.let(nil, ::T.untyped)
  BADF = ::T.let(nil, ::T.untyped)
  EXIST = ::T.let(nil, ::T.untyped)
  FAILED = ::T.let(nil, ::T.untyped)
  FAULT = ::T.let(nil, ::T.untyped)
  INTR = ::T.let(nil, ::T.untyped)
  INVAL = ::T.let(nil, ::T.untyped)
  IO = ::T.let(nil, ::T.untyped)
  ISDIR = ::T.let(nil, ::T.untyped)
  LOOP = ::T.let(nil, ::T.untyped)
  MFILE = ::T.let(nil, ::T.untyped)
  NAMETOOLONG = ::T.let(nil, ::T.untyped)
  NFILE = ::T.let(nil, ::T.untyped)
  NODEV = ::T.let(nil, ::T.untyped)
  NOENT = ::T.let(nil, ::T.untyped)
  NOMEM = ::T.let(nil, ::T.untyped)
  NOSPC = ::T.let(nil, ::T.untyped)
  NOTDIR = ::T.let(nil, ::T.untyped)
  NXIO = ::T.let(nil, ::T.untyped)
  PERM = ::T.let(nil, ::T.untyped)
  PIPE = ::T.let(nil, ::T.untyped)
  ROFS = ::T.let(nil, ::T.untyped)
  TXTBSY = ::T.let(nil, ::T.untyped)
end

class GLib::FileError
end

class GLib::FormatSizeFlags
  BITS = ::T.let(nil, ::T.untyped)
  DEFAULT = ::T.let(nil, ::T.untyped)
  IEC_UNITS = ::T.let(nil, ::T.untyped)
  LONG_FORMAT = ::T.let(nil, ::T.untyped)
end

class GLib::IOChannel
  include ::Enumerable
  ERR = ::T.let(nil, ::T.untyped)
  FLAG_APPEND = ::T.let(nil, ::T.untyped)
  FLAG_GET_MASK = ::T.let(nil, ::T.untyped)
  FLAG_IS_SEEKABLE = ::T.let(nil, ::T.untyped)
  FLAG_MASK = ::T.let(nil, ::T.untyped)
  FLAG_NONBLOCK = ::T.let(nil, ::T.untyped)
  FLAG_READABLE = ::T.let(nil, ::T.untyped)
  FLAG_SET_MASK = ::T.let(nil, ::T.untyped)
  FLAG_WRITEABLE = ::T.let(nil, ::T.untyped)
  HUP = ::T.let(nil, ::T.untyped)
  IN = ::T.let(nil, ::T.untyped)
  NVAL = ::T.let(nil, ::T.untyped)
  OUT = ::T.let(nil, ::T.untyped)
  PRI = ::T.let(nil, ::T.untyped)
  SEEK_CUR = ::T.let(nil, ::T.untyped)
  SEEK_END = ::T.let(nil, ::T.untyped)
  SEEK_SET = ::T.let(nil, ::T.untyped)
  STATUS_AGAIN = ::T.let(nil, ::T.untyped)
  STATUS_EOF = ::T.let(nil, ::T.untyped)
  STATUS_ERROR = ::T.let(nil, ::T.untyped)
  STATUS_NORMAL = ::T.let(nil, ::T.untyped)
end

class GLib::IOChannelError
  include ::GLib::ErrorInfo
  FAILED = ::T.let(nil, ::T.untyped)
  FBIG = ::T.let(nil, ::T.untyped)
  INVAL = ::T.let(nil, ::T.untyped)
  IO = ::T.let(nil, ::T.untyped)
  ISDIR = ::T.let(nil, ::T.untyped)
  NOSPC = ::T.let(nil, ::T.untyped)
  NXIO = ::T.let(nil, ::T.untyped)
  OVERFLOW = ::T.let(nil, ::T.untyped)
  PIPE = ::T.let(nil, ::T.untyped)
end

class GLib::IOCondition
  ERR = ::T.let(nil, ::T.untyped)
  HUP = ::T.let(nil, ::T.untyped)
  IN = ::T.let(nil, ::T.untyped)
  NVAL = ::T.let(nil, ::T.untyped)
  OUT = ::T.let(nil, ::T.untyped)
  PRI = ::T.let(nil, ::T.untyped)
end

class GLib::Instantiatable
  extend ::GLib::MetaInterface
end

module GLib::Interface
end

module GLib::Interface
  extend ::GLib::MetaInterface
end

class GLib::KeyFile
  DESKTOP_GROUP = ::T.let(nil, ::T.untyped)
  DESKTOP_KEY_CATEGORIES = ::T.let(nil, ::T.untyped)
  DESKTOP_KEY_COMMENT = ::T.let(nil, ::T.untyped)
  DESKTOP_KEY_EXEC = ::T.let(nil, ::T.untyped)
  DESKTOP_KEY_GENERIC_NAME = ::T.let(nil, ::T.untyped)
  DESKTOP_KEY_HIDDEN = ::T.let(nil, ::T.untyped)
  DESKTOP_KEY_ICON = ::T.let(nil, ::T.untyped)
  DESKTOP_KEY_MIME_TYPE = ::T.let(nil, ::T.untyped)
  DESKTOP_KEY_NAME = ::T.let(nil, ::T.untyped)
  DESKTOP_KEY_NOT_SHOW_IN = ::T.let(nil, ::T.untyped)
  DESKTOP_KEY_NO_DISPLAY = ::T.let(nil, ::T.untyped)
  DESKTOP_KEY_ONLY_SHOW_IN = ::T.let(nil, ::T.untyped)
  DESKTOP_KEY_PATH = ::T.let(nil, ::T.untyped)
  DESKTOP_KEY_STARTUP_NOTIFY = ::T.let(nil, ::T.untyped)
  DESKTOP_KEY_STARTUP_WM_CLASS = ::T.let(nil, ::T.untyped)
  DESKTOP_KEY_TERMINAL = ::T.let(nil, ::T.untyped)
  DESKTOP_KEY_TRY_EXEC = ::T.let(nil, ::T.untyped)
  DESKTOP_KEY_TYPE = ::T.let(nil, ::T.untyped)
  DESKTOP_KEY_URL = ::T.let(nil, ::T.untyped)
  DESKTOP_KEY_VERSION = ::T.let(nil, ::T.untyped)
  DESKTOP_TYPE_APPLICATION = ::T.let(nil, ::T.untyped)
  DESKTOP_TYPE_DIRECTORY = ::T.let(nil, ::T.untyped)
  DESKTOP_TYPE_LINK = ::T.let(nil, ::T.untyped)
  KEEP_COMMENTS = ::T.let(nil, ::T.untyped)
  KEEP_TRANSLATIONS = ::T.let(nil, ::T.untyped)
  NONE = ::T.let(nil, ::T.untyped)
end

class GLib::KeyFile::Flags
  KEEP_COMMENTS = ::T.let(nil, ::T.untyped)
  KEEP_TRANSLATIONS = ::T.let(nil, ::T.untyped)
  NONE = ::T.let(nil, ::T.untyped)
end

class GLib::KeyFileError
  include ::GLib::ErrorInfo
  GROUP_NOT_FOUND = ::T.let(nil, ::T.untyped)
  INVALID_VALUE = ::T.let(nil, ::T.untyped)
  KEY_NOT_FOUND = ::T.let(nil, ::T.untyped)
  NOT_FOUND = ::T.let(nil, ::T.untyped)
  PARSE = ::T.let(nil, ::T.untyped)
  UNKNOWN_ENCODING = ::T.let(nil, ::T.untyped)
end

class GLib::KeyFileError::GroupNotFound
end

class GLib::KeyFileError::GroupNotFound
end

class GLib::KeyFileError::InvalidValue
end

class GLib::KeyFileError::InvalidValue
end

class GLib::KeyFileError::KeyNotFound
end

class GLib::KeyFileError::KeyNotFound
end

class GLib::KeyFileError::NotFound
end

class GLib::KeyFileError::NotFound
end

class GLib::KeyFileError::Parse
end

class GLib::KeyFileError::Parse
end

class GLib::KeyFileError::UnknownEncoding
end

class GLib::KeyFileError::UnknownEncoding
end

class GLib::KeyFileError
end

module GLib::Log
  DOMAIN = ::T.let(nil, ::T.untyped)
  FATAL_MASK = ::T.let(nil, ::T.untyped)
  FLAG_FATAL = ::T.let(nil, ::T.untyped)
  FLAG_RECURSION = ::T.let(nil, ::T.untyped)
  LEVELS = ::T.let(nil, ::T.untyped)
  LEVEL_CRITICAL = ::T.let(nil, ::T.untyped)
  LEVEL_DEBUG = ::T.let(nil, ::T.untyped)
  LEVEL_ERROR = ::T.let(nil, ::T.untyped)
  LEVEL_INFO = ::T.let(nil, ::T.untyped)
  LEVEL_MASK = ::T.let(nil, ::T.untyped)
  LEVEL_MESSAGE = ::T.let(nil, ::T.untyped)
  LEVEL_USER_SHIFT = ::T.let(nil, ::T.untyped)
  LEVEL_WARNING = ::T.let(nil, ::T.untyped)
end

module GLib::Module
  LOG_DOMAIN = ::T.let(nil, ::T.untyped)
end

class GLib::NoPropertyError
end

class GLib::NoPropertyError
end

class GLib::NoSignalError
end

class GLib::NoSignalError
end

class GLib::NormalizeMode
  ALL = ::T.let(nil, ::T.untyped)
  ALL_COMPOSE = ::T.let(nil, ::T.untyped)
  DEFAULT = ::T.let(nil, ::T.untyped)
  DEFAULT_COMPOSE = ::T.let(nil, ::T.untyped)
  NFC = ::T.let(nil, ::T.untyped)
  NFD = ::T.let(nil, ::T.untyped)
  NFKC = ::T.let(nil, ::T.untyped)
  NFKD = ::T.let(nil, ::T.untyped)
end

class GLib::Object
  LOG_DOMAIN = ::T.let(nil, ::T.untyped)
end

class GLib::Param
  CONSTRUCT = ::T.let(nil, ::T.untyped)
  CONSTRUCT_ONLY = ::T.let(nil, ::T.untyped)
  DEPRECATED = ::T.let(nil, ::T.untyped)
  EXPLICIT_NOTIFY = ::T.let(nil, ::T.untyped)
  LAX_VALIDATION = ::T.let(nil, ::T.untyped)
  MASK = ::T.let(nil, ::T.untyped)
  READABLE = ::T.let(nil, ::T.untyped)
  READWRITE = ::T.let(nil, ::T.untyped)
  STATIC_BLURB = ::T.let(nil, ::T.untyped)
  STATIC_NAME = ::T.let(nil, ::T.untyped)
  STATIC_NICK = ::T.let(nil, ::T.untyped)
  USER_SHIFT = ::T.let(nil, ::T.untyped)
  WRITABLE = ::T.let(nil, ::T.untyped)
end

class GLib::RegexCompileFlags
  ANCHORED = ::T.let(nil, ::T.untyped)
  BSR_ANYCRLF = ::T.let(nil, ::T.untyped)
  CASELESS = ::T.let(nil, ::T.untyped)
  DOLLAR_ENDONLY = ::T.let(nil, ::T.untyped)
  DOTALL = ::T.let(nil, ::T.untyped)
  DUPNAMES = ::T.let(nil, ::T.untyped)
  EXTENDED = ::T.let(nil, ::T.untyped)
  FIRSTLINE = ::T.let(nil, ::T.untyped)
  JAVASCRIPT_COMPAT = ::T.let(nil, ::T.untyped)
  MULTILINE = ::T.let(nil, ::T.untyped)
  NEWLINE_ANYCRLF = ::T.let(nil, ::T.untyped)
  NEWLINE_CR = ::T.let(nil, ::T.untyped)
  NEWLINE_CRLF = ::T.let(nil, ::T.untyped)
  NEWLINE_LF = ::T.let(nil, ::T.untyped)
  NO_AUTO_CAPTURE = ::T.let(nil, ::T.untyped)
  OPTIMIZE = ::T.let(nil, ::T.untyped)
  RAW = ::T.let(nil, ::T.untyped)
  UNGREEDY = ::T.let(nil, ::T.untyped)
end

class GLib::RegexMatchFlags
  ANCHORED = ::T.let(nil, ::T.untyped)
  BSR_ANY = ::T.let(nil, ::T.untyped)
  BSR_ANYCRLF = ::T.let(nil, ::T.untyped)
  NEWLINE_ANY = ::T.let(nil, ::T.untyped)
  NEWLINE_ANYCRLF = ::T.let(nil, ::T.untyped)
  NEWLINE_CR = ::T.let(nil, ::T.untyped)
  NEWLINE_CRLF = ::T.let(nil, ::T.untyped)
  NEWLINE_LF = ::T.let(nil, ::T.untyped)
  NOTBOL = ::T.let(nil, ::T.untyped)
  NOTEMPTY = ::T.let(nil, ::T.untyped)
  NOTEMPTY_ATSTART = ::T.let(nil, ::T.untyped)
  NOTEOL = ::T.let(nil, ::T.untyped)
  PARTIAL = ::T.let(nil, ::T.untyped)
  PARTIAL_HARD = ::T.let(nil, ::T.untyped)
  PARTIAL_SOFT = ::T.let(nil, ::T.untyped)
end

class GLib::ShellError
  include ::GLib::ErrorInfo
  BAD_QUOTING = ::T.let(nil, ::T.untyped)
  EMPTY_STRING = ::T.let(nil, ::T.untyped)
  FAILED = ::T.let(nil, ::T.untyped)
end

class GLib::ShellError
end

class GLib::Signal
  ACTION = ::T.let(nil, ::T.untyped)
  CONNECT_AFTER = ::T.let(nil, ::T.untyped)
  CONNECT_SWAPPED = ::T.let(nil, ::T.untyped)
  DEPRECATED = ::T.let(nil, ::T.untyped)
  DETAILED = ::T.let(nil, ::T.untyped)
  FLAGS_MASK = ::T.let(nil, ::T.untyped)
  MATCH_CLOSURE = ::T.let(nil, ::T.untyped)
  MATCH_DATA = ::T.let(nil, ::T.untyped)
  MATCH_DETAIL = ::T.let(nil, ::T.untyped)
  MATCH_FUNC = ::T.let(nil, ::T.untyped)
  MATCH_ID = ::T.let(nil, ::T.untyped)
  MATCH_MASK = ::T.let(nil, ::T.untyped)
  MATCH_UNBLOCKED = ::T.let(nil, ::T.untyped)
  MUST_COLLECT = ::T.let(nil, ::T.untyped)
  NO_HOOKS = ::T.let(nil, ::T.untyped)
  NO_RECURSE = ::T.let(nil, ::T.untyped)
  RUN_CLEANUP = ::T.let(nil, ::T.untyped)
  RUN_FIRST = ::T.let(nil, ::T.untyped)
  RUN_LAST = ::T.let(nil, ::T.untyped)
  TYPE_STATIC_SCOPE = ::T.let(nil, ::T.untyped)
end

class GLib::SignalFlags
  ACTION = ::T.let(nil, ::T.untyped)
  DEPRECATED = ::T.let(nil, ::T.untyped)
  DETAILED = ::T.let(nil, ::T.untyped)
  MASK = ::T.let(nil, ::T.untyped)
  MUST_COLLECT = ::T.let(nil, ::T.untyped)
  NO_HOOKS = ::T.let(nil, ::T.untyped)
  NO_RECURSE = ::T.let(nil, ::T.untyped)
  RUN_CLEANUP = ::T.let(nil, ::T.untyped)
  RUN_FIRST = ::T.let(nil, ::T.untyped)
  RUN_LAST = ::T.let(nil, ::T.untyped)
end

class GLib::SignalMatchType
  CLOSURE = ::T.let(nil, ::T.untyped)
  DATA = ::T.let(nil, ::T.untyped)
  DETAIL = ::T.let(nil, ::T.untyped)
  FUNC = ::T.let(nil, ::T.untyped)
  ID = ::T.let(nil, ::T.untyped)
  MASK = ::T.let(nil, ::T.untyped)
  UNBLOCKED = ::T.let(nil, ::T.untyped)
end

class GLib::Source
  CONTINUE = ::T.let(nil, ::T.untyped)
  REMOVE = ::T.let(nil, ::T.untyped)
end

module GLib::Spawn
  CHILD_INHERITS_STDIN = ::T.let(nil, ::T.untyped)
  DO_NOT_REAP_CHILD = ::T.let(nil, ::T.untyped)
  FILE_AND_ARGV_ZERO = ::T.let(nil, ::T.untyped)
  LEAVE_DESCRIPTORS_OPEN = ::T.let(nil, ::T.untyped)
  SEARCH_PATH = ::T.let(nil, ::T.untyped)
  STDERR_TO_DEV_NULL = ::T.let(nil, ::T.untyped)
  STDOUT_TO_DEV_NULL = ::T.let(nil, ::T.untyped)
end

class GLib::SpawnError
  include ::GLib::ErrorInfo
  CHDIR = ::T.let(nil, ::T.untyped)
  EACCES = ::T.let(nil, ::T.untyped)
  EINVAL = ::T.let(nil, ::T.untyped)
  EIO = ::T.let(nil, ::T.untyped)
  EISDIR = ::T.let(nil, ::T.untyped)
  ELIBBAD = ::T.let(nil, ::T.untyped)
  ELOOP = ::T.let(nil, ::T.untyped)
  EMFILE = ::T.let(nil, ::T.untyped)
  ENAMETOOLONG = ::T.let(nil, ::T.untyped)
  ENFILE = ::T.let(nil, ::T.untyped)
  ENOENT = ::T.let(nil, ::T.untyped)
  ENOEXEC = ::T.let(nil, ::T.untyped)
  ENOMEM = ::T.let(nil, ::T.untyped)
  ENOTDIR = ::T.let(nil, ::T.untyped)
  EPERM = ::T.let(nil, ::T.untyped)
  ETXTBUSY = ::T.let(nil, ::T.untyped)
  FAILED = ::T.let(nil, ::T.untyped)
  FORK = ::T.let(nil, ::T.untyped)
  READ = ::T.let(nil, ::T.untyped)
  TOO_BIG = ::T.let(nil, ::T.untyped)
end

class GLib::Thread
  LOG_DOMAIN = ::T.let(nil, ::T.untyped)
end

class GLib::Type
  BOOLEAN = ::T.let(nil, ::T.untyped)
  BOXED = ::T.let(nil, ::T.untyped)
  CHAR = ::T.let(nil, ::T.untyped)
  DOUBLE = ::T.let(nil, ::T.untyped)
  ENUM = ::T.let(nil, ::T.untyped)
  FLAGS = ::T.let(nil, ::T.untyped)
  FLOAT = ::T.let(nil, ::T.untyped)
  FUNDAMENTAL_MAX = ::T.let(nil, ::T.untyped)
  FUNDAMENTAL_TYPES = ::T.let(nil, ::T.untyped)
  INT = ::T.let(nil, ::T.untyped)
  INT64 = ::T.let(nil, ::T.untyped)
  INTERFACE = ::T.let(nil, ::T.untyped)
  LONG = ::T.let(nil, ::T.untyped)
  NONE = ::T.let(nil, ::T.untyped)
  OBJECT = ::T.let(nil, ::T.untyped)
  PARAM = ::T.let(nil, ::T.untyped)
  POINTER = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  UCHAR = ::T.let(nil, ::T.untyped)
  UINT = ::T.let(nil, ::T.untyped)
  UINT64 = ::T.let(nil, ::T.untyped)
  ULONG = ::T.let(nil, ::T.untyped)
end

class GLib::TypeModule
  include ::GLib::TypePlugin
  include ::GLib::Interface
end

module GLib::TypePlugin
  include ::GLib::Interface
end

module GLib::TypePlugin
  extend ::GLib::MetaInterface
  extend ::GLib::Interface
end

module GLib::Unicode
  BREAK_AFTER = ::T.let(nil, ::T.untyped)
  BREAK_ALPHABETIC = ::T.let(nil, ::T.untyped)
  BREAK_AMBIGUOUS = ::T.let(nil, ::T.untyped)
  BREAK_BEFORE = ::T.let(nil, ::T.untyped)
  BREAK_BEFORE_AND_AFTER = ::T.let(nil, ::T.untyped)
  BREAK_CARRIAGE_RETURN = ::T.let(nil, ::T.untyped)
  BREAK_CLOSE_PARANTHESIS = ::T.let(nil, ::T.untyped)
  BREAK_CLOSE_PUNCTUATION = ::T.let(nil, ::T.untyped)
  BREAK_COMBINING_MARK = ::T.let(nil, ::T.untyped)
  BREAK_COMPLEX_CONTEXT = ::T.let(nil, ::T.untyped)
  BREAK_CONDITIONAL_JAPANESE_STARTER = ::T.let(nil, ::T.untyped)
  BREAK_CONTINGENT = ::T.let(nil, ::T.untyped)
  BREAK_EMOJI_BASE = ::T.let(nil, ::T.untyped)
  BREAK_EMOJI_MODIFIER = ::T.let(nil, ::T.untyped)
  BREAK_EXCLAMATION = ::T.let(nil, ::T.untyped)
  BREAK_HANGUL_LVT_SYLLABLE = ::T.let(nil, ::T.untyped)
  BREAK_HANGUL_LV_SYLLABLE = ::T.let(nil, ::T.untyped)
  BREAK_HANGUL_L_JAMO = ::T.let(nil, ::T.untyped)
  BREAK_HANGUL_T_JAMO = ::T.let(nil, ::T.untyped)
  BREAK_HANGUL_V_JAMO = ::T.let(nil, ::T.untyped)
  BREAK_HEBREW_LETTER = ::T.let(nil, ::T.untyped)
  BREAK_HYPHEN = ::T.let(nil, ::T.untyped)
  BREAK_IDEOGRAPHIC = ::T.let(nil, ::T.untyped)
  BREAK_INFIX_SEPARATOR = ::T.let(nil, ::T.untyped)
  BREAK_INSEPARABLE = ::T.let(nil, ::T.untyped)
  BREAK_LINE_FEED = ::T.let(nil, ::T.untyped)
  BREAK_MANDATORY = ::T.let(nil, ::T.untyped)
  BREAK_NEXT_LINE = ::T.let(nil, ::T.untyped)
  BREAK_NON_BREAKING_GLUE = ::T.let(nil, ::T.untyped)
  BREAK_NON_STARTER = ::T.let(nil, ::T.untyped)
  BREAK_NUMERIC = ::T.let(nil, ::T.untyped)
  BREAK_OPEN_PUNCTUATION = ::T.let(nil, ::T.untyped)
  BREAK_POSTFIX = ::T.let(nil, ::T.untyped)
  BREAK_PREFIX = ::T.let(nil, ::T.untyped)
  BREAK_QUOTATION = ::T.let(nil, ::T.untyped)
  BREAK_REGIONAL_INDICATOR = ::T.let(nil, ::T.untyped)
  BREAK_SPACE = ::T.let(nil, ::T.untyped)
  BREAK_SURROGATE = ::T.let(nil, ::T.untyped)
  BREAK_SYMBOL = ::T.let(nil, ::T.untyped)
  BREAK_UNKNOWN = ::T.let(nil, ::T.untyped)
  BREAK_WORD_JOINER = ::T.let(nil, ::T.untyped)
  BREAK_ZERO_WIDTH_JOINER = ::T.let(nil, ::T.untyped)
  BREAK_ZERO_WIDTH_SPACE = ::T.let(nil, ::T.untyped)
  CLOSE_PUNCTUATION = ::T.let(nil, ::T.untyped)
  CONNECT_PUNCTUATION = ::T.let(nil, ::T.untyped)
  CONTROL = ::T.let(nil, ::T.untyped)
  CURRENCY_SYMBOL = ::T.let(nil, ::T.untyped)
  DASH_PUNCTUATION = ::T.let(nil, ::T.untyped)
  DECIMAL_NUMBER = ::T.let(nil, ::T.untyped)
  ENCLOSING_MARK = ::T.let(nil, ::T.untyped)
  FINAL_PUNCTUATION = ::T.let(nil, ::T.untyped)
  FORMAT = ::T.let(nil, ::T.untyped)
  INITIAL_PUNCTUATION = ::T.let(nil, ::T.untyped)
  LETTER_NUMBER = ::T.let(nil, ::T.untyped)
  LINE_SEPARATOR = ::T.let(nil, ::T.untyped)
  LOWERCASE_LETTER = ::T.let(nil, ::T.untyped)
  MATH_SYMBOL = ::T.let(nil, ::T.untyped)
  MODIFIER_LETTER = ::T.let(nil, ::T.untyped)
  MODIFIER_SYMBOL = ::T.let(nil, ::T.untyped)
  NON_SPACING_MARK = ::T.let(nil, ::T.untyped)
  OPEN_PUNCTUATION = ::T.let(nil, ::T.untyped)
  OTHER_LETTER = ::T.let(nil, ::T.untyped)
  OTHER_NUMBER = ::T.let(nil, ::T.untyped)
  OTHER_PUNCTUATION = ::T.let(nil, ::T.untyped)
  OTHER_SYMBOL = ::T.let(nil, ::T.untyped)
  PARAGRAPH_SEPARATOR = ::T.let(nil, ::T.untyped)
  PRIVATE_USE = ::T.let(nil, ::T.untyped)
  SCRIPT_ADLAM = ::T.let(nil, ::T.untyped)
  SCRIPT_AHOM = ::T.let(nil, ::T.untyped)
  SCRIPT_ANATOLIAN_HIEROGLYPHS = ::T.let(nil, ::T.untyped)
  SCRIPT_ARABIC = ::T.let(nil, ::T.untyped)
  SCRIPT_ARMENIAN = ::T.let(nil, ::T.untyped)
  SCRIPT_AVESTAN = ::T.let(nil, ::T.untyped)
  SCRIPT_BALINESE = ::T.let(nil, ::T.untyped)
  SCRIPT_BAMUM = ::T.let(nil, ::T.untyped)
  SCRIPT_BASSA_VAH = ::T.let(nil, ::T.untyped)
  SCRIPT_BATAK = ::T.let(nil, ::T.untyped)
  SCRIPT_BENGALI = ::T.let(nil, ::T.untyped)
  SCRIPT_BHAIKSUKI = ::T.let(nil, ::T.untyped)
  SCRIPT_BOPOMOFO = ::T.let(nil, ::T.untyped)
  SCRIPT_BRAHMI = ::T.let(nil, ::T.untyped)
  SCRIPT_BRAILLE = ::T.let(nil, ::T.untyped)
  SCRIPT_BUGINESE = ::T.let(nil, ::T.untyped)
  SCRIPT_BUHID = ::T.let(nil, ::T.untyped)
  SCRIPT_CANADIAN_ABORIGINAL = ::T.let(nil, ::T.untyped)
  SCRIPT_CARIAN = ::T.let(nil, ::T.untyped)
  SCRIPT_CAUCASIAN_ALBANIAN = ::T.let(nil, ::T.untyped)
  SCRIPT_CHAKMA = ::T.let(nil, ::T.untyped)
  SCRIPT_CHAM = ::T.let(nil, ::T.untyped)
  SCRIPT_CHEROKEE = ::T.let(nil, ::T.untyped)
  SCRIPT_COMMON = ::T.let(nil, ::T.untyped)
  SCRIPT_COPTIC = ::T.let(nil, ::T.untyped)
  SCRIPT_CUNEIFORM = ::T.let(nil, ::T.untyped)
  SCRIPT_CYPRIOT = ::T.let(nil, ::T.untyped)
  SCRIPT_CYRILLIC = ::T.let(nil, ::T.untyped)
  SCRIPT_DESERET = ::T.let(nil, ::T.untyped)
  SCRIPT_DEVANAGARI = ::T.let(nil, ::T.untyped)
  SCRIPT_DUPLOYAN = ::T.let(nil, ::T.untyped)
  SCRIPT_EGYPTIAN_HIEROGLYPHS = ::T.let(nil, ::T.untyped)
  SCRIPT_ELBASAN = ::T.let(nil, ::T.untyped)
  SCRIPT_ETHIOPIC = ::T.let(nil, ::T.untyped)
  SCRIPT_GEORGIAN = ::T.let(nil, ::T.untyped)
  SCRIPT_GLAGOLITIC = ::T.let(nil, ::T.untyped)
  SCRIPT_GOTHIC = ::T.let(nil, ::T.untyped)
  SCRIPT_GRANTHA = ::T.let(nil, ::T.untyped)
  SCRIPT_GREEK = ::T.let(nil, ::T.untyped)
  SCRIPT_GUJARATI = ::T.let(nil, ::T.untyped)
  SCRIPT_GURMUKHI = ::T.let(nil, ::T.untyped)
  SCRIPT_HAN = ::T.let(nil, ::T.untyped)
  SCRIPT_HANGUL = ::T.let(nil, ::T.untyped)
  SCRIPT_HANUNOO = ::T.let(nil, ::T.untyped)
  SCRIPT_HATRAN = ::T.let(nil, ::T.untyped)
  SCRIPT_HEBREW = ::T.let(nil, ::T.untyped)
  SCRIPT_HIRAGANA = ::T.let(nil, ::T.untyped)
  SCRIPT_IMPERIAL_ARAMAIC = ::T.let(nil, ::T.untyped)
  SCRIPT_INHERITED = ::T.let(nil, ::T.untyped)
  SCRIPT_INSCRIPTIONAL_PAHLAVI = ::T.let(nil, ::T.untyped)
  SCRIPT_INSCRIPTIONAL_PARTHIAN = ::T.let(nil, ::T.untyped)
  SCRIPT_INVALID_CODE = ::T.let(nil, ::T.untyped)
  SCRIPT_JAVANESE = ::T.let(nil, ::T.untyped)
  SCRIPT_KAITHI = ::T.let(nil, ::T.untyped)
  SCRIPT_KANNADA = ::T.let(nil, ::T.untyped)
  SCRIPT_KATAKANA = ::T.let(nil, ::T.untyped)
  SCRIPT_KAYAH_LI = ::T.let(nil, ::T.untyped)
  SCRIPT_KHAROSHTHI = ::T.let(nil, ::T.untyped)
  SCRIPT_KHMER = ::T.let(nil, ::T.untyped)
  SCRIPT_KHOJKI = ::T.let(nil, ::T.untyped)
  SCRIPT_KHUDAWADI = ::T.let(nil, ::T.untyped)
  SCRIPT_LAO = ::T.let(nil, ::T.untyped)
  SCRIPT_LATIN = ::T.let(nil, ::T.untyped)
  SCRIPT_LEPCHA = ::T.let(nil, ::T.untyped)
  SCRIPT_LIMBU = ::T.let(nil, ::T.untyped)
  SCRIPT_LINEAR_A = ::T.let(nil, ::T.untyped)
  SCRIPT_LINEAR_B = ::T.let(nil, ::T.untyped)
  SCRIPT_LISU = ::T.let(nil, ::T.untyped)
  SCRIPT_LYCIAN = ::T.let(nil, ::T.untyped)
  SCRIPT_LYDIAN = ::T.let(nil, ::T.untyped)
  SCRIPT_MAHAJANI = ::T.let(nil, ::T.untyped)
  SCRIPT_MALAYALAM = ::T.let(nil, ::T.untyped)
  SCRIPT_MANDAIC = ::T.let(nil, ::T.untyped)
  SCRIPT_MANICHAEAN = ::T.let(nil, ::T.untyped)
  SCRIPT_MARCHEN = ::T.let(nil, ::T.untyped)
  SCRIPT_MASARAM_GONDI = ::T.let(nil, ::T.untyped)
  SCRIPT_MEETEI_MAYEK = ::T.let(nil, ::T.untyped)
  SCRIPT_MENDE_KIKAKUI = ::T.let(nil, ::T.untyped)
  SCRIPT_MEROITIC_CURSIVE = ::T.let(nil, ::T.untyped)
  SCRIPT_MEROITIC_HIEROGLYPHS = ::T.let(nil, ::T.untyped)
  SCRIPT_MIAO = ::T.let(nil, ::T.untyped)
  SCRIPT_MODI = ::T.let(nil, ::T.untyped)
  SCRIPT_MONGOLIAN = ::T.let(nil, ::T.untyped)
  SCRIPT_MRO = ::T.let(nil, ::T.untyped)
  SCRIPT_MULTANI = ::T.let(nil, ::T.untyped)
  SCRIPT_MYANMAR = ::T.let(nil, ::T.untyped)
  SCRIPT_NABATAEAN = ::T.let(nil, ::T.untyped)
  SCRIPT_NEWA = ::T.let(nil, ::T.untyped)
  SCRIPT_NEW_TAI_LUE = ::T.let(nil, ::T.untyped)
  SCRIPT_NKO = ::T.let(nil, ::T.untyped)
  SCRIPT_NUSHU = ::T.let(nil, ::T.untyped)
  SCRIPT_OGHAM = ::T.let(nil, ::T.untyped)
  SCRIPT_OLD_HUNGARIAN = ::T.let(nil, ::T.untyped)
  SCRIPT_OLD_ITALIC = ::T.let(nil, ::T.untyped)
  SCRIPT_OLD_NORTH_ARABIAN = ::T.let(nil, ::T.untyped)
  SCRIPT_OLD_PERMIC = ::T.let(nil, ::T.untyped)
  SCRIPT_OLD_PERSIAN = ::T.let(nil, ::T.untyped)
  SCRIPT_OLD_SOUTH_ARABIAN = ::T.let(nil, ::T.untyped)
  SCRIPT_OLD_TURKIC = ::T.let(nil, ::T.untyped)
  SCRIPT_OL_CHIKI = ::T.let(nil, ::T.untyped)
  SCRIPT_ORIYA = ::T.let(nil, ::T.untyped)
  SCRIPT_OSAGE = ::T.let(nil, ::T.untyped)
  SCRIPT_OSMANYA = ::T.let(nil, ::T.untyped)
  SCRIPT_PAHAWH_HMONG = ::T.let(nil, ::T.untyped)
  SCRIPT_PALMYRENE = ::T.let(nil, ::T.untyped)
  SCRIPT_PAU_CIN_HAU = ::T.let(nil, ::T.untyped)
  SCRIPT_PHAGS_PA = ::T.let(nil, ::T.untyped)
  SCRIPT_PHOENICIAN = ::T.let(nil, ::T.untyped)
  SCRIPT_PSALTER_PAHLAVI = ::T.let(nil, ::T.untyped)
  SCRIPT_REJANG = ::T.let(nil, ::T.untyped)
  SCRIPT_RUNIC = ::T.let(nil, ::T.untyped)
  SCRIPT_SAMARITAN = ::T.let(nil, ::T.untyped)
  SCRIPT_SAURASHTRA = ::T.let(nil, ::T.untyped)
  SCRIPT_SHARADA = ::T.let(nil, ::T.untyped)
  SCRIPT_SHAVIAN = ::T.let(nil, ::T.untyped)
  SCRIPT_SIDDHAM = ::T.let(nil, ::T.untyped)
  SCRIPT_SIGNWRITING = ::T.let(nil, ::T.untyped)
  SCRIPT_SINHALA = ::T.let(nil, ::T.untyped)
  SCRIPT_SORA_SOMPENG = ::T.let(nil, ::T.untyped)
  SCRIPT_SOYOMBO = ::T.let(nil, ::T.untyped)
  SCRIPT_SUNDANESE = ::T.let(nil, ::T.untyped)
  SCRIPT_SYLOTI_NAGRI = ::T.let(nil, ::T.untyped)
  SCRIPT_SYRIAC = ::T.let(nil, ::T.untyped)
  SCRIPT_TAGALOG = ::T.let(nil, ::T.untyped)
  SCRIPT_TAGBANWA = ::T.let(nil, ::T.untyped)
  SCRIPT_TAI_LE = ::T.let(nil, ::T.untyped)
  SCRIPT_TAI_THAM = ::T.let(nil, ::T.untyped)
  SCRIPT_TAI_VIET = ::T.let(nil, ::T.untyped)
  SCRIPT_TAKRI = ::T.let(nil, ::T.untyped)
  SCRIPT_TAMIL = ::T.let(nil, ::T.untyped)
  SCRIPT_TANGUT = ::T.let(nil, ::T.untyped)
  SCRIPT_TELUGU = ::T.let(nil, ::T.untyped)
  SCRIPT_THAANA = ::T.let(nil, ::T.untyped)
  SCRIPT_THAI = ::T.let(nil, ::T.untyped)
  SCRIPT_TIBETAN = ::T.let(nil, ::T.untyped)
  SCRIPT_TIFINAGH = ::T.let(nil, ::T.untyped)
  SCRIPT_TIRHUTA = ::T.let(nil, ::T.untyped)
  SCRIPT_UGARITIC = ::T.let(nil, ::T.untyped)
  SCRIPT_UNKNOWN = ::T.let(nil, ::T.untyped)
  SCRIPT_VAI = ::T.let(nil, ::T.untyped)
  SCRIPT_WARANG_CITI = ::T.let(nil, ::T.untyped)
  SCRIPT_YI = ::T.let(nil, ::T.untyped)
  SCRIPT_ZANABAZAR_SQUARE = ::T.let(nil, ::T.untyped)
  SPACE_SEPARATOR = ::T.let(nil, ::T.untyped)
  SPACING_MARK = ::T.let(nil, ::T.untyped)
  SURROGATE = ::T.let(nil, ::T.untyped)
  TITLECASE_LETTER = ::T.let(nil, ::T.untyped)
  UNASSIGNED = ::T.let(nil, ::T.untyped)
  UPPERCASE_LETTER = ::T.let(nil, ::T.untyped)
end

class GLib::Unicode::BreakType
  AFTER = ::T.let(nil, ::T.untyped)
  ALPHABETIC = ::T.let(nil, ::T.untyped)
  AMBIGUOUS = ::T.let(nil, ::T.untyped)
  BEFORE = ::T.let(nil, ::T.untyped)
  BEFORE_AND_AFTER = ::T.let(nil, ::T.untyped)
  CARRIAGE_RETURN = ::T.let(nil, ::T.untyped)
  CLOSE_PARANTHESIS = ::T.let(nil, ::T.untyped)
  CLOSE_PUNCTUATION = ::T.let(nil, ::T.untyped)
  COMBINING_MARK = ::T.let(nil, ::T.untyped)
  COMPLEX_CONTEXT = ::T.let(nil, ::T.untyped)
  CONDITIONAL_JAPANESE_STARTER = ::T.let(nil, ::T.untyped)
  CONTINGENT = ::T.let(nil, ::T.untyped)
  EMOJI_BASE = ::T.let(nil, ::T.untyped)
  EMOJI_MODIFIER = ::T.let(nil, ::T.untyped)
  EXCLAMATION = ::T.let(nil, ::T.untyped)
  HANGUL_LVT_SYLLABLE = ::T.let(nil, ::T.untyped)
  HANGUL_LV_SYLLABLE = ::T.let(nil, ::T.untyped)
  HANGUL_L_JAMO = ::T.let(nil, ::T.untyped)
  HANGUL_T_JAMO = ::T.let(nil, ::T.untyped)
  HANGUL_V_JAMO = ::T.let(nil, ::T.untyped)
  HEBREW_LETTER = ::T.let(nil, ::T.untyped)
  HYPHEN = ::T.let(nil, ::T.untyped)
  IDEOGRAPHIC = ::T.let(nil, ::T.untyped)
  INFIX_SEPARATOR = ::T.let(nil, ::T.untyped)
  INSEPARABLE = ::T.let(nil, ::T.untyped)
  LINE_FEED = ::T.let(nil, ::T.untyped)
  MANDATORY = ::T.let(nil, ::T.untyped)
  NEXT_LINE = ::T.let(nil, ::T.untyped)
  NON_BREAKING_GLUE = ::T.let(nil, ::T.untyped)
  NON_STARTER = ::T.let(nil, ::T.untyped)
  NUMERIC = ::T.let(nil, ::T.untyped)
  OPEN_PUNCTUATION = ::T.let(nil, ::T.untyped)
  POSTFIX = ::T.let(nil, ::T.untyped)
  PREFIX = ::T.let(nil, ::T.untyped)
  QUOTATION = ::T.let(nil, ::T.untyped)
  REGIONAL_INDICATOR = ::T.let(nil, ::T.untyped)
  SPACE = ::T.let(nil, ::T.untyped)
  SURROGATE = ::T.let(nil, ::T.untyped)
  SYMBOL = ::T.let(nil, ::T.untyped)
  UNKNOWN = ::T.let(nil, ::T.untyped)
  WORD_JOINER = ::T.let(nil, ::T.untyped)
  ZERO_WIDTH_JOINER = ::T.let(nil, ::T.untyped)
  ZERO_WIDTH_SPACE = ::T.let(nil, ::T.untyped)
end

class GLib::Unicode::Script
  ADLAM = ::T.let(nil, ::T.untyped)
  AHOM = ::T.let(nil, ::T.untyped)
  ANATOLIAN_HIEROGLYPHS = ::T.let(nil, ::T.untyped)
  ARABIC = ::T.let(nil, ::T.untyped)
  ARMENIAN = ::T.let(nil, ::T.untyped)
  AVESTAN = ::T.let(nil, ::T.untyped)
  BALINESE = ::T.let(nil, ::T.untyped)
  BAMUM = ::T.let(nil, ::T.untyped)
  BASSA_VAH = ::T.let(nil, ::T.untyped)
  BATAK = ::T.let(nil, ::T.untyped)
  BENGALI = ::T.let(nil, ::T.untyped)
  BHAIKSUKI = ::T.let(nil, ::T.untyped)
  BOPOMOFO = ::T.let(nil, ::T.untyped)
  BRAHMI = ::T.let(nil, ::T.untyped)
  BRAILLE = ::T.let(nil, ::T.untyped)
  BUGINESE = ::T.let(nil, ::T.untyped)
  BUHID = ::T.let(nil, ::T.untyped)
  CANADIAN_ABORIGINAL = ::T.let(nil, ::T.untyped)
  CARIAN = ::T.let(nil, ::T.untyped)
  CAUCASIAN_ALBANIAN = ::T.let(nil, ::T.untyped)
  CHAKMA = ::T.let(nil, ::T.untyped)
  CHAM = ::T.let(nil, ::T.untyped)
  CHEROKEE = ::T.let(nil, ::T.untyped)
  COMMON = ::T.let(nil, ::T.untyped)
  COPTIC = ::T.let(nil, ::T.untyped)
  CUNEIFORM = ::T.let(nil, ::T.untyped)
  CYPRIOT = ::T.let(nil, ::T.untyped)
  CYRILLIC = ::T.let(nil, ::T.untyped)
  DESERET = ::T.let(nil, ::T.untyped)
  DEVANAGARI = ::T.let(nil, ::T.untyped)
  DUPLOYAN = ::T.let(nil, ::T.untyped)
  EGYPTIAN_HIEROGLYPHS = ::T.let(nil, ::T.untyped)
  ELBASAN = ::T.let(nil, ::T.untyped)
  ETHIOPIC = ::T.let(nil, ::T.untyped)
  GEORGIAN = ::T.let(nil, ::T.untyped)
  GLAGOLITIC = ::T.let(nil, ::T.untyped)
  GOTHIC = ::T.let(nil, ::T.untyped)
  GRANTHA = ::T.let(nil, ::T.untyped)
  GREEK = ::T.let(nil, ::T.untyped)
  GUJARATI = ::T.let(nil, ::T.untyped)
  GURMUKHI = ::T.let(nil, ::T.untyped)
  HAN = ::T.let(nil, ::T.untyped)
  HANGUL = ::T.let(nil, ::T.untyped)
  HANUNOO = ::T.let(nil, ::T.untyped)
  HATRAN = ::T.let(nil, ::T.untyped)
  HEBREW = ::T.let(nil, ::T.untyped)
  HIRAGANA = ::T.let(nil, ::T.untyped)
  IMPERIAL_ARAMAIC = ::T.let(nil, ::T.untyped)
  INHERITED = ::T.let(nil, ::T.untyped)
  INSCRIPTIONAL_PAHLAVI = ::T.let(nil, ::T.untyped)
  INSCRIPTIONAL_PARTHIAN = ::T.let(nil, ::T.untyped)
  INVALID_CODE = ::T.let(nil, ::T.untyped)
  JAVANESE = ::T.let(nil, ::T.untyped)
  KAITHI = ::T.let(nil, ::T.untyped)
  KANNADA = ::T.let(nil, ::T.untyped)
  KATAKANA = ::T.let(nil, ::T.untyped)
  KAYAH_LI = ::T.let(nil, ::T.untyped)
  KHAROSHTHI = ::T.let(nil, ::T.untyped)
  KHMER = ::T.let(nil, ::T.untyped)
  KHOJKI = ::T.let(nil, ::T.untyped)
  KHUDAWADI = ::T.let(nil, ::T.untyped)
  LAO = ::T.let(nil, ::T.untyped)
  LATIN = ::T.let(nil, ::T.untyped)
  LEPCHA = ::T.let(nil, ::T.untyped)
  LIMBU = ::T.let(nil, ::T.untyped)
  LINEAR_A = ::T.let(nil, ::T.untyped)
  LINEAR_B = ::T.let(nil, ::T.untyped)
  LISU = ::T.let(nil, ::T.untyped)
  LYCIAN = ::T.let(nil, ::T.untyped)
  LYDIAN = ::T.let(nil, ::T.untyped)
  MAHAJANI = ::T.let(nil, ::T.untyped)
  MALAYALAM = ::T.let(nil, ::T.untyped)
  MANDAIC = ::T.let(nil, ::T.untyped)
  MANICHAEAN = ::T.let(nil, ::T.untyped)
  MARCHEN = ::T.let(nil, ::T.untyped)
  MASARAM_GONDI = ::T.let(nil, ::T.untyped)
  MEETEI_MAYEK = ::T.let(nil, ::T.untyped)
  MENDE_KIKAKUI = ::T.let(nil, ::T.untyped)
  MEROITIC_CURSIVE = ::T.let(nil, ::T.untyped)
  MEROITIC_HIEROGLYPHS = ::T.let(nil, ::T.untyped)
  MIAO = ::T.let(nil, ::T.untyped)
  MODI = ::T.let(nil, ::T.untyped)
  MONGOLIAN = ::T.let(nil, ::T.untyped)
  MRO = ::T.let(nil, ::T.untyped)
  MULTANI = ::T.let(nil, ::T.untyped)
  MYANMAR = ::T.let(nil, ::T.untyped)
  NABATAEAN = ::T.let(nil, ::T.untyped)
  NEWA = ::T.let(nil, ::T.untyped)
  NEW_TAI_LUE = ::T.let(nil, ::T.untyped)
  NKO = ::T.let(nil, ::T.untyped)
  NUSHU = ::T.let(nil, ::T.untyped)
  OGHAM = ::T.let(nil, ::T.untyped)
  OLD_HUNGARIAN = ::T.let(nil, ::T.untyped)
  OLD_ITALIC = ::T.let(nil, ::T.untyped)
  OLD_NORTH_ARABIAN = ::T.let(nil, ::T.untyped)
  OLD_PERMIC = ::T.let(nil, ::T.untyped)
  OLD_PERSIAN = ::T.let(nil, ::T.untyped)
  OLD_SOUTH_ARABIAN = ::T.let(nil, ::T.untyped)
  OLD_TURKIC = ::T.let(nil, ::T.untyped)
  OL_CHIKI = ::T.let(nil, ::T.untyped)
  ORIYA = ::T.let(nil, ::T.untyped)
  OSAGE = ::T.let(nil, ::T.untyped)
  OSMANYA = ::T.let(nil, ::T.untyped)
  PAHAWH_HMONG = ::T.let(nil, ::T.untyped)
  PALMYRENE = ::T.let(nil, ::T.untyped)
  PAU_CIN_HAU = ::T.let(nil, ::T.untyped)
  PHAGS_PA = ::T.let(nil, ::T.untyped)
  PHOENICIAN = ::T.let(nil, ::T.untyped)
  PSALTER_PAHLAVI = ::T.let(nil, ::T.untyped)
  REJANG = ::T.let(nil, ::T.untyped)
  RUNIC = ::T.let(nil, ::T.untyped)
  SAMARITAN = ::T.let(nil, ::T.untyped)
  SAURASHTRA = ::T.let(nil, ::T.untyped)
  SHARADA = ::T.let(nil, ::T.untyped)
  SHAVIAN = ::T.let(nil, ::T.untyped)
  SIDDHAM = ::T.let(nil, ::T.untyped)
  SIGNWRITING = ::T.let(nil, ::T.untyped)
  SINHALA = ::T.let(nil, ::T.untyped)
  SORA_SOMPENG = ::T.let(nil, ::T.untyped)
  SOYOMBO = ::T.let(nil, ::T.untyped)
  SUNDANESE = ::T.let(nil, ::T.untyped)
  SYLOTI_NAGRI = ::T.let(nil, ::T.untyped)
  SYRIAC = ::T.let(nil, ::T.untyped)
  TAGALOG = ::T.let(nil, ::T.untyped)
  TAGBANWA = ::T.let(nil, ::T.untyped)
  TAI_LE = ::T.let(nil, ::T.untyped)
  TAI_THAM = ::T.let(nil, ::T.untyped)
  TAI_VIET = ::T.let(nil, ::T.untyped)
  TAKRI = ::T.let(nil, ::T.untyped)
  TAMIL = ::T.let(nil, ::T.untyped)
  TANGUT = ::T.let(nil, ::T.untyped)
  TELUGU = ::T.let(nil, ::T.untyped)
  THAANA = ::T.let(nil, ::T.untyped)
  THAI = ::T.let(nil, ::T.untyped)
  TIBETAN = ::T.let(nil, ::T.untyped)
  TIFINAGH = ::T.let(nil, ::T.untyped)
  TIRHUTA = ::T.let(nil, ::T.untyped)
  UGARITIC = ::T.let(nil, ::T.untyped)
  UNKNOWN = ::T.let(nil, ::T.untyped)
  VAI = ::T.let(nil, ::T.untyped)
  WARANG_CITI = ::T.let(nil, ::T.untyped)
  YI = ::T.let(nil, ::T.untyped)
  ZANABAZAR_SQUARE = ::T.let(nil, ::T.untyped)
end

class GLib::Unicode::Type
  CLOSE_PUNCTUATION = ::T.let(nil, ::T.untyped)
  CONNECT_PUNCTUATION = ::T.let(nil, ::T.untyped)
  CONTROL = ::T.let(nil, ::T.untyped)
  CURRENCY_SYMBOL = ::T.let(nil, ::T.untyped)
  DASH_PUNCTUATION = ::T.let(nil, ::T.untyped)
  DECIMAL_NUMBER = ::T.let(nil, ::T.untyped)
  ENCLOSING_MARK = ::T.let(nil, ::T.untyped)
  FINAL_PUNCTUATION = ::T.let(nil, ::T.untyped)
  FORMAT = ::T.let(nil, ::T.untyped)
  INITIAL_PUNCTUATION = ::T.let(nil, ::T.untyped)
  LETTER_NUMBER = ::T.let(nil, ::T.untyped)
  LINE_SEPARATOR = ::T.let(nil, ::T.untyped)
  LOWERCASE_LETTER = ::T.let(nil, ::T.untyped)
  MATH_SYMBOL = ::T.let(nil, ::T.untyped)
  MODIFIER_LETTER = ::T.let(nil, ::T.untyped)
  MODIFIER_SYMBOL = ::T.let(nil, ::T.untyped)
  NON_SPACING_MARK = ::T.let(nil, ::T.untyped)
  OPEN_PUNCTUATION = ::T.let(nil, ::T.untyped)
  OTHER_LETTER = ::T.let(nil, ::T.untyped)
  OTHER_NUMBER = ::T.let(nil, ::T.untyped)
  OTHER_PUNCTUATION = ::T.let(nil, ::T.untyped)
  OTHER_SYMBOL = ::T.let(nil, ::T.untyped)
  PARAGRAPH_SEPARATOR = ::T.let(nil, ::T.untyped)
  PRIVATE_USE = ::T.let(nil, ::T.untyped)
  SPACE_SEPARATOR = ::T.let(nil, ::T.untyped)
  SPACING_MARK = ::T.let(nil, ::T.untyped)
  SURROGATE = ::T.let(nil, ::T.untyped)
  TITLECASE_LETTER = ::T.let(nil, ::T.untyped)
  UNASSIGNED = ::T.let(nil, ::T.untyped)
  UPPERCASE_LETTER = ::T.let(nil, ::T.untyped)
end

class GLib::UserDirectory
  DESKTOP = ::T.let(nil, ::T.untyped)
  DIRECTORY_DESKTOP = ::T.let(nil, ::T.untyped)
  DIRECTORY_DOCUMENTS = ::T.let(nil, ::T.untyped)
  DIRECTORY_DOWNLOAD = ::T.let(nil, ::T.untyped)
  DIRECTORY_MUSIC = ::T.let(nil, ::T.untyped)
  DIRECTORY_PICTURES = ::T.let(nil, ::T.untyped)
  DIRECTORY_PUBLIC_SHARE = ::T.let(nil, ::T.untyped)
  DIRECTORY_TEMPLATES = ::T.let(nil, ::T.untyped)
  DIRECTORY_VIDEOS = ::T.let(nil, ::T.untyped)
  DOCUMENTS = ::T.let(nil, ::T.untyped)
  DOWNLOAD = ::T.let(nil, ::T.untyped)
  MUSIC = ::T.let(nil, ::T.untyped)
  N_DIRECTORIES = ::T.let(nil, ::T.untyped)
  PICTURES = ::T.let(nil, ::T.untyped)
  PUBLIC_SHARE = ::T.let(nil, ::T.untyped)
  TEMPLATES = ::T.let(nil, ::T.untyped)
  VIDEOS = ::T.let(nil, ::T.untyped)
end

class GLib::VariantType
  ANY = ::T.let(nil, ::T.untyped)
  ARRAY = ::T.let(nil, ::T.untyped)
  BASIC = ::T.let(nil, ::T.untyped)
  BOOLEAN = ::T.let(nil, ::T.untyped)
  BYTE = ::T.let(nil, ::T.untyped)
  BYTESTRING = ::T.let(nil, ::T.untyped)
  BYTESTRING_ARRAY = ::T.let(nil, ::T.untyped)
  DICTIONARY = ::T.let(nil, ::T.untyped)
  DICT_ENTRY = ::T.let(nil, ::T.untyped)
  DOUBLE = ::T.let(nil, ::T.untyped)
  HANDLE = ::T.let(nil, ::T.untyped)
  INT16 = ::T.let(nil, ::T.untyped)
  INT32 = ::T.let(nil, ::T.untyped)
  INT64 = ::T.let(nil, ::T.untyped)
  MAYBE = ::T.let(nil, ::T.untyped)
  OBJECT_PATH = ::T.let(nil, ::T.untyped)
  OBJECT_PATH_ARRAY = ::T.let(nil, ::T.untyped)
  SIGNATURE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  STRING_ARRAY = ::T.let(nil, ::T.untyped)
  TUPLE = ::T.let(nil, ::T.untyped)
  UINT16 = ::T.let(nil, ::T.untyped)
  UINT32 = ::T.let(nil, ::T.untyped)
  UINT64 = ::T.let(nil, ::T.untyped)
  UNIT = ::T.let(nil, ::T.untyped)
  VARDICT = ::T.let(nil, ::T.untyped)
  VARIANT = ::T.let(nil, ::T.untyped)
end

module GLib::Version
  MAJOR = ::T.let(nil, ::T.untyped)
  MICRO = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
end

module GObjectIntrospection
  BUILD_VERSION = ::T.let(nil, ::T.untyped)
  LOG_DOMAIN = ::T.let(nil, ::T.untyped)
end

class GObjectIntrospection::ArrayType
  ARRAY = ::T.let(nil, ::T.untyped)
  BYTE_ARRAY = ::T.let(nil, ::T.untyped)
  C = ::T.let(nil, ::T.untyped)
  PTR_ARRAY = ::T.let(nil, ::T.untyped)
end

class GObjectIntrospection::BaseInfo
  include ::Enumerable
end

class GObjectIntrospection::Direction
  IN = ::T.let(nil, ::T.untyped)
  INOUT = ::T.let(nil, ::T.untyped)
  OUT = ::T.let(nil, ::T.untyped)
end

class GObjectIntrospection::FieldInfoFlags
  READABLE = ::T.let(nil, ::T.untyped)
  WRITABLE = ::T.let(nil, ::T.untyped)
end

class GObjectIntrospection::FunctionInfoFlags
  IS_CONSTRUCTOR = ::T.let(nil, ::T.untyped)
  IS_GETTER = ::T.let(nil, ::T.untyped)
  IS_METHOD = ::T.let(nil, ::T.untyped)
  IS_SETTER = ::T.let(nil, ::T.untyped)
  THROWS = ::T.let(nil, ::T.untyped)
  WRAPS_VFUNC = ::T.let(nil, ::T.untyped)
end

class GObjectIntrospection::InfoType
  ARG = ::T.let(nil, ::T.untyped)
  BOXED = ::T.let(nil, ::T.untyped)
  CALLBACK = ::T.let(nil, ::T.untyped)
  CONSTANT = ::T.let(nil, ::T.untyped)
  ENUM = ::T.let(nil, ::T.untyped)
  FIELD = ::T.let(nil, ::T.untyped)
  FLAGS = ::T.let(nil, ::T.untyped)
  FUNCTION = ::T.let(nil, ::T.untyped)
  INTERFACE = ::T.let(nil, ::T.untyped)
  INVALID = ::T.let(nil, ::T.untyped)
  INVALID_0 = ::T.let(nil, ::T.untyped)
  OBJECT = ::T.let(nil, ::T.untyped)
  PROPERTY = ::T.let(nil, ::T.untyped)
  SIGNAL = ::T.let(nil, ::T.untyped)
  STRUCT = ::T.let(nil, ::T.untyped)
  TYPE = ::T.let(nil, ::T.untyped)
  UNION = ::T.let(nil, ::T.untyped)
  UNRESOLVED = ::T.let(nil, ::T.untyped)
  VALUE = ::T.let(nil, ::T.untyped)
  VFUNC = ::T.let(nil, ::T.untyped)
end

class GObjectIntrospection::RepositoryError
  include ::GLib::ErrorInfo
  LIBRARY_NOT_FOUND = ::T.let(nil, ::T.untyped)
  NAMESPACE_MISMATCH = ::T.let(nil, ::T.untyped)
  NAMESPACE_VERSION_CONFLICT = ::T.let(nil, ::T.untyped)
  TYPELIB_NOT_FOUND = ::T.let(nil, ::T.untyped)
end

class GObjectIntrospection::RepositoryError::LibraryNotFound
end

class GObjectIntrospection::RepositoryError::LibraryNotFound
end

class GObjectIntrospection::RepositoryError::NamespaceMismatch
end

class GObjectIntrospection::RepositoryError::NamespaceMismatch
end

class GObjectIntrospection::RepositoryError::NamespaceVersionConflict
end

class GObjectIntrospection::RepositoryError::NamespaceVersionConflict
end

class GObjectIntrospection::RepositoryError::TypelibNotFound
end

class GObjectIntrospection::RepositoryError::TypelibNotFound
end

class GObjectIntrospection::RepositoryError
end

class GObjectIntrospection::RepositoryLoadFlags
  G_IREPOSITORY_LOAD_FLAG_LAZY = ::T.let(nil, ::T.untyped)
end

class GObjectIntrospection::ScopeType
  ASYNC = ::T.let(nil, ::T.untyped)
  CALL = ::T.let(nil, ::T.untyped)
  INVALID = ::T.let(nil, ::T.untyped)
  NOTIFIED = ::T.let(nil, ::T.untyped)
end

class GObjectIntrospection::Transfer
  CONTAINER = ::T.let(nil, ::T.untyped)
  EVERYTHING = ::T.let(nil, ::T.untyped)
  NOTHING = ::T.let(nil, ::T.untyped)
end

class GObjectIntrospection::TypeTag
  ARRAY = ::T.let(nil, ::T.untyped)
  BOOLEAN = ::T.let(nil, ::T.untyped)
  DOUBLE = ::T.let(nil, ::T.untyped)
  ERROR = ::T.let(nil, ::T.untyped)
  FILENAME = ::T.let(nil, ::T.untyped)
  FLOAT = ::T.let(nil, ::T.untyped)
  GHASH = ::T.let(nil, ::T.untyped)
  GLIST = ::T.let(nil, ::T.untyped)
  GSLIST = ::T.let(nil, ::T.untyped)
  GTYPE = ::T.let(nil, ::T.untyped)
  INT16 = ::T.let(nil, ::T.untyped)
  INT32 = ::T.let(nil, ::T.untyped)
  INT64 = ::T.let(nil, ::T.untyped)
  INT8 = ::T.let(nil, ::T.untyped)
  INTERFACE = ::T.let(nil, ::T.untyped)
  UINT16 = ::T.let(nil, ::T.untyped)
  UINT32 = ::T.let(nil, ::T.untyped)
  UINT64 = ::T.let(nil, ::T.untyped)
  UINT8 = ::T.let(nil, ::T.untyped)
  UNICHAR = ::T.let(nil, ::T.untyped)
  UTF8 = ::T.let(nil, ::T.untyped)
  VOID = ::T.let(nil, ::T.untyped)
end

class GObjectIntrospection::VFuncInfo
  UNKNOWN_OFFSET = ::T.let(nil, ::T.untyped)
end

class GObjectIntrospection::VFuncInfoFlags
  MUST_CHAIN_UP = ::T.let(nil, ::T.untyped)
  MUST_NOT_OVERRIDE = ::T.let(nil, ::T.untyped)
  MUST_OVERRIDE = ::T.let(nil, ::T.untyped)
  THROWS = ::T.let(nil, ::T.untyped)
end

module GObjectIntrospection::Version
  MAJOR = ::T.let(nil, ::T.untyped)
  MICRO = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
end

module GameIcons
  VERSION = ::T.let(nil, ::T.untyped)
end

module GdkPixbuf
  FEATURES_H = ::T.let(nil, ::T.untyped)
  LOG_DOMAIN = ::T.let(nil, ::T.untyped)
  MAGIC_NUMBER = ::T.let(nil, ::T.untyped)
  MAJOR = ::T.let(nil, ::T.untyped)
  MICRO = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PIXDATA_HEADER_LENGTH = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class GdkPixbuf::Colorspace
  RGB = ::T.let(nil, ::T.untyped)
end

class GdkPixbuf::InterpType
  BILINEAR = ::T.let(nil, ::T.untyped)
  HYPER = ::T.let(nil, ::T.untyped)
  NEAREST = ::T.let(nil, ::T.untyped)
  TILES = ::T.let(nil, ::T.untyped)
end

class GdkPixbuf::Pixbuf
  include ::Gio::Icon
  include ::Gio::LoadableIcon
  include ::GLib::Interface
end

class GdkPixbuf::PixbufAlphaMode
  BILEVEL = ::T.let(nil, ::T.untyped)
  FULL = ::T.let(nil, ::T.untyped)
end

class GdkPixbuf::PixbufError
  include ::GLib::ErrorInfo
  BAD_OPTION = ::T.let(nil, ::T.untyped)
  CORRUPT_IMAGE = ::T.let(nil, ::T.untyped)
  FAILED = ::T.let(nil, ::T.untyped)
  INCOMPLETE_ANIMATION = ::T.let(nil, ::T.untyped)
  INSUFFICIENT_MEMORY = ::T.let(nil, ::T.untyped)
  UNKNOWN_TYPE = ::T.let(nil, ::T.untyped)
  UNSUPPORTED_OPERATION = ::T.let(nil, ::T.untyped)
end

class GdkPixbuf::PixbufError::BadOption
end

class GdkPixbuf::PixbufError::BadOption
end

class GdkPixbuf::PixbufError::CorruptImage
end

class GdkPixbuf::PixbufError::CorruptImage
end

class GdkPixbuf::PixbufError::Failed
end

class GdkPixbuf::PixbufError::Failed
end

class GdkPixbuf::PixbufError::IncompleteAnimation
end

class GdkPixbuf::PixbufError::IncompleteAnimation
end

class GdkPixbuf::PixbufError::InsufficientMemory
end

class GdkPixbuf::PixbufError::InsufficientMemory
end

class GdkPixbuf::PixbufError::UnknownType
end

class GdkPixbuf::PixbufError::UnknownType
end

class GdkPixbuf::PixbufError::UnsupportedOperation
end

class GdkPixbuf::PixbufError::UnsupportedOperation
end

class GdkPixbuf::PixbufError
end

class GdkPixbuf::PixbufRotation
  CLOCKWISE = ::T.let(nil, ::T.untyped)
  COUNTERCLOCKWISE = ::T.let(nil, ::T.untyped)
  NONE = ::T.let(nil, ::T.untyped)
  UPSIDEDOWN = ::T.let(nil, ::T.untyped)
end

module GdkPixbuf::PixdataDumpType
  CONST = ::T.let(nil, ::T.untyped)
  CTYPES = ::T.let(nil, ::T.untyped)
  GTYPES = ::T.let(nil, ::T.untyped)
  MACROS = ::T.let(nil, ::T.untyped)
  PIXDATA_STREAM = ::T.let(nil, ::T.untyped)
  PIXDATA_STRUCT = ::T.let(nil, ::T.untyped)
  RLE_DECODER = ::T.let(nil, ::T.untyped)
  STATIC = ::T.let(nil, ::T.untyped)
end

module GdkPixbuf::PixdataType
  COLOR_TYPE_MASK = ::T.let(nil, ::T.untyped)
  COLOR_TYPE_RGB = ::T.let(nil, ::T.untyped)
  COLOR_TYPE_RGBA = ::T.let(nil, ::T.untyped)
  ENCODING_MASK = ::T.let(nil, ::T.untyped)
  ENCODING_RAW = ::T.let(nil, ::T.untyped)
  ENCODING_RLE = ::T.let(nil, ::T.untyped)
  SAMPLE_WIDTH_8 = ::T.let(nil, ::T.untyped)
  SAMPLE_WIDTH_MASK = ::T.let(nil, ::T.untyped)
end

module GdkPixbuf::Version
  STRING = ::T.let(nil, ::T.untyped)
end

module Gem
  ConfigMap = ::T.let(nil, ::T.untyped)
  RbConfigPriorities = ::T.let(nil, ::T.untyped)
  RubyGemsVersion = ::T.let(nil, ::T.untyped)
  UNTAINT = ::T.let(nil, ::T.untyped)
end

class Gem::Exception
  extend ::Gem::Deprecate
end

class Gem::Ext::BuildError
end

class Gem::Ext::BuildError
end

class Gem::Ext::ExtConfBuilder
end

Gem::Ext::ExtConfBuilder::FileEntry = FileUtils::Entry_

class Gem::Ext::ExtConfBuilder
  def self.build(extension, dest_path, results, args=T.unsafe(nil), lib_dir=T.unsafe(nil)); end

  def self.get_relative_path(path); end
end

class Gem::Package
  def gem(); end
end

class Gem::Package::DigestIO
  def digests(); end

  def initialize(io, digests); end

  def write(data); end
end

class Gem::Package::DigestIO
  def self.wrap(io, digests); end
end

class Gem::Package::FileSource
  def initialize(path); end

  def path(); end

  def start(); end

  def with_read_io(&block); end

  def with_write_io(&block); end
end

class Gem::Package::FileSource
end

class Gem::Package::IOSource
  def initialize(io); end

  def io(); end

  def path(); end

  def start(); end

  def with_read_io(); end

  def with_write_io(); end
end

class Gem::Package::IOSource
end

class Gem::Package::Old
  def extract_files(destination_dir); end

  def file_list(io); end

  def read_until_dashes(io); end

  def skip_ruby(io); end
end

class Gem::Package::Old
end

class Gem::Package::Source
end

class Gem::Package::Source
end

class Gem::Package::TarHeader
  def ==(other); end

  def checksum(); end

  def devmajor(); end

  def devminor(); end

  def empty?(); end

  def gid(); end

  def gname(); end

  def initialize(vals); end

  def linkname(); end

  def magic(); end

  def mode(); end

  def mtime(); end

  def name(); end

  def prefix(); end

  def size(); end

  def typeflag(); end

  def uid(); end

  def uname(); end

  def update_checksum(); end

  def version(); end
  EMPTY_HEADER = ::T.let(nil, ::T.untyped)
  FIELDS = ::T.let(nil, ::T.untyped)
  PACK_FORMAT = ::T.let(nil, ::T.untyped)
  UNPACK_FORMAT = ::T.let(nil, ::T.untyped)
end

class Gem::Package::TarHeader
  def self.from(stream); end

  def self.oct_or_256based(str); end

  def self.strict_oct(str); end
end

class Gem::Package::TarReader::Entry
  def bytes_read(); end

  def check_closed(); end

  def close(); end

  def closed?(); end

  def directory?(); end

  def eof?(); end

  def file?(); end

  def full_name(); end

  def getc(); end

  def header(); end

  def initialize(header, io); end

  def length(); end

  def pos(); end

  def read(len=T.unsafe(nil)); end

  def readpartial(maxlen=T.unsafe(nil), outbuf=T.unsafe(nil)); end

  def rewind(); end

  def size(); end

  def symlink?(); end
end

class Gem::Package::TarReader::Entry
end

class Gem::Package::TarReader
  def self.new(io); end
end

class Gem::Package::TarWriter
  def self.new(io); end
end

class Gem::Package
  def self.new(gem, security_policy=T.unsafe(nil)); end

  def self.raw_spec(path, security_policy=T.unsafe(nil)); end
end

class Gem::PathSupport
  def home(); end

  def initialize(env); end

  def path(); end

  def spec_cache_dir(); end
end

class Gem::RemoteFetcher::FetchError
  include ::Gem::UriParsing
  def initialize(message, uri); end

  def uri(); end

  def uri=(uri); end
end

class Gem::RemoteFetcher::FetchError
end

class Gem::RemoteFetcher::UnknownHostError
end

class Gem::RemoteFetcher::UnknownHostError
end

class Gem::Request
  extend ::Gem::UserInteraction
  extend ::Gem::DefaultUserInteraction
  extend ::Gem::Text
end

class Gem::Resolver::CurrentSet
end

class Gem::Resolver::CurrentSet
end

class Gem::Resolver::LocalSpecification
end

class Gem::Resolver::LocalSpecification
end

class Gem::Resolver::Molinillo::DependencyGraph::Log
  def add_edge_no_circular(graph, origin, destination, requirement); end

  def add_vertex(graph, name, payload, root); end

  def delete_edge(graph, origin_name, destination_name, requirement); end

  def detach_vertex_named(graph, name); end

  def each(&blk); end

  def pop!(graph); end

  def reverse_each(); end

  def rewind_to(graph, tag); end

  def set_payload(graph, name, payload); end

  def tag(graph, tag); end
end

class Gem::Resolver::Molinillo::DependencyGraph::Log
  extend ::Enumerable
end

class Gem::RuntimeRequirementNotMetError
  def suggestion(); end

  def suggestion=(suggestion); end
end

class Gem::RuntimeRequirementNotMetError
end

class Gem::Security::Exception
end

class Gem::Security::Exception
end

Gem::Security::KEY_ALGORITHM = OpenSSL::PKey::RSA

class Gem::Security::Policy
  include ::Gem::UserInteraction
  include ::Gem::DefaultUserInteraction
  include ::Gem::Text
  def check_cert(signer, issuer, time); end

  def check_chain(chain, time); end

  def check_data(public_key, digest, signature, data); end

  def check_key(signer, key); end

  def check_root(chain, time); end

  def check_trust(chain, digester, trust_dir); end

  def initialize(name, policy=T.unsafe(nil), opt=T.unsafe(nil)); end

  def name(); end

  def only_signed(); end

  def only_signed=(only_signed); end

  def only_trusted(); end

  def only_trusted=(only_trusted); end

  def subject(certificate); end

  def verify(chain, key=T.unsafe(nil), digests=T.unsafe(nil), signatures=T.unsafe(nil), full_name=T.unsafe(nil)); end

  def verify_chain(); end

  def verify_chain=(verify_chain); end

  def verify_data(); end

  def verify_data=(verify_data); end

  def verify_root(); end

  def verify_root=(verify_root); end

  def verify_signatures(spec, digests, signatures); end

  def verify_signer(); end

  def verify_signer=(verify_signer); end
end

class Gem::Security::Policy
end

class Gem::Security::Signer
  include ::Gem::UserInteraction
  include ::Gem::DefaultUserInteraction
  include ::Gem::Text
  def cert_chain(); end

  def cert_chain=(cert_chain); end

  def digest_algorithm(); end

  def digest_name(); end

  def extract_name(cert); end

  def initialize(key, cert_chain, passphrase=T.unsafe(nil), options=T.unsafe(nil)); end

  def key(); end

  def key=(key); end

  def load_cert_chain(); end

  def options(); end

  def re_sign_key(expiration_length: T.unsafe(nil)); end

  def sign(data); end
end

class Gem::Security::Signer
  def self.re_sign_cert(expired_cert, expired_cert_path, private_key); end
end

class Gem::Security::TrustDir
  def cert_path(certificate); end

  def dir(); end

  def each_certificate(); end

  def initialize(dir, permissions=T.unsafe(nil)); end

  def issuer_of(certificate); end

  def load_certificate(certificate_file); end

  def name_path(name); end

  def trust_cert(certificate); end

  def verify(); end
end

module Gem::Security
  def self.alt_name_or_x509_entry(certificate, x509_entry); end

  def self.create_cert(subject, key, age=T.unsafe(nil), extensions=T.unsafe(nil), serial=T.unsafe(nil)); end

  def self.create_cert_email(email, key, age=T.unsafe(nil), extensions=T.unsafe(nil)); end

  def self.create_cert_self_signed(subject, key, age=T.unsafe(nil), extensions=T.unsafe(nil), serial=T.unsafe(nil)); end

  def self.create_key(length=T.unsafe(nil), algorithm=T.unsafe(nil)); end

  def self.email_to_name(email_address); end

  def self.re_sign(expired_certificate, private_key, age=T.unsafe(nil), extensions=T.unsafe(nil)); end

  def self.reset(); end

  def self.sign(certificate, signing_key, signing_cert, age=T.unsafe(nil), extensions=T.unsafe(nil), serial=T.unsafe(nil)); end

  def self.trust_dir(); end

  def self.trusted_certificates(&block); end

  def self.write(pemmable, path, permissions=T.unsafe(nil), passphrase=T.unsafe(nil), cipher=T.unsafe(nil)); end
end

class Gem::SpecFetcher
  include ::Gem::UserInteraction
  include ::Gem::DefaultUserInteraction
  include ::Gem::Text
  def available_specs(type); end

  def detect(type=T.unsafe(nil)); end

  def initialize(sources=T.unsafe(nil)); end

  def latest_specs(); end

  def prerelease_specs(); end

  def search_for_dependency(dependency, matching_platform=T.unsafe(nil)); end

  def sources(); end

  def spec_for_dependency(dependency, matching_platform=T.unsafe(nil)); end

  def specs(); end

  def suggest_gems_from_name(gem_name, type=T.unsafe(nil)); end

  def tuples_for(source, type, gracefully_ignore=T.unsafe(nil)); end
end

class Gem::SpecFetcher
  def self.fetcher(); end

  def self.fetcher=(fetcher); end
end

class Gem::Specification
  include ::Bundler::MatchPlatform
  include ::Bundler::GemHelpers
  def removed_method_calls(); end

  def to_ruby(); end
  REMOVED_METHODS = ::T.let(nil, ::T.untyped)
end

class Gem::Specification
  extend ::Gem::Deprecate
  extend ::Enumerable
end

class Gem::SpecificationPolicy
  include ::Gem::UserInteraction
  include ::Gem::DefaultUserInteraction
  include ::Gem::Text
  def initialize(specification); end

  def packaging(); end

  def packaging=(packaging); end

  def validate(strict=T.unsafe(nil)); end

  def validate_dependencies(); end

  def validate_metadata(); end

  def validate_permissions(); end
  HOMEPAGE_URI_PATTERN = ::T.let(nil, ::T.untyped)
  LAZY = ::T.let(nil, ::T.untyped)
  LAZY_PATTERN = ::T.let(nil, ::T.untyped)
  METADATA_LINK_KEYS = ::T.let(nil, ::T.untyped)
  SPECIAL_CHARACTERS = ::T.let(nil, ::T.untyped)
  VALID_NAME_PATTERN = ::T.let(nil, ::T.untyped)
  VALID_URI_PATTERN = ::T.let(nil, ::T.untyped)
end

class Gem::SpecificationPolicy
end

class Gem::StreamUI
  def _deprecated_debug(statement); end
end

class Gem::StubSpecification
  def build_extensions(); end

  def extensions(); end

  def initialize(filename, base_dir, gems_dir, default_gem); end

  def missing_extensions?(); end

  def valid?(); end
end

class Gem::StubSpecification::StubLine
  def extensions(); end

  def full_name(); end

  def initialize(data, extensions); end

  def name(); end

  def platform(); end

  def require_paths(); end

  def version(); end
end

class Gem::StubSpecification
  def self.default_gemspec_stub(filename, base_dir, gems_dir); end

  def self.gemspec_stub(filename, base_dir, gems_dir); end
end

class Gem::UninstallError
  def spec(); end

  def spec=(spec); end
end

class Gem::UninstallError
end

Gem::UnsatisfiableDepedencyError = Gem::UnsatisfiableDependencyError

Gem::Version::Requirement = Gem::Requirement

module Gem
  def self.activated_gem_paths(); end
end

class GetText::PoParser
  Racc_arg = ::T.let(nil, ::T.untyped)
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
  Racc_token_to_s_table = ::T.let(nil, ::T.untyped)
end

module Gio
  DESKTOP_APP_INFO_LOOKUP_EXTENSION_POINT_NAME = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_ACCESS_CAN_DELETE = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_ACCESS_CAN_EXECUTE = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_ACCESS_CAN_READ = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_ACCESS_CAN_RENAME = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_ACCESS_CAN_TRASH = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_ACCESS_CAN_WRITE = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_DOS_IS_ARCHIVE = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_DOS_IS_SYSTEM = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_ETAG_VALUE = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_FILESYSTEM_FREE = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_FILESYSTEM_READONLY = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_FILESYSTEM_REMOTE = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_FILESYSTEM_SIZE = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_FILESYSTEM_TYPE = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_FILESYSTEM_USED = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_GVFS_BACKEND = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_ID_FILE = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_ID_FILESYSTEM = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_MOUNTABLE_CAN_EJECT = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_MOUNTABLE_CAN_MOUNT = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_MOUNTABLE_CAN_POLL = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_MOUNTABLE_CAN_START = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_MOUNTABLE_CAN_START_DEGRADED = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_MOUNTABLE_CAN_STOP = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_MOUNTABLE_CAN_UNMOUNT = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_MOUNTABLE_HAL_UDI = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_MOUNTABLE_IS_MEDIA_CHECK_AUTOMATIC = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_MOUNTABLE_START_STOP_TYPE = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE_FILE = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_OWNER_GROUP = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_OWNER_USER = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_OWNER_USER_REAL = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_PREVIEW_ICON = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_RECENT_MODIFIED = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_SELINUX_CONTEXT = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_STANDARD_ALLOCATED_SIZE = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_STANDARD_COPY_NAME = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_STANDARD_DESCRIPTION = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_STANDARD_EDIT_NAME = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_STANDARD_FAST_CONTENT_TYPE = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_STANDARD_ICON = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_STANDARD_IS_BACKUP = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_STANDARD_IS_HIDDEN = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_STANDARD_IS_SYMLINK = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_STANDARD_IS_VIRTUAL = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_STANDARD_IS_VOLATILE = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_STANDARD_NAME = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_STANDARD_SIZE = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_STANDARD_SORT_ORDER = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_STANDARD_SYMBOLIC_ICON = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_STANDARD_TARGET_URI = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_STANDARD_TYPE = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_THUMBNAILING_FAILED = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_THUMBNAIL_IS_VALID = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_THUMBNAIL_PATH = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_TIME_ACCESS = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_TIME_ACCESS_USEC = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_TIME_CHANGED = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_TIME_CHANGED_USEC = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_TIME_CREATED = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_TIME_CREATED_USEC = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_TIME_MODIFIED = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_TIME_MODIFIED_USEC = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_TRASH_DELETION_DATE = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_TRASH_ITEM_COUNT = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_TRASH_ORIG_PATH = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_UNIX_BLOCKS = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_UNIX_BLOCK_SIZE = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_UNIX_DEVICE = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_UNIX_GID = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_UNIX_INODE = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_UNIX_IS_MOUNTPOINT = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_UNIX_MODE = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_UNIX_NLINK = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_UNIX_RDEV = ::T.let(nil, ::T.untyped)
  FILE_ATTRIBUTE_UNIX_UID = ::T.let(nil, ::T.untyped)
  LOG_DOMAIN = ::T.let(nil, ::T.untyped)
  MENU_ATTRIBUTE_ACTION = ::T.let(nil, ::T.untyped)
  MENU_ATTRIBUTE_ACTION_NAMESPACE = ::T.let(nil, ::T.untyped)
  MENU_ATTRIBUTE_ICON = ::T.let(nil, ::T.untyped)
  MENU_ATTRIBUTE_LABEL = ::T.let(nil, ::T.untyped)
  MENU_ATTRIBUTE_TARGET = ::T.let(nil, ::T.untyped)
  MENU_LINK_SECTION = ::T.let(nil, ::T.untyped)
  MENU_LINK_SUBMENU = ::T.let(nil, ::T.untyped)
  NATIVE_VOLUME_MONITOR_EXTENSION_POINT_NAME = ::T.let(nil, ::T.untyped)
  NETWORK_MONITOR_EXTENSION_POINT_NAME = ::T.let(nil, ::T.untyped)
  PROXY_EXTENSION_POINT_NAME = ::T.let(nil, ::T.untyped)
  PROXY_RESOLVER_EXTENSION_POINT_NAME = ::T.let(nil, ::T.untyped)
  SETTINGS_BACKEND_EXTENSION_POINT_NAME = ::T.let(nil, ::T.untyped)
  TLS_BACKEND_EXTENSION_POINT_NAME = ::T.let(nil, ::T.untyped)
  TLS_DATABASE_PURPOSE_AUTHENTICATE_CLIENT = ::T.let(nil, ::T.untyped)
  TLS_DATABASE_PURPOSE_AUTHENTICATE_SERVER = ::T.let(nil, ::T.untyped)
  VFS_EXTENSION_POINT_NAME = ::T.let(nil, ::T.untyped)
  VOLUME_IDENTIFIER_KIND_CLASS = ::T.let(nil, ::T.untyped)
  VOLUME_IDENTIFIER_KIND_HAL_UDI = ::T.let(nil, ::T.untyped)
  VOLUME_IDENTIFIER_KIND_LABEL = ::T.let(nil, ::T.untyped)
  VOLUME_IDENTIFIER_KIND_NFS_MOUNT = ::T.let(nil, ::T.untyped)
  VOLUME_IDENTIFIER_KIND_UNIX_DEVICE = ::T.let(nil, ::T.untyped)
  VOLUME_IDENTIFIER_KIND_UUID = ::T.let(nil, ::T.untyped)
  VOLUME_MONITOR_EXTENSION_POINT_NAME = ::T.let(nil, ::T.untyped)
end

module Gio::Action
  include ::GLib::Interface
end

module Gio::Action
  extend ::GLib::MetaInterface
  extend ::GLib::Interface
end

module Gio::ActionGroup
  include ::GLib::Interface
end

module Gio::ActionGroup
  extend ::GLib::MetaInterface
  extend ::GLib::Interface
end

module Gio::ActionMap
  include ::GLib::Interface
end

module Gio::ActionMap
  extend ::GLib::MetaInterface
  extend ::GLib::Interface
end

module Gio::AppInfo
  include ::GLib::Interface
end

module Gio::AppInfo
  extend ::GLib::MetaInterface
  extend ::GLib::Interface
end

class Gio::AppInfoCreateFlags
  NEEDS_TERMINAL = ::T.let(nil, ::T.untyped)
  NONE = ::T.let(nil, ::T.untyped)
  SUPPORTS_STARTUP_NOTIFICATION = ::T.let(nil, ::T.untyped)
  SUPPORTS_URIS = ::T.let(nil, ::T.untyped)
end

class Gio::AppLaunchContextPrivate
end

class Gio::AppLaunchContextPrivate
end

class Gio::Application
  include ::Gio::ActionGroup
  include ::Gio::ActionMap
  include ::GLib::Interface
end

class Gio::ApplicationCommandLinePrivate
end

class Gio::ApplicationCommandLinePrivate
end

class Gio::ApplicationFlags
  CAN_OVERRIDE_APP_ID = ::T.let(nil, ::T.untyped)
  FLAGS_NONE = ::T.let(nil, ::T.untyped)
  HANDLES_COMMAND_LINE = ::T.let(nil, ::T.untyped)
  HANDLES_OPEN = ::T.let(nil, ::T.untyped)
  IS_LAUNCHER = ::T.let(nil, ::T.untyped)
  IS_SERVICE = ::T.let(nil, ::T.untyped)
  NON_UNIQUE = ::T.let(nil, ::T.untyped)
  SEND_ENVIRONMENT = ::T.let(nil, ::T.untyped)
end

class Gio::ApplicationPrivate
end

class Gio::ApplicationPrivate
end

class Gio::AskPasswordFlags
  ANONYMOUS_SUPPORTED = ::T.let(nil, ::T.untyped)
  NEED_DOMAIN = ::T.let(nil, ::T.untyped)
  NEED_PASSWORD = ::T.let(nil, ::T.untyped)
  NEED_USERNAME = ::T.let(nil, ::T.untyped)
  SAVING_SUPPORTED = ::T.let(nil, ::T.untyped)
end

module Gio::AsyncInitable
  include ::GLib::Interface
end

module Gio::AsyncInitable
  extend ::GLib::MetaInterface
  extend ::GLib::Interface
end

module Gio::AsyncResult
  include ::GLib::Interface
end

module Gio::AsyncResult
  extend ::GLib::MetaInterface
  extend ::GLib::Interface
end

class Gio::BufferedInputStream
  include ::Gio::Seekable
  include ::GLib::Interface
end

class Gio::BufferedInputStreamPrivate
end

class Gio::BufferedInputStreamPrivate
end

class Gio::BufferedOutputStream
  include ::Gio::Seekable
  include ::GLib::Interface
end

class Gio::BufferedOutputStreamPrivate
end

class Gio::BufferedOutputStreamPrivate
end

class Gio::BusNameOwnerFlags
  ALLOW_REPLACEMENT = ::T.let(nil, ::T.untyped)
  DO_NOT_QUEUE = ::T.let(nil, ::T.untyped)
  NONE = ::T.let(nil, ::T.untyped)
  REPLACE = ::T.let(nil, ::T.untyped)
end

class Gio::BusNameWatcherFlags
  AUTO_START = ::T.let(nil, ::T.untyped)
  NONE = ::T.let(nil, ::T.untyped)
end

class Gio::BusType
  NONE = ::T.let(nil, ::T.untyped)
  SESSION = ::T.let(nil, ::T.untyped)
  STARTER = ::T.let(nil, ::T.untyped)
  SYSTEM = ::T.let(nil, ::T.untyped)
end

class Gio::BytesIcon
  include ::Gio::Icon
  include ::Gio::LoadableIcon
  include ::GLib::Interface
end

class Gio::CancellablePrivate
end

class Gio::CancellablePrivate
end

class Gio::CharsetConverter
  include ::Gio::Converter
  include ::Gio::Initable
  include ::GLib::Interface
end

module Gio::Converter
  include ::GLib::Interface
end

module Gio::Converter
  extend ::GLib::MetaInterface
  extend ::GLib::Interface
end

class Gio::ConverterFlags
  FLUSH = ::T.let(nil, ::T.untyped)
  INPUT_AT_END = ::T.let(nil, ::T.untyped)
  NONE = ::T.let(nil, ::T.untyped)
end

class Gio::ConverterInputStream
  include ::Gio::PollableInputStream
  include ::GLib::Interface
end

class Gio::ConverterInputStreamPrivate
end

class Gio::ConverterInputStreamPrivate
end

class Gio::ConverterOutputStream
  include ::Gio::PollableOutputStream
  include ::GLib::Interface
end

class Gio::ConverterOutputStreamPrivate
end

class Gio::ConverterOutputStreamPrivate
end

class Gio::ConverterResult
  CONVERTED = ::T.let(nil, ::T.untyped)
  ERROR = ::T.let(nil, ::T.untyped)
  FINISHED = ::T.let(nil, ::T.untyped)
  FLUSHED = ::T.let(nil, ::T.untyped)
end

class Gio::CredentialsType
  FREEBSD_CMSGCRED = ::T.let(nil, ::T.untyped)
  INVALID = ::T.let(nil, ::T.untyped)
  LINUX_UCRED = ::T.let(nil, ::T.untyped)
  NETBSD_UNPCBID = ::T.let(nil, ::T.untyped)
  OPENBSD_SOCKPEERCRED = ::T.let(nil, ::T.untyped)
  SOLARIS_UCRED = ::T.let(nil, ::T.untyped)
end

class Gio::DBusActionGroup
  include ::Gio::ActionGroup
  include ::Gio::RemoteActionGroup
  include ::GLib::Interface
end

class Gio::DBusCallFlags
  ALLOW_INTERACTIVE_AUTHORIZATION = ::T.let(nil, ::T.untyped)
  NONE = ::T.let(nil, ::T.untyped)
  NO_AUTO_START = ::T.let(nil, ::T.untyped)
end

class Gio::DBusCapabilityFlags
  NONE = ::T.let(nil, ::T.untyped)
  UNIX_FD_PASSING = ::T.let(nil, ::T.untyped)
end

class Gio::DBusConnection
  include ::Gio::Initable
  include ::Gio::AsyncInitable
  include ::GLib::Interface
end

class Gio::DBusConnectionFlags
  AUTHENTICATION_ALLOW_ANONYMOUS = ::T.let(nil, ::T.untyped)
  AUTHENTICATION_CLIENT = ::T.let(nil, ::T.untyped)
  AUTHENTICATION_SERVER = ::T.let(nil, ::T.untyped)
  DELAY_MESSAGE_PROCESSING = ::T.let(nil, ::T.untyped)
  MESSAGE_BUS_CONNECTION = ::T.let(nil, ::T.untyped)
  NONE = ::T.let(nil, ::T.untyped)
end

class Gio::DBusError
  include ::GLib::ErrorInfo
  ACCESS_DENIED = ::T.let(nil, ::T.untyped)
  ADDRESS_IN_USE = ::T.let(nil, ::T.untyped)
  ADT_AUDIT_DATA_UNKNOWN = ::T.let(nil, ::T.untyped)
  AUTH_FAILED = ::T.let(nil, ::T.untyped)
  BAD_ADDRESS = ::T.let(nil, ::T.untyped)
  DISCONNECTED = ::T.let(nil, ::T.untyped)
  FAILED = ::T.let(nil, ::T.untyped)
  FILE_EXISTS = ::T.let(nil, ::T.untyped)
  FILE_NOT_FOUND = ::T.let(nil, ::T.untyped)
  INVALID_ARGS = ::T.let(nil, ::T.untyped)
  INVALID_FILE_CONTENT = ::T.let(nil, ::T.untyped)
  INVALID_SIGNATURE = ::T.let(nil, ::T.untyped)
  IO_ERROR = ::T.let(nil, ::T.untyped)
  LIMITS_EXCEEDED = ::T.let(nil, ::T.untyped)
  MATCH_RULE_INVALID = ::T.let(nil, ::T.untyped)
  MATCH_RULE_NOT_FOUND = ::T.let(nil, ::T.untyped)
  NAME_HAS_NO_OWNER = ::T.let(nil, ::T.untyped)
  NOT_SUPPORTED = ::T.let(nil, ::T.untyped)
  NO_MEMORY = ::T.let(nil, ::T.untyped)
  NO_NETWORK = ::T.let(nil, ::T.untyped)
  NO_REPLY = ::T.let(nil, ::T.untyped)
  NO_SERVER = ::T.let(nil, ::T.untyped)
  OBJECT_PATH_IN_USE = ::T.let(nil, ::T.untyped)
  PROPERTY_READ_ONLY = ::T.let(nil, ::T.untyped)
  SELINUX_SECURITY_CONTEXT_UNKNOWN = ::T.let(nil, ::T.untyped)
  SERVICE_UNKNOWN = ::T.let(nil, ::T.untyped)
  SPAWN_CHILD_EXITED = ::T.let(nil, ::T.untyped)
  SPAWN_CHILD_SIGNALED = ::T.let(nil, ::T.untyped)
  SPAWN_CONFIG_INVALID = ::T.let(nil, ::T.untyped)
  SPAWN_EXEC_FAILED = ::T.let(nil, ::T.untyped)
  SPAWN_FAILED = ::T.let(nil, ::T.untyped)
  SPAWN_FILE_INVALID = ::T.let(nil, ::T.untyped)
  SPAWN_FORK_FAILED = ::T.let(nil, ::T.untyped)
  SPAWN_NO_MEMORY = ::T.let(nil, ::T.untyped)
  SPAWN_PERMISSIONS_INVALID = ::T.let(nil, ::T.untyped)
  SPAWN_SERVICE_INVALID = ::T.let(nil, ::T.untyped)
  SPAWN_SERVICE_NOT_FOUND = ::T.let(nil, ::T.untyped)
  SPAWN_SETUP_FAILED = ::T.let(nil, ::T.untyped)
  TIMED_OUT = ::T.let(nil, ::T.untyped)
  TIMEOUT = ::T.let(nil, ::T.untyped)
  UNIX_PROCESS_ID_UNKNOWN = ::T.let(nil, ::T.untyped)
  UNKNOWN_INTERFACE = ::T.let(nil, ::T.untyped)
  UNKNOWN_METHOD = ::T.let(nil, ::T.untyped)
  UNKNOWN_OBJECT = ::T.let(nil, ::T.untyped)
  UNKNOWN_PROPERTY = ::T.let(nil, ::T.untyped)
end

class Gio::DBusError::AccessDenied
end

class Gio::DBusError::AccessDenied
end

class Gio::DBusError::AddressInUse
end

class Gio::DBusError::AddressInUse
end

class Gio::DBusError::AdtAuditDataUnknown
end

class Gio::DBusError::AdtAuditDataUnknown
end

class Gio::DBusError::AuthFailed
end

class Gio::DBusError::AuthFailed
end

class Gio::DBusError::BadAddress
end

class Gio::DBusError::BadAddress
end

class Gio::DBusError::Disconnected
end

class Gio::DBusError::Disconnected
end

class Gio::DBusError::Failed
end

class Gio::DBusError::Failed
end

class Gio::DBusError::FileExists
end

class Gio::DBusError::FileExists
end

class Gio::DBusError::FileNotFound
end

class Gio::DBusError::FileNotFound
end

class Gio::DBusError::InvalidArgs
end

class Gio::DBusError::InvalidArgs
end

class Gio::DBusError::InvalidFileContent
end

class Gio::DBusError::InvalidFileContent
end

class Gio::DBusError::InvalidSignature
end

class Gio::DBusError::InvalidSignature
end

class Gio::DBusError::IoError
end

class Gio::DBusError::IoError
end

class Gio::DBusError::LimitsExceeded
end

class Gio::DBusError::LimitsExceeded
end

class Gio::DBusError::MatchRuleInvalid
end

class Gio::DBusError::MatchRuleInvalid
end

class Gio::DBusError::MatchRuleNotFound
end

class Gio::DBusError::MatchRuleNotFound
end

class Gio::DBusError::NameHasNoOwner
end

class Gio::DBusError::NameHasNoOwner
end

class Gio::DBusError::NoMemory
end

class Gio::DBusError::NoMemory
end

class Gio::DBusError::NoNetwork
end

class Gio::DBusError::NoNetwork
end

class Gio::DBusError::NoReply
end

class Gio::DBusError::NoReply
end

class Gio::DBusError::NoServer
end

class Gio::DBusError::NoServer
end

class Gio::DBusError::NotSupported
end

class Gio::DBusError::NotSupported
end

class Gio::DBusError::ObjectPathInUse
end

class Gio::DBusError::ObjectPathInUse
end

class Gio::DBusError::PropertyReadOnly
end

class Gio::DBusError::PropertyReadOnly
end

class Gio::DBusError::SelinuxSecurityContextUnknown
end

class Gio::DBusError::SelinuxSecurityContextUnknown
end

class Gio::DBusError::ServiceUnknown
end

class Gio::DBusError::ServiceUnknown
end

class Gio::DBusError::SpawnChildExited
end

class Gio::DBusError::SpawnChildExited
end

class Gio::DBusError::SpawnChildSignaled
end

class Gio::DBusError::SpawnChildSignaled
end

class Gio::DBusError::SpawnConfigInvalid
end

class Gio::DBusError::SpawnConfigInvalid
end

class Gio::DBusError::SpawnExecFailed
end

class Gio::DBusError::SpawnExecFailed
end

class Gio::DBusError::SpawnFailed
end

class Gio::DBusError::SpawnFailed
end

class Gio::DBusError::SpawnFileInvalid
end

class Gio::DBusError::SpawnFileInvalid
end

class Gio::DBusError::SpawnForkFailed
end

class Gio::DBusError::SpawnForkFailed
end

class Gio::DBusError::SpawnNoMemory
end

class Gio::DBusError::SpawnNoMemory
end

class Gio::DBusError::SpawnPermissionsInvalid
end

class Gio::DBusError::SpawnPermissionsInvalid
end

class Gio::DBusError::SpawnServiceInvalid
end

class Gio::DBusError::SpawnServiceInvalid
end

class Gio::DBusError::SpawnServiceNotFound
end

class Gio::DBusError::SpawnServiceNotFound
end

class Gio::DBusError::SpawnSetupFailed
end

class Gio::DBusError::SpawnSetupFailed
end

class Gio::DBusError::TimedOut
end

class Gio::DBusError::TimedOut
end

class Gio::DBusError::Timeout
end

class Gio::DBusError::Timeout
end

class Gio::DBusError::UnixProcessIdUnknown
end

class Gio::DBusError::UnixProcessIdUnknown
end

class Gio::DBusError::UnknownInterface
end

class Gio::DBusError::UnknownInterface
end

class Gio::DBusError::UnknownMethod
end

class Gio::DBusError::UnknownMethod
end

class Gio::DBusError::UnknownObject
end

class Gio::DBusError::UnknownObject
end

class Gio::DBusError::UnknownProperty
end

class Gio::DBusError::UnknownProperty
end

class Gio::DBusError
end

module Gio::DBusInterface
  include ::GLib::Interface
end

module Gio::DBusInterface
  extend ::GLib::MetaInterface
  extend ::GLib::Interface
end

class Gio::DBusInterfaceSkeleton
  include ::Gio::DBusInterface
  include ::GLib::Interface
end

class Gio::DBusInterfaceSkeletonFlags
  HANDLE_METHOD_INVOCATIONS_IN_THREAD = ::T.let(nil, ::T.untyped)
  NONE = ::T.let(nil, ::T.untyped)
end

class Gio::DBusInterfaceSkeletonPrivate
end

class Gio::DBusInterfaceSkeletonPrivate
end

class Gio::DBusMessageByteOrder
  BIG_ENDIAN = ::T.let(nil, ::T.untyped)
  LITTLE_ENDIAN = ::T.let(nil, ::T.untyped)
end

class Gio::DBusMessageFlags
  ALLOW_INTERACTIVE_AUTHORIZATION = ::T.let(nil, ::T.untyped)
  NONE = ::T.let(nil, ::T.untyped)
  NO_AUTO_START = ::T.let(nil, ::T.untyped)
  NO_REPLY_EXPECTED = ::T.let(nil, ::T.untyped)
end

class Gio::DBusMessageHeaderField
  DESTINATION = ::T.let(nil, ::T.untyped)
  ERROR_NAME = ::T.let(nil, ::T.untyped)
  INTERFACE = ::T.let(nil, ::T.untyped)
  INVALID = ::T.let(nil, ::T.untyped)
  MEMBER = ::T.let(nil, ::T.untyped)
  NUM_UNIX_FDS = ::T.let(nil, ::T.untyped)
  PATH = ::T.let(nil, ::T.untyped)
  REPLY_SERIAL = ::T.let(nil, ::T.untyped)
  SENDER = ::T.let(nil, ::T.untyped)
  SIGNATURE = ::T.let(nil, ::T.untyped)
end

class Gio::DBusMessageType
  ERROR = ::T.let(nil, ::T.untyped)
  INVALID = ::T.let(nil, ::T.untyped)
  METHOD_CALL = ::T.let(nil, ::T.untyped)
  METHOD_RETURN = ::T.let(nil, ::T.untyped)
  SIGNAL = ::T.let(nil, ::T.untyped)
end

module Gio::DBusObject
  include ::GLib::Interface
end

module Gio::DBusObject
  extend ::GLib::MetaInterface
  extend ::GLib::Interface
end

module Gio::DBusObjectManager
  include ::GLib::Interface
end

module Gio::DBusObjectManager
  extend ::GLib::MetaInterface
  extend ::GLib::Interface
end

class Gio::DBusObjectManagerClient
  include ::Gio::Initable
  include ::Gio::AsyncInitable
  include ::Gio::DBusObjectManager
  include ::GLib::Interface
end

class Gio::DBusObjectManagerClientFlags
  DO_NOT_AUTO_START = ::T.let(nil, ::T.untyped)
  NONE = ::T.let(nil, ::T.untyped)
end

class Gio::DBusObjectManagerClientPrivate
end

class Gio::DBusObjectManagerClientPrivate
end

class Gio::DBusObjectManagerServer
  include ::Gio::DBusObjectManager
  include ::GLib::Interface
end

class Gio::DBusObjectManagerServerPrivate
end

class Gio::DBusObjectManagerServerPrivate
end

class Gio::DBusObjectProxy
  include ::Gio::DBusObject
  include ::GLib::Interface
end

class Gio::DBusObjectProxyPrivate
end

class Gio::DBusObjectProxyPrivate
end

class Gio::DBusObjectSkeleton
  include ::Gio::DBusObject
  include ::GLib::Interface
end

class Gio::DBusObjectSkeletonPrivate
end

class Gio::DBusObjectSkeletonPrivate
end

class Gio::DBusPropertyInfoFlags
  NONE = ::T.let(nil, ::T.untyped)
  READABLE = ::T.let(nil, ::T.untyped)
  WRITABLE = ::T.let(nil, ::T.untyped)
end

class Gio::DBusProxy
  include ::Gio::DBusInterface
  include ::Gio::Initable
  include ::Gio::AsyncInitable
  include ::GLib::Interface
end

class Gio::DBusProxyFlags
  DO_NOT_AUTO_START = ::T.let(nil, ::T.untyped)
  DO_NOT_AUTO_START_AT_CONSTRUCTION = ::T.let(nil, ::T.untyped)
  DO_NOT_CONNECT_SIGNALS = ::T.let(nil, ::T.untyped)
  DO_NOT_LOAD_PROPERTIES = ::T.let(nil, ::T.untyped)
  GET_INVALIDATED_PROPERTIES = ::T.let(nil, ::T.untyped)
  NONE = ::T.let(nil, ::T.untyped)
end

class Gio::DBusProxyPrivate
end

class Gio::DBusProxyPrivate
end

class Gio::DBusSendMessageFlags
  NONE = ::T.let(nil, ::T.untyped)
  PRESERVE_SERIAL = ::T.let(nil, ::T.untyped)
end

class Gio::DBusServer
  include ::Gio::Initable
  include ::GLib::Interface
end

class Gio::DBusServerFlags
  AUTHENTICATION_ALLOW_ANONYMOUS = ::T.let(nil, ::T.untyped)
  NONE = ::T.let(nil, ::T.untyped)
  RUN_IN_THREAD = ::T.let(nil, ::T.untyped)
end

class Gio::DBusSignalFlags
  MATCH_ARG0_NAMESPACE = ::T.let(nil, ::T.untyped)
  MATCH_ARG0_PATH = ::T.let(nil, ::T.untyped)
  NONE = ::T.let(nil, ::T.untyped)
  NO_MATCH_RULE = ::T.let(nil, ::T.untyped)
end

class Gio::DBusSubtreeFlags
  DISPATCH_TO_UNENUMERATED_NODES = ::T.let(nil, ::T.untyped)
  NONE = ::T.let(nil, ::T.untyped)
end

class Gio::DataInputStreamPrivate
end

class Gio::DataInputStreamPrivate
end

class Gio::DataOutputStream
  include ::Gio::Seekable
  include ::GLib::Interface
end

class Gio::DataOutputStreamPrivate
end

class Gio::DataOutputStreamPrivate
end

class Gio::DataStreamByteOrder
  BIG_ENDIAN = ::T.let(nil, ::T.untyped)
  HOST_ENDIAN = ::T.let(nil, ::T.untyped)
  LITTLE_ENDIAN = ::T.let(nil, ::T.untyped)
end

class Gio::DataStreamNewlineType
  ANY = ::T.let(nil, ::T.untyped)
  CR = ::T.let(nil, ::T.untyped)
  CR_LF = ::T.let(nil, ::T.untyped)
  LF = ::T.let(nil, ::T.untyped)
end

module Gio::DatagramBased
  include ::GLib::Interface
end

module Gio::DatagramBased
  extend ::GLib::MetaInterface
  extend ::GLib::Interface
end

class Gio::DesktopAppInfo
  include ::Gio::AppInfo
  include ::GLib::Interface
end

module Gio::DesktopAppInfoLookup
  include ::GLib::Interface
end

module Gio::DesktopAppInfoLookup
  extend ::GLib::MetaInterface
  extend ::GLib::Interface
end

module Gio::Drive
  include ::GLib::Interface
end

module Gio::Drive
  extend ::GLib::MetaInterface
  extend ::GLib::Interface
end

class Gio::DriveStartFlags
  NONE = ::T.let(nil, ::T.untyped)
end

class Gio::DriveStartStopType
  MULTIDISK = ::T.let(nil, ::T.untyped)
  NETWORK = ::T.let(nil, ::T.untyped)
  PASSWORD = ::T.let(nil, ::T.untyped)
  SHUTDOWN = ::T.let(nil, ::T.untyped)
  UNKNOWN = ::T.let(nil, ::T.untyped)
end

module Gio::DtlsClientConnection
  include ::GLib::Interface
end

module Gio::DtlsClientConnection
  extend ::GLib::MetaInterface
  extend ::GLib::Interface
end

module Gio::DtlsConnection
  include ::GLib::Interface
end

module Gio::DtlsConnection
  extend ::GLib::MetaInterface
  extend ::GLib::Interface
end

module Gio::DtlsServerConnection
  include ::GLib::Interface
end

module Gio::DtlsServerConnection
  extend ::GLib::MetaInterface
  extend ::GLib::Interface
end

class Gio::Emblem
  include ::Gio::Icon
  include ::GLib::Interface
end

class Gio::EmblemOrigin
  DEVICE = ::T.let(nil, ::T.untyped)
  LIVEMETADATA = ::T.let(nil, ::T.untyped)
  TAG = ::T.let(nil, ::T.untyped)
  UNKNOWN = ::T.let(nil, ::T.untyped)
end

class Gio::EmblemedIcon
  include ::Gio::Icon
  include ::GLib::Interface
end

class Gio::EmblemedIconPrivate
end

class Gio::EmblemedIconPrivate
end

module Gio::File
  include ::GLib::Interface
end

module Gio::File
  extend ::GLib::MetaInterface
  extend ::GLib::Interface
end

class Gio::FileAttributeInfoFlags
  COPY_WHEN_MOVED = ::T.let(nil, ::T.untyped)
  COPY_WITH_FILE = ::T.let(nil, ::T.untyped)
  NONE = ::T.let(nil, ::T.untyped)
end

class Gio::FileAttributeStatus
  ERROR_SETTING = ::T.let(nil, ::T.untyped)
  SET = ::T.let(nil, ::T.untyped)
  UNSET = ::T.let(nil, ::T.untyped)
end

class Gio::FileAttributeType
  BOOLEAN = ::T.let(nil, ::T.untyped)
  BYTE_STRING = ::T.let(nil, ::T.untyped)
  INT32 = ::T.let(nil, ::T.untyped)
  INT64 = ::T.let(nil, ::T.untyped)
  INVALID = ::T.let(nil, ::T.untyped)
  OBJECT = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  STRINGV = ::T.let(nil, ::T.untyped)
  UINT32 = ::T.let(nil, ::T.untyped)
  UINT64 = ::T.let(nil, ::T.untyped)
end

class Gio::FileCopyFlags
  ALL_METADATA = ::T.let(nil, ::T.untyped)
  BACKUP = ::T.let(nil, ::T.untyped)
  NOFOLLOW_SYMLINKS = ::T.let(nil, ::T.untyped)
  NONE = ::T.let(nil, ::T.untyped)
  NO_FALLBACK_FOR_MOVE = ::T.let(nil, ::T.untyped)
  OVERWRITE = ::T.let(nil, ::T.untyped)
  TARGET_DEFAULT_PERMS = ::T.let(nil, ::T.untyped)
end

class Gio::FileCreateFlags
  NONE = ::T.let(nil, ::T.untyped)
  PRIVATE = ::T.let(nil, ::T.untyped)
  REPLACE_DESTINATION = ::T.let(nil, ::T.untyped)
end

module Gio::FileDescriptorBased
  include ::GLib::Interface
end

module Gio::FileDescriptorBased
  extend ::GLib::MetaInterface
  extend ::GLib::Interface
end

class Gio::FileEnumeratorPrivate
end

class Gio::FileEnumeratorPrivate
end

class Gio::FileIOStream
  include ::Gio::Seekable
  include ::GLib::Interface
end

class Gio::FileIOStreamPrivate
end

class Gio::FileIOStreamPrivate
end

class Gio::FileIcon
  include ::Gio::Icon
  include ::Gio::LoadableIcon
  include ::GLib::Interface
end

class Gio::FileInputStream
  include ::Gio::Seekable
  include ::GLib::Interface
end

class Gio::FileInputStreamPrivate
end

class Gio::FileInputStreamPrivate
end

class Gio::FileMeasureFlags
  APPARENT_SIZE = ::T.let(nil, ::T.untyped)
  NONE = ::T.let(nil, ::T.untyped)
  NO_XDEV = ::T.let(nil, ::T.untyped)
  REPORT_ANY_ERROR = ::T.let(nil, ::T.untyped)
end

class Gio::FileMonitorEvent
  ATTRIBUTE_CHANGED = ::T.let(nil, ::T.untyped)
  CHANGED = ::T.let(nil, ::T.untyped)
  CHANGES_DONE_HINT = ::T.let(nil, ::T.untyped)
  CREATED = ::T.let(nil, ::T.untyped)
  DELETED = ::T.let(nil, ::T.untyped)
  MOVED = ::T.let(nil, ::T.untyped)
  MOVED_IN = ::T.let(nil, ::T.untyped)
  MOVED_OUT = ::T.let(nil, ::T.untyped)
  PRE_UNMOUNT = ::T.let(nil, ::T.untyped)
  RENAMED = ::T.let(nil, ::T.untyped)
  UNMOUNTED = ::T.let(nil, ::T.untyped)
end

class Gio::FileMonitorFlags
  NONE = ::T.let(nil, ::T.untyped)
  SEND_MOVED = ::T.let(nil, ::T.untyped)
  WATCH_HARD_LINKS = ::T.let(nil, ::T.untyped)
  WATCH_MOUNTS = ::T.let(nil, ::T.untyped)
  WATCH_MOVES = ::T.let(nil, ::T.untyped)
end

class Gio::FileMonitorPrivate
end

class Gio::FileMonitorPrivate
end

class Gio::FileOutputStream
  include ::Gio::Seekable
  include ::GLib::Interface
end

class Gio::FileOutputStreamPrivate
end

class Gio::FileOutputStreamPrivate
end

class Gio::FileQueryInfoFlags
  NOFOLLOW_SYMLINKS = ::T.let(nil, ::T.untyped)
  NONE = ::T.let(nil, ::T.untyped)
end

class Gio::FileType
  DIRECTORY = ::T.let(nil, ::T.untyped)
  MOUNTABLE = ::T.let(nil, ::T.untyped)
  REGULAR = ::T.let(nil, ::T.untyped)
  SHORTCUT = ::T.let(nil, ::T.untyped)
  SPECIAL = ::T.let(nil, ::T.untyped)
  SYMBOLIC_LINK = ::T.let(nil, ::T.untyped)
  UNKNOWN = ::T.let(nil, ::T.untyped)
end

class Gio::FilesystemPreviewType
  IF_ALWAYS = ::T.let(nil, ::T.untyped)
  IF_LOCAL = ::T.let(nil, ::T.untyped)
  NEVER = ::T.let(nil, ::T.untyped)
end

class Gio::IOError
  include ::GLib::ErrorInfo
  ADDRESS_IN_USE = ::T.let(nil, ::T.untyped)
  ALREADY_MOUNTED = ::T.let(nil, ::T.untyped)
  BROKEN_PIPE = ::T.let(nil, ::T.untyped)
  BUSY = ::T.let(nil, ::T.untyped)
  CANCELLED = ::T.let(nil, ::T.untyped)
  CANT_CREATE_BACKUP = ::T.let(nil, ::T.untyped)
  CLOSED = ::T.let(nil, ::T.untyped)
  CONNECTION_CLOSED = ::T.let(nil, ::T.untyped)
  CONNECTION_REFUSED = ::T.let(nil, ::T.untyped)
  DBUS_ERROR = ::T.let(nil, ::T.untyped)
  EXISTS = ::T.let(nil, ::T.untyped)
  FAILED = ::T.let(nil, ::T.untyped)
  FAILED_HANDLED = ::T.let(nil, ::T.untyped)
  FILENAME_TOO_LONG = ::T.let(nil, ::T.untyped)
  HOST_NOT_FOUND = ::T.let(nil, ::T.untyped)
  HOST_UNREACHABLE = ::T.let(nil, ::T.untyped)
  INVALID_ARGUMENT = ::T.let(nil, ::T.untyped)
  INVALID_DATA = ::T.let(nil, ::T.untyped)
  INVALID_FILENAME = ::T.let(nil, ::T.untyped)
  IS_DIRECTORY = ::T.let(nil, ::T.untyped)
  MESSAGE_TOO_LARGE = ::T.let(nil, ::T.untyped)
  NETWORK_UNREACHABLE = ::T.let(nil, ::T.untyped)
  NOT_CONNECTED = ::T.let(nil, ::T.untyped)
  NOT_DIRECTORY = ::T.let(nil, ::T.untyped)
  NOT_EMPTY = ::T.let(nil, ::T.untyped)
  NOT_FOUND = ::T.let(nil, ::T.untyped)
  NOT_INITIALIZED = ::T.let(nil, ::T.untyped)
  NOT_MOUNTABLE_FILE = ::T.let(nil, ::T.untyped)
  NOT_MOUNTED = ::T.let(nil, ::T.untyped)
  NOT_REGULAR_FILE = ::T.let(nil, ::T.untyped)
  NOT_SUPPORTED = ::T.let(nil, ::T.untyped)
  NOT_SYMBOLIC_LINK = ::T.let(nil, ::T.untyped)
  NO_SPACE = ::T.let(nil, ::T.untyped)
  PARTIAL_INPUT = ::T.let(nil, ::T.untyped)
  PENDING = ::T.let(nil, ::T.untyped)
  PERMISSION_DENIED = ::T.let(nil, ::T.untyped)
  PROXY_AUTH_FAILED = ::T.let(nil, ::T.untyped)
  PROXY_FAILED = ::T.let(nil, ::T.untyped)
  PROXY_NEED_AUTH = ::T.let(nil, ::T.untyped)
  PROXY_NOT_ALLOWED = ::T.let(nil, ::T.untyped)
  READ_ONLY = ::T.let(nil, ::T.untyped)
  TIMED_OUT = ::T.let(nil, ::T.untyped)
  TOO_MANY_LINKS = ::T.let(nil, ::T.untyped)
  TOO_MANY_OPEN_FILES = ::T.let(nil, ::T.untyped)
  WOULD_BLOCK = ::T.let(nil, ::T.untyped)
  WOULD_MERGE = ::T.let(nil, ::T.untyped)
  WOULD_RECURSE = ::T.let(nil, ::T.untyped)
  WRONG_ETAG = ::T.let(nil, ::T.untyped)
end

class Gio::IOError::AddressInUse
end

class Gio::IOError::AddressInUse
end

class Gio::IOError::AlreadyMounted
end

class Gio::IOError::AlreadyMounted
end

class Gio::IOError::BrokenPipe
end

class Gio::IOError::BrokenPipe
end

class Gio::IOError::Busy
end

class Gio::IOError::Busy
end

class Gio::IOError::Cancelled
end

class Gio::IOError::Cancelled
end

class Gio::IOError::CantCreateBackup
end

class Gio::IOError::CantCreateBackup
end

class Gio::IOError::Closed
end

class Gio::IOError::Closed
end

class Gio::IOError::ConnectionClosed
end

class Gio::IOError::ConnectionClosed
end

class Gio::IOError::ConnectionRefused
end

class Gio::IOError::ConnectionRefused
end

class Gio::IOError::DbusError
end

class Gio::IOError::DbusError
end

class Gio::IOError::Exists
end

class Gio::IOError::Exists
end

class Gio::IOError::Failed
end

class Gio::IOError::Failed
end

class Gio::IOError::FailedHandled
end

class Gio::IOError::FailedHandled
end

class Gio::IOError::FilenameTooLong
end

class Gio::IOError::FilenameTooLong
end

class Gio::IOError::HostNotFound
end

class Gio::IOError::HostNotFound
end

class Gio::IOError::HostUnreachable
end

class Gio::IOError::HostUnreachable
end

class Gio::IOError::InvalidArgument
end

class Gio::IOError::InvalidArgument
end

class Gio::IOError::InvalidData
end

class Gio::IOError::InvalidData
end

class Gio::IOError::InvalidFilename
end

class Gio::IOError::InvalidFilename
end

class Gio::IOError::IsDirectory
end

class Gio::IOError::IsDirectory
end

class Gio::IOError::MessageTooLarge
end

class Gio::IOError::MessageTooLarge
end

class Gio::IOError::NetworkUnreachable
end

class Gio::IOError::NetworkUnreachable
end

class Gio::IOError::NoSpace
end

class Gio::IOError::NoSpace
end

class Gio::IOError::NotConnected
end

class Gio::IOError::NotConnected
end

class Gio::IOError::NotDirectory
end

class Gio::IOError::NotDirectory
end

class Gio::IOError::NotEmpty
end

class Gio::IOError::NotEmpty
end

class Gio::IOError::NotFound
end

class Gio::IOError::NotFound
end

class Gio::IOError::NotInitialized
end

class Gio::IOError::NotInitialized
end

class Gio::IOError::NotMountableFile
end

class Gio::IOError::NotMountableFile
end

class Gio::IOError::NotMounted
end

class Gio::IOError::NotMounted
end

class Gio::IOError::NotRegularFile
end

class Gio::IOError::NotRegularFile
end

class Gio::IOError::NotSupported
end

class Gio::IOError::NotSupported
end

class Gio::IOError::NotSymbolicLink
end

class Gio::IOError::NotSymbolicLink
end

class Gio::IOError::PartialInput
end

class Gio::IOError::PartialInput
end

class Gio::IOError::Pending
end

class Gio::IOError::Pending
end

class Gio::IOError::PermissionDenied
end

class Gio::IOError::PermissionDenied
end

class Gio::IOError::ProxyAuthFailed
end

class Gio::IOError::ProxyAuthFailed
end

class Gio::IOError::ProxyFailed
end

class Gio::IOError::ProxyFailed
end

class Gio::IOError::ProxyNeedAuth
end

class Gio::IOError::ProxyNeedAuth
end

class Gio::IOError::ProxyNotAllowed
end

class Gio::IOError::ProxyNotAllowed
end

class Gio::IOError::ReadOnly
end

class Gio::IOError::ReadOnly
end

class Gio::IOError::TimedOut
end

class Gio::IOError::TimedOut
end

class Gio::IOError::TooManyLinks
end

class Gio::IOError::TooManyLinks
end

class Gio::IOError::TooManyOpenFiles
end

class Gio::IOError::TooManyOpenFiles
end

class Gio::IOError::WouldBlock
end

class Gio::IOError::WouldBlock
end

class Gio::IOError::WouldMerge
end

class Gio::IOError::WouldMerge
end

class Gio::IOError::WouldRecurse
end

class Gio::IOError::WouldRecurse
end

class Gio::IOError::WrongEtag
end

class Gio::IOError::WrongEtag
end

class Gio::IOError
end

class Gio::IOModuleScopeFlags
  BLOCK_DUPLICATES = ::T.let(nil, ::T.untyped)
  NONE = ::T.let(nil, ::T.untyped)
end

class Gio::IOStreamAdapter
end

class Gio::IOStreamAdapter
end

class Gio::IOStreamPrivate
end

class Gio::IOStreamPrivate
end

class Gio::IOStreamSpliceFlags
  CLOSE_STREAM1 = ::T.let(nil, ::T.untyped)
  CLOSE_STREAM2 = ::T.let(nil, ::T.untyped)
  NONE = ::T.let(nil, ::T.untyped)
  WAIT_FOR_BOTH = ::T.let(nil, ::T.untyped)
end

module Gio::Icon
  include ::GLib::Interface
end

module Gio::Icon
  extend ::GLib::MetaInterface
  extend ::GLib::Interface
end

class Gio::InetAddressMask
  include ::Gio::Initable
  include ::GLib::Interface
end

class Gio::InetAddressMaskPrivate
end

class Gio::InetAddressMaskPrivate
end

class Gio::InetAddressPrivate
end

class Gio::InetAddressPrivate
end

class Gio::InetSocketAddressPrivate
end

class Gio::InetSocketAddressPrivate
end

module Gio::Initable
  include ::GLib::Interface
end

module Gio::Initable
  extend ::GLib::MetaInterface
  extend ::GLib::Interface
end

class Gio::InputStreamPrivate
end

class Gio::InputStreamPrivate
end

module Gio::ListModel
  include ::GLib::Interface
end

module Gio::ListModel
  extend ::GLib::MetaInterface
  extend ::GLib::Interface
end

class Gio::ListStore
  include ::Gio::ListModel
  include ::GLib::Interface
end

module Gio::LoadableIcon
  include ::GLib::Interface
end

module Gio::LoadableIcon
  extend ::GLib::MetaInterface
  extend ::GLib::Interface
end

class Gio::MemoryInputStream
  include ::Gio::Seekable
  include ::Gio::PollableInputStream
  include ::GLib::Interface
end

class Gio::MemoryInputStreamPrivate
end

class Gio::MemoryInputStreamPrivate
end

class Gio::MemoryOutputStream
  include ::Gio::Seekable
  include ::Gio::PollableOutputStream
  include ::GLib::Interface
end

class Gio::MemoryOutputStreamPrivate
end

class Gio::MemoryOutputStreamPrivate
end

class Gio::MenuAttributeIterPrivate
end

class Gio::MenuAttributeIterPrivate
end

class Gio::MenuLinkIterPrivate
end

class Gio::MenuLinkIterPrivate
end

class Gio::MenuModelPrivate
end

class Gio::MenuModelPrivate
end

module Gio::Mount
  include ::GLib::Interface
end

module Gio::Mount
  extend ::GLib::MetaInterface
  extend ::GLib::Interface
end

class Gio::MountMountFlags
  NONE = ::T.let(nil, ::T.untyped)
end

class Gio::MountOperationPrivate
end

class Gio::MountOperationPrivate
end

class Gio::MountOperationResult
  ABORTED = ::T.let(nil, ::T.untyped)
  HANDLED = ::T.let(nil, ::T.untyped)
  UNHANDLED = ::T.let(nil, ::T.untyped)
end

class Gio::MountUnmountFlags
  FORCE = ::T.let(nil, ::T.untyped)
  NONE = ::T.let(nil, ::T.untyped)
end

class Gio::NativeSocketAddress
end

class Gio::NativeSocketAddress
end

class Gio::NetworkAddress
  include ::Gio::SocketConnectable
  include ::GLib::Interface
end

class Gio::NetworkAddressPrivate
end

class Gio::NetworkAddressPrivate
end

class Gio::NetworkConnectivity
  FULL = ::T.let(nil, ::T.untyped)
  LIMITED = ::T.let(nil, ::T.untyped)
  LOCAL = ::T.let(nil, ::T.untyped)
  PORTAL = ::T.let(nil, ::T.untyped)
end

module Gio::NetworkMonitor
  include ::GLib::Interface
end

module Gio::NetworkMonitor
  extend ::GLib::MetaInterface
  extend ::GLib::Interface
end

class Gio::NetworkService
  include ::Gio::SocketConnectable
  include ::GLib::Interface
end

class Gio::NetworkServicePrivate
end

class Gio::NetworkServicePrivate
end

class Gio::NotificationPriority
  HIGH = ::T.let(nil, ::T.untyped)
  LOW = ::T.let(nil, ::T.untyped)
  NORMAL = ::T.let(nil, ::T.untyped)
  URGENT = ::T.let(nil, ::T.untyped)
end

class Gio::OutputStreamPrivate
end

class Gio::OutputStreamPrivate
end

class Gio::OutputStreamSpliceFlags
  CLOSE_SOURCE = ::T.let(nil, ::T.untyped)
  CLOSE_TARGET = ::T.let(nil, ::T.untyped)
  NONE = ::T.let(nil, ::T.untyped)
end

class Gio::PasswordSave
  FOR_SESSION = ::T.let(nil, ::T.untyped)
  NEVER = ::T.let(nil, ::T.untyped)
  PERMANENTLY = ::T.let(nil, ::T.untyped)
end

class Gio::PermissionPrivate
end

class Gio::PermissionPrivate
end

module Gio::PollableInputStream
  include ::GLib::Interface
end

module Gio::PollableInputStream
  extend ::GLib::MetaInterface
  extend ::GLib::Interface
end

module Gio::PollableOutputStream
  include ::GLib::Interface
end

module Gio::PollableOutputStream
  extend ::GLib::MetaInterface
  extend ::GLib::Interface
end

class Gio::PropertyAction
  include ::Gio::Action
  include ::GLib::Interface
end

module Gio::Proxy
  include ::GLib::Interface
end

module Gio::Proxy
  extend ::GLib::MetaInterface
  extend ::GLib::Interface
end

class Gio::ProxyAddressEnumeratorPrivate
end

class Gio::ProxyAddressEnumeratorPrivate
end

class Gio::ProxyAddressPrivate
end

class Gio::ProxyAddressPrivate
end

module Gio::ProxyResolver
  include ::GLib::Interface
end

module Gio::ProxyResolver
  extend ::GLib::MetaInterface
  extend ::GLib::Interface
end

module Gio::RemoteActionGroup
  include ::GLib::Interface
end

module Gio::RemoteActionGroup
  extend ::GLib::MetaInterface
  extend ::GLib::Interface
end

class Gio::ResolverError
  include ::GLib::ErrorInfo
  INTERNAL = ::T.let(nil, ::T.untyped)
  NOT_FOUND = ::T.let(nil, ::T.untyped)
  TEMPORARY_FAILURE = ::T.let(nil, ::T.untyped)
end

class Gio::ResolverError::Internal
end

class Gio::ResolverError::Internal
end

class Gio::ResolverError::NotFound
end

class Gio::ResolverError::NotFound
end

class Gio::ResolverError::TemporaryFailure
end

class Gio::ResolverError::TemporaryFailure
end

class Gio::ResolverError
end

class Gio::ResolverPrivate
end

class Gio::ResolverPrivate
end

class Gio::ResolverRecordType
  MX = ::T.let(nil, ::T.untyped)
  NS = ::T.let(nil, ::T.untyped)
  SOA = ::T.let(nil, ::T.untyped)
  SRV = ::T.let(nil, ::T.untyped)
  TXT = ::T.let(nil, ::T.untyped)
end

class Gio::ResourceError
  include ::GLib::ErrorInfo
  INTERNAL = ::T.let(nil, ::T.untyped)
  NOT_FOUND = ::T.let(nil, ::T.untyped)
end

class Gio::ResourceError::Internal
end

class Gio::ResourceError::Internal
end

class Gio::ResourceError::NotFound
end

class Gio::ResourceError::NotFound
end

class Gio::ResourceError
end

class Gio::ResourceFlags
  COMPRESSED = ::T.let(nil, ::T.untyped)
  NONE = ::T.let(nil, ::T.untyped)
end

class Gio::ResourceLookupFlags
  NONE = ::T.let(nil, ::T.untyped)
end

module Gio::Seekable
  include ::GLib::Interface
end

module Gio::Seekable
  extend ::GLib::MetaInterface
  extend ::GLib::Interface
end

class Gio::SettingsBackendPrivate
end

class Gio::SettingsBackendPrivate
end

class Gio::SettingsBindFlags
  DEFAULT = ::T.let(nil, ::T.untyped)
  GET = ::T.let(nil, ::T.untyped)
  GET_NO_CHANGES = ::T.let(nil, ::T.untyped)
  INVERT_BOOLEAN = ::T.let(nil, ::T.untyped)
  NO_SENSITIVITY = ::T.let(nil, ::T.untyped)
  SET = ::T.let(nil, ::T.untyped)
end

class Gio::SettingsPrivate
end

class Gio::SettingsPrivate
end

class Gio::SimpleAction
  include ::Gio::Action
  include ::GLib::Interface
end

class Gio::SimpleActionGroup
  include ::Gio::ActionGroup
  include ::Gio::ActionMap
  include ::GLib::Interface
end

class Gio::SimpleActionGroupPrivate
end

class Gio::SimpleActionGroupPrivate
end

class Gio::SimpleAsyncResult
  include ::Gio::AsyncResult
  include ::GLib::Interface
end

class Gio::SimpleProxyResolver
  include ::Gio::ProxyResolver
  include ::GLib::Interface
end

class Gio::SimpleProxyResolverPrivate
end

class Gio::SimpleProxyResolverPrivate
end

class Gio::Socket
  include ::Gio::Initable
  include ::Gio::DatagramBased
  include ::GLib::Interface
end

class Gio::SocketAddress
  include ::Gio::SocketConnectable
  include ::GLib::Interface
end

class Gio::SocketClientEvent
  COMPLETE = ::T.let(nil, ::T.untyped)
  CONNECTED = ::T.let(nil, ::T.untyped)
  CONNECTING = ::T.let(nil, ::T.untyped)
  PROXY_NEGOTIATED = ::T.let(nil, ::T.untyped)
  PROXY_NEGOTIATING = ::T.let(nil, ::T.untyped)
  RESOLVED = ::T.let(nil, ::T.untyped)
  RESOLVING = ::T.let(nil, ::T.untyped)
  TLS_HANDSHAKED = ::T.let(nil, ::T.untyped)
  TLS_HANDSHAKING = ::T.let(nil, ::T.untyped)
end

class Gio::SocketClientPrivate
end

class Gio::SocketClientPrivate
end

module Gio::SocketConnectable
  include ::GLib::Interface
end

module Gio::SocketConnectable
  extend ::GLib::MetaInterface
  extend ::GLib::Interface
end

class Gio::SocketConnectionPrivate
end

class Gio::SocketConnectionPrivate
end

class Gio::SocketControlMessagePrivate
end

class Gio::SocketControlMessagePrivate
end

class Gio::SocketFamily
  INVALID = ::T.let(nil, ::T.untyped)
  IPV4 = ::T.let(nil, ::T.untyped)
  IPV6 = ::T.let(nil, ::T.untyped)
  UNIX = ::T.let(nil, ::T.untyped)
end

class Gio::SocketListenerEvent
  BINDING = ::T.let(nil, ::T.untyped)
  BOUND = ::T.let(nil, ::T.untyped)
  LISTENED = ::T.let(nil, ::T.untyped)
  LISTENING = ::T.let(nil, ::T.untyped)
end

class Gio::SocketListenerPrivate
end

class Gio::SocketListenerPrivate
end

class Gio::SocketMsgFlags
  DONTROUTE = ::T.let(nil, ::T.untyped)
  NONE = ::T.let(nil, ::T.untyped)
  OOB = ::T.let(nil, ::T.untyped)
  PEEK = ::T.let(nil, ::T.untyped)
end

class Gio::SocketPrivate
end

class Gio::SocketPrivate
end

class Gio::SocketProtocol
  DEFAULT = ::T.let(nil, ::T.untyped)
  SCTP = ::T.let(nil, ::T.untyped)
  TCP = ::T.let(nil, ::T.untyped)
  UDP = ::T.let(nil, ::T.untyped)
  UNKNOWN = ::T.let(nil, ::T.untyped)
end

class Gio::SocketServicePrivate
end

class Gio::SocketServicePrivate
end

class Gio::SocketType
  DATAGRAM = ::T.let(nil, ::T.untyped)
  INVALID = ::T.let(nil, ::T.untyped)
  SEQPACKET = ::T.let(nil, ::T.untyped)
  STREAM = ::T.let(nil, ::T.untyped)
end

class Gio::Subprocess
  include ::Gio::Initable
  include ::GLib::Interface
end

class Gio::SubprocessFlags
  INHERIT_FDS = ::T.let(nil, ::T.untyped)
  NONE = ::T.let(nil, ::T.untyped)
  STDERR_MERGE = ::T.let(nil, ::T.untyped)
  STDERR_PIPE = ::T.let(nil, ::T.untyped)
  STDERR_SILENCE = ::T.let(nil, ::T.untyped)
  STDIN_INHERIT = ::T.let(nil, ::T.untyped)
  STDIN_PIPE = ::T.let(nil, ::T.untyped)
  STDOUT_PIPE = ::T.let(nil, ::T.untyped)
  STDOUT_SILENCE = ::T.let(nil, ::T.untyped)
end

class Gio::Task
  include ::Gio::AsyncResult
  include ::GLib::Interface
end

class Gio::TcpConnectionPrivate
end

class Gio::TcpConnectionPrivate
end

class Gio::TcpWrapperConnectionPrivate
end

class Gio::TcpWrapperConnectionPrivate
end

class Gio::TestDBusFlags
  NONE = ::T.let(nil, ::T.untyped)
end

class Gio::ThemedIcon
  include ::Gio::Icon
  include ::GLib::Interface
end

class Gio::ThreadedSocketServicePrivate
end

class Gio::ThreadedSocketServicePrivate
end

class Gio::TlsAuthenticationMode
  NONE = ::T.let(nil, ::T.untyped)
  REQUESTED = ::T.let(nil, ::T.untyped)
  REQUIRED = ::T.let(nil, ::T.untyped)
end

module Gio::TlsBackend
  include ::GLib::Interface
end

module Gio::TlsBackend
  extend ::GLib::MetaInterface
  extend ::GLib::Interface
end

class Gio::TlsCertificateFlags
  BAD_IDENTITY = ::T.let(nil, ::T.untyped)
  EXPIRED = ::T.let(nil, ::T.untyped)
  GENERIC_ERROR = ::T.let(nil, ::T.untyped)
  INSECURE = ::T.let(nil, ::T.untyped)
  NOT_ACTIVATED = ::T.let(nil, ::T.untyped)
  REVOKED = ::T.let(nil, ::T.untyped)
  UNKNOWN_CA = ::T.let(nil, ::T.untyped)
  VALIDATE_ALL = ::T.let(nil, ::T.untyped)
end

class Gio::TlsCertificatePrivate
end

class Gio::TlsCertificatePrivate
end

class Gio::TlsCertificateRequestFlags
  NONE = ::T.let(nil, ::T.untyped)
end

module Gio::TlsClientConnection
  include ::GLib::Interface
end

module Gio::TlsClientConnection
  extend ::GLib::MetaInterface
  extend ::GLib::Interface
end

class Gio::TlsConnectionPrivate
end

class Gio::TlsConnectionPrivate
end

class Gio::TlsDatabaseLookupFlags
  KEYPAIR = ::T.let(nil, ::T.untyped)
  NONE = ::T.let(nil, ::T.untyped)
end

class Gio::TlsDatabasePrivate
end

class Gio::TlsDatabasePrivate
end

class Gio::TlsDatabaseVerifyFlags
  NONE = ::T.let(nil, ::T.untyped)
end

class Gio::TlsError
  include ::GLib::ErrorInfo
  BAD_CERTIFICATE = ::T.let(nil, ::T.untyped)
  CERTIFICATE_REQUIRED = ::T.let(nil, ::T.untyped)
  EOF = ::T.let(nil, ::T.untyped)
  HANDSHAKE = ::T.let(nil, ::T.untyped)
  MISC = ::T.let(nil, ::T.untyped)
  NOT_TLS = ::T.let(nil, ::T.untyped)
  UNAVAILABLE = ::T.let(nil, ::T.untyped)
end

class Gio::TlsError::BadCertificate
end

class Gio::TlsError::BadCertificate
end

class Gio::TlsError::CertificateRequired
end

class Gio::TlsError::CertificateRequired
end

class Gio::TlsError::Eof
end

class Gio::TlsError::Eof
end

class Gio::TlsError::Handshake
end

class Gio::TlsError::Handshake
end

class Gio::TlsError::Misc
end

class Gio::TlsError::Misc
end

class Gio::TlsError::NotTls
end

class Gio::TlsError::NotTls
end

class Gio::TlsError::Unavailable
end

class Gio::TlsError::Unavailable
end

class Gio::TlsError
end

module Gio::TlsFileDatabase
  include ::GLib::Interface
end

module Gio::TlsFileDatabase
  extend ::GLib::MetaInterface
  extend ::GLib::Interface
end

class Gio::TlsInteractionPrivate
end

class Gio::TlsInteractionPrivate
end

class Gio::TlsInteractionResult
  FAILED = ::T.let(nil, ::T.untyped)
  HANDLED = ::T.let(nil, ::T.untyped)
  UNHANDLED = ::T.let(nil, ::T.untyped)
end

class Gio::TlsPasswordFlags
  FINAL_TRY = ::T.let(nil, ::T.untyped)
  MANY_TRIES = ::T.let(nil, ::T.untyped)
  NONE = ::T.let(nil, ::T.untyped)
  RETRY = ::T.let(nil, ::T.untyped)
end

class Gio::TlsPasswordPrivate
end

class Gio::TlsPasswordPrivate
end

class Gio::TlsRehandshakeMode
  NEVER = ::T.let(nil, ::T.untyped)
  SAFELY = ::T.let(nil, ::T.untyped)
  UNSAFELY = ::T.let(nil, ::T.untyped)
end

module Gio::TlsServerConnection
  include ::GLib::Interface
end

module Gio::TlsServerConnection
  extend ::GLib::MetaInterface
  extend ::GLib::Interface
end

class Gio::UnixConnectionPrivate
end

class Gio::UnixConnectionPrivate
end

class Gio::UnixCredentialsMessagePrivate
end

class Gio::UnixCredentialsMessagePrivate
end

class Gio::UnixFDListPrivate
end

class Gio::UnixFDListPrivate
end

class Gio::UnixFDMessagePrivate
end

class Gio::UnixFDMessagePrivate
end

class Gio::UnixInputStream
  include ::Gio::PollableInputStream
  include ::Gio::FileDescriptorBased
  include ::GLib::Interface
end

class Gio::UnixInputStreamPrivate
end

class Gio::UnixInputStreamPrivate
end

class Gio::UnixOutputStream
  include ::Gio::PollableOutputStream
  include ::Gio::FileDescriptorBased
  include ::GLib::Interface
end

class Gio::UnixOutputStreamPrivate
end

class Gio::UnixOutputStreamPrivate
end

class Gio::UnixSocketAddressPrivate
end

class Gio::UnixSocketAddressPrivate
end

class Gio::UnixSocketAddressType
  ABSTRACT = ::T.let(nil, ::T.untyped)
  ABSTRACT_PADDED = ::T.let(nil, ::T.untyped)
  ANONYMOUS = ::T.let(nil, ::T.untyped)
  INVALID = ::T.let(nil, ::T.untyped)
  PATH = ::T.let(nil, ::T.untyped)
end

Gio::Version = GLib::Version

module Gio::Volume
  include ::GLib::Interface
end

module Gio::Volume
  extend ::GLib::MetaInterface
  extend ::GLib::Interface
end

class Gio::ZlibCompressor
  include ::Gio::Converter
  include ::GLib::Interface
end

class Gio::ZlibCompressorFormat
  GZIP = ::T.let(nil, ::T.untyped)
  RAW = ::T.let(nil, ::T.untyped)
  ZLIB = ::T.let(nil, ::T.untyped)
end

class Gio::ZlibDecompressor
  include ::Gio::Converter
  include ::GLib::Interface
end

module Guard::Deprecated::Dsl
  MORE_INFO_ON_UPGRADING_TO_GUARD_2 = ::T.let(nil, ::T.untyped)
end

module Guard::Deprecated::Dsl::ClassMethods
  EVALUATE_GUARDFILE = ::T.let(nil, ::T.untyped)
end

module Guard::Deprecated::Evaluator
  EVALUATE_GUARDFILE = ::T.let(nil, ::T.untyped)
  REEVALUATE_GUARDFILE = ::T.let(nil, ::T.untyped)
end

module Guard::Deprecated::Guard::ClassMethods
  ADD_GROUP = ::T.let(nil, ::T.untyped)
  ADD_GUARD = ::T.let(nil, ::T.untyped)
  ADD_PLUGIN = ::T.let(nil, ::T.untyped)
  EVALUATE_GUARDFILE = ::T.let(nil, ::T.untyped)
  EVALUATOR = ::T.let(nil, ::T.untyped)
  GET_GUARD_CLASS = ::T.let(nil, ::T.untyped)
  GROUP = ::T.let(nil, ::T.untyped)
  GROUPS = ::T.let(nil, ::T.untyped)
  GUARDS = ::T.let(nil, ::T.untyped)
  GUARD_GEM_NAMES = ::T.let(nil, ::T.untyped)
  LISTENER_ASSIGN = ::T.let(nil, ::T.untyped)
  LOCATE_GUARD = ::T.let(nil, ::T.untyped)
  LOCK = ::T.let(nil, ::T.untyped)
  MORE_INFO_ON_UPGRADING_TO_GUARD_2 = ::T.let(nil, ::T.untyped)
  OPTIONS = ::T.let(nil, ::T.untyped)
  PLUGIN = ::T.let(nil, ::T.untyped)
  PLUGINS = ::T.let(nil, ::T.untyped)
  RESET_EVALUATOR = ::T.let(nil, ::T.untyped)
  RUNNER = ::T.let(nil, ::T.untyped)
  RUNNING = ::T.let(nil, ::T.untyped)
  SCOPE = ::T.let(nil, ::T.untyped)
  SCOPE_ASSIGN = ::T.let(nil, ::T.untyped)
end

module Guard::Deprecated::Watcher::ClassMethods
  MATCH_GUARDFILE = ::T.let(nil, ::T.untyped)
end

class Guard::Dsl
  WARN_INVALID_LOG_LEVEL = ::T.let(nil, ::T.untyped)
  WARN_INVALID_LOG_OPTIONS = ::T.let(nil, ::T.untyped)
end

class Guard::Guardfile::Evaluator
  DEFAULT_GUARDFILES = ::T.let(nil, ::T.untyped)
  ERROR_NO_GUARDFILE = ::T.let(nil, ::T.untyped)
  ERROR_NO_PLUGINS = ::T.let(nil, ::T.untyped)
end

class Guard::Internals::Groups
  DEFAULT_GROUPS = ::T.let(nil, ::T.untyped)
end

class Guard::Internals::Session
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

class Guard::Notifier
  DEPRECATED_IMPLICIT_CONNECT = ::T.let(nil, ::T.untyped)
end

class Guard::Plugin
  TEMPLATE_FORMAT = ::T.let(nil, ::T.untyped)
end

class Guard::PluginUtil
  ERROR_NO_GUARD_OR_CLASS = ::T.let(nil, ::T.untyped)
  INFO_ADDED_GUARD_TO_GUARDFILE = ::T.let(nil, ::T.untyped)
end

class Guard::Runner
  ADDITION_TASKS = ::T.let(nil, ::T.untyped)
  MODIFICATION_TASKS = ::T.let(nil, ::T.untyped)
  PLUGIN_FAILED = ::T.let(nil, ::T.untyped)
  REMOVAL_TASKS = ::T.let(nil, ::T.untyped)
end

module Guard::UI::Colors
  ANSI_ESCAPE_BGBLACK = ::T.let(nil, ::T.untyped)
  ANSI_ESCAPE_BGBLUE = ::T.let(nil, ::T.untyped)
  ANSI_ESCAPE_BGCYAN = ::T.let(nil, ::T.untyped)
  ANSI_ESCAPE_BGGREEN = ::T.let(nil, ::T.untyped)
  ANSI_ESCAPE_BGMAGENTA = ::T.let(nil, ::T.untyped)
  ANSI_ESCAPE_BGRED = ::T.let(nil, ::T.untyped)
  ANSI_ESCAPE_BGWHITE = ::T.let(nil, ::T.untyped)
  ANSI_ESCAPE_BGYELLOW = ::T.let(nil, ::T.untyped)
  ANSI_ESCAPE_BLACK = ::T.let(nil, ::T.untyped)
  ANSI_ESCAPE_BLUE = ::T.let(nil, ::T.untyped)
  ANSI_ESCAPE_BRIGHT = ::T.let(nil, ::T.untyped)
  ANSI_ESCAPE_CYAN = ::T.let(nil, ::T.untyped)
  ANSI_ESCAPE_GREEN = ::T.let(nil, ::T.untyped)
  ANSI_ESCAPE_MAGENTA = ::T.let(nil, ::T.untyped)
  ANSI_ESCAPE_RED = ::T.let(nil, ::T.untyped)
  ANSI_ESCAPE_WHITE = ::T.let(nil, ::T.untyped)
  ANSI_ESCAPE_YELLOW = ::T.let(nil, ::T.untyped)
end

class Guard::UI::Config
  DEFAULTS = ::T.let(nil, ::T.untyped)
  DEPRECATED_OPTS = ::T.let(nil, ::T.untyped)
end

class Guard::UI::Logger::Config
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

module Guard
  extend ::Guard::Internals::Helpers
end

class Hash
  include ::JSON::Ext::Generator::GeneratorMethods::Hash
  def assert_valid_keys(*valid_keys); end

  def compact_blank!(); end

  def deconstruct_keys(arg); end

  def deep_merge!(other_hash, &block); end

  def except!(*keys); end

  def extract!(*keys); end

  def extractable_options?(); end

  def slice!(*keys); end

  def to_options!(); end

  def to_param(namespace=T.unsafe(nil)); end
end

class Hash
  def self.ruby2_keywords_hash(arg); end

  def self.ruby2_keywords_hash?(arg); end

  def self.try_convert(arg); end
end

class HighLine
  VERSION = ::T.let(nil, ::T.untyped)
end

module HighLine::BuiltinStyles
  BASIC_COLORS = ::T.let(nil, ::T.untyped)
  BLACK = ::T.let(nil, ::T.untyped)
  BLACK_STYLE = ::T.let(nil, ::T.untyped)
  BLINK = ::T.let(nil, ::T.untyped)
  BLINK_STYLE = ::T.let(nil, ::T.untyped)
  BLUE = ::T.let(nil, ::T.untyped)
  BLUE_STYLE = ::T.let(nil, ::T.untyped)
  BOLD = ::T.let(nil, ::T.untyped)
  BOLD_STYLE = ::T.let(nil, ::T.untyped)
  BRIGHT_BLACK = ::T.let(nil, ::T.untyped)
  BRIGHT_BLACK_STYLE = ::T.let(nil, ::T.untyped)
  BRIGHT_BLUE = ::T.let(nil, ::T.untyped)
  BRIGHT_BLUE_STYLE = ::T.let(nil, ::T.untyped)
  BRIGHT_CYAN = ::T.let(nil, ::T.untyped)
  BRIGHT_CYAN_STYLE = ::T.let(nil, ::T.untyped)
  BRIGHT_GRAY = ::T.let(nil, ::T.untyped)
  BRIGHT_GRAY_STYLE = ::T.let(nil, ::T.untyped)
  BRIGHT_GREEN = ::T.let(nil, ::T.untyped)
  BRIGHT_GREEN_STYLE = ::T.let(nil, ::T.untyped)
  BRIGHT_GREY = ::T.let(nil, ::T.untyped)
  BRIGHT_GREY_STYLE = ::T.let(nil, ::T.untyped)
  BRIGHT_MAGENTA = ::T.let(nil, ::T.untyped)
  BRIGHT_MAGENTA_STYLE = ::T.let(nil, ::T.untyped)
  BRIGHT_NONE = ::T.let(nil, ::T.untyped)
  BRIGHT_NONE_STYLE = ::T.let(nil, ::T.untyped)
  BRIGHT_RED = ::T.let(nil, ::T.untyped)
  BRIGHT_RED_STYLE = ::T.let(nil, ::T.untyped)
  BRIGHT_WHITE = ::T.let(nil, ::T.untyped)
  BRIGHT_WHITE_STYLE = ::T.let(nil, ::T.untyped)
  BRIGHT_YELLOW = ::T.let(nil, ::T.untyped)
  BRIGHT_YELLOW_STYLE = ::T.let(nil, ::T.untyped)
  CLEAR = ::T.let(nil, ::T.untyped)
  CLEAR_STYLE = ::T.let(nil, ::T.untyped)
  COLORS = ::T.let(nil, ::T.untyped)
  COLOR_LIST = ::T.let(nil, ::T.untyped)
  CONCEALED = ::T.let(nil, ::T.untyped)
  CONCEALED_STYLE = ::T.let(nil, ::T.untyped)
  CYAN = ::T.let(nil, ::T.untyped)
  CYAN_STYLE = ::T.let(nil, ::T.untyped)
  DARK = ::T.let(nil, ::T.untyped)
  DARK_STYLE = ::T.let(nil, ::T.untyped)
  ERASE_CHAR = ::T.let(nil, ::T.untyped)
  ERASE_CHAR_STYLE = ::T.let(nil, ::T.untyped)
  ERASE_LINE = ::T.let(nil, ::T.untyped)
  ERASE_LINE_STYLE = ::T.let(nil, ::T.untyped)
  GRAY = ::T.let(nil, ::T.untyped)
  GRAY_STYLE = ::T.let(nil, ::T.untyped)
  GREEN = ::T.let(nil, ::T.untyped)
  GREEN_STYLE = ::T.let(nil, ::T.untyped)
  GREY = ::T.let(nil, ::T.untyped)
  GREY_STYLE = ::T.let(nil, ::T.untyped)
  LIGHT_BLACK = ::T.let(nil, ::T.untyped)
  LIGHT_BLACK_STYLE = ::T.let(nil, ::T.untyped)
  LIGHT_BLUE = ::T.let(nil, ::T.untyped)
  LIGHT_BLUE_STYLE = ::T.let(nil, ::T.untyped)
  LIGHT_CYAN = ::T.let(nil, ::T.untyped)
  LIGHT_CYAN_STYLE = ::T.let(nil, ::T.untyped)
  LIGHT_GRAY = ::T.let(nil, ::T.untyped)
  LIGHT_GRAY_STYLE = ::T.let(nil, ::T.untyped)
  LIGHT_GREEN = ::T.let(nil, ::T.untyped)
  LIGHT_GREEN_STYLE = ::T.let(nil, ::T.untyped)
  LIGHT_GREY = ::T.let(nil, ::T.untyped)
  LIGHT_GREY_STYLE = ::T.let(nil, ::T.untyped)
  LIGHT_MAGENTA = ::T.let(nil, ::T.untyped)
  LIGHT_MAGENTA_STYLE = ::T.let(nil, ::T.untyped)
  LIGHT_NONE = ::T.let(nil, ::T.untyped)
  LIGHT_NONE_STYLE = ::T.let(nil, ::T.untyped)
  LIGHT_RED = ::T.let(nil, ::T.untyped)
  LIGHT_RED_STYLE = ::T.let(nil, ::T.untyped)
  LIGHT_WHITE = ::T.let(nil, ::T.untyped)
  LIGHT_WHITE_STYLE = ::T.let(nil, ::T.untyped)
  LIGHT_YELLOW = ::T.let(nil, ::T.untyped)
  LIGHT_YELLOW_STYLE = ::T.let(nil, ::T.untyped)
  MAGENTA = ::T.let(nil, ::T.untyped)
  MAGENTA_STYLE = ::T.let(nil, ::T.untyped)
  NONE = ::T.let(nil, ::T.untyped)
  NONE_STYLE = ::T.let(nil, ::T.untyped)
  ON_BLACK = ::T.let(nil, ::T.untyped)
  ON_BLACK_STYLE = ::T.let(nil, ::T.untyped)
  ON_BLUE = ::T.let(nil, ::T.untyped)
  ON_BLUE_STYLE = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_BLACK = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_BLACK_STYLE = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_BLUE = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_BLUE_STYLE = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_CYAN = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_CYAN_STYLE = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_GRAY = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_GRAY_STYLE = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_GREEN = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_GREEN_STYLE = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_GREY = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_GREY_STYLE = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_MAGENTA = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_MAGENTA_STYLE = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_NONE = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_NONE_STYLE = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_RED = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_RED_STYLE = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_WHITE = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_WHITE_STYLE = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_YELLOW = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_YELLOW_STYLE = ::T.let(nil, ::T.untyped)
  ON_CYAN = ::T.let(nil, ::T.untyped)
  ON_CYAN_STYLE = ::T.let(nil, ::T.untyped)
  ON_GRAY = ::T.let(nil, ::T.untyped)
  ON_GRAY_STYLE = ::T.let(nil, ::T.untyped)
  ON_GREEN = ::T.let(nil, ::T.untyped)
  ON_GREEN_STYLE = ::T.let(nil, ::T.untyped)
  ON_GREY = ::T.let(nil, ::T.untyped)
  ON_GREY_STYLE = ::T.let(nil, ::T.untyped)
  ON_LIGHT_BLACK = ::T.let(nil, ::T.untyped)
  ON_LIGHT_BLACK_STYLE = ::T.let(nil, ::T.untyped)
  ON_LIGHT_BLUE = ::T.let(nil, ::T.untyped)
  ON_LIGHT_BLUE_STYLE = ::T.let(nil, ::T.untyped)
  ON_LIGHT_CYAN = ::T.let(nil, ::T.untyped)
  ON_LIGHT_CYAN_STYLE = ::T.let(nil, ::T.untyped)
  ON_LIGHT_GRAY = ::T.let(nil, ::T.untyped)
  ON_LIGHT_GRAY_STYLE = ::T.let(nil, ::T.untyped)
  ON_LIGHT_GREEN = ::T.let(nil, ::T.untyped)
  ON_LIGHT_GREEN_STYLE = ::T.let(nil, ::T.untyped)
  ON_LIGHT_GREY = ::T.let(nil, ::T.untyped)
  ON_LIGHT_GREY_STYLE = ::T.let(nil, ::T.untyped)
  ON_LIGHT_MAGENTA = ::T.let(nil, ::T.untyped)
  ON_LIGHT_MAGENTA_STYLE = ::T.let(nil, ::T.untyped)
  ON_LIGHT_NONE = ::T.let(nil, ::T.untyped)
  ON_LIGHT_NONE_STYLE = ::T.let(nil, ::T.untyped)
  ON_LIGHT_RED = ::T.let(nil, ::T.untyped)
  ON_LIGHT_RED_STYLE = ::T.let(nil, ::T.untyped)
  ON_LIGHT_WHITE = ::T.let(nil, ::T.untyped)
  ON_LIGHT_WHITE_STYLE = ::T.let(nil, ::T.untyped)
  ON_LIGHT_YELLOW = ::T.let(nil, ::T.untyped)
  ON_LIGHT_YELLOW_STYLE = ::T.let(nil, ::T.untyped)
  ON_MAGENTA = ::T.let(nil, ::T.untyped)
  ON_MAGENTA_STYLE = ::T.let(nil, ::T.untyped)
  ON_NONE = ::T.let(nil, ::T.untyped)
  ON_NONE_STYLE = ::T.let(nil, ::T.untyped)
  ON_RED = ::T.let(nil, ::T.untyped)
  ON_RED_STYLE = ::T.let(nil, ::T.untyped)
  ON_WHITE = ::T.let(nil, ::T.untyped)
  ON_WHITE_STYLE = ::T.let(nil, ::T.untyped)
  ON_YELLOW = ::T.let(nil, ::T.untyped)
  ON_YELLOW_STYLE = ::T.let(nil, ::T.untyped)
  RED = ::T.let(nil, ::T.untyped)
  RED_STYLE = ::T.let(nil, ::T.untyped)
  RESET = ::T.let(nil, ::T.untyped)
  RESET_STYLE = ::T.let(nil, ::T.untyped)
  REVERSE = ::T.let(nil, ::T.untyped)
  REVERSE_STYLE = ::T.let(nil, ::T.untyped)
  STYLES = ::T.let(nil, ::T.untyped)
  STYLE_LIST = ::T.let(nil, ::T.untyped)
  UNDERLINE = ::T.let(nil, ::T.untyped)
  UNDERLINE_STYLE = ::T.let(nil, ::T.untyped)
  UNDERSCORE = ::T.let(nil, ::T.untyped)
  UNDERSCORE_STYLE = ::T.let(nil, ::T.untyped)
  WHITE = ::T.let(nil, ::T.untyped)
  WHITE_STYLE = ::T.let(nil, ::T.untyped)
  YELLOW = ::T.let(nil, ::T.untyped)
  YELLOW_STYLE = ::T.let(nil, ::T.untyped)
end

module HighLine::BuiltinStyles::ClassMethods
  RGB_COLOR_PATTERN = ::T.let(nil, ::T.untyped)
end

class HighLine::SampleColorScheme
  SAMPLE_SCHEME = ::T.let(nil, ::T.untyped)
end

module HighLine::StringExtensions
  STYLE_METHOD_NAME_PATTERN = ::T.let(nil, ::T.untyped)
end

module I18n
  DEFAULT_INTERPOLATION_PATTERNS = ::T.let(nil, ::T.untyped)
  EMPTY_HASH = ::T.let(nil, ::T.untyped)
  INTERPOLATION_PATTERN = ::T.let(nil, ::T.untyped)
  RESERVED_KEYS = ::T.let(nil, ::T.untyped)
  RESERVED_KEYS_PATTERN = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module I18n::Backend::Flatten
  FLATTEN_SEPARATOR = ::T.let(nil, ::T.untyped)
  SEPARATOR_ESCAPE_CHAR = ::T.let(nil, ::T.untyped)
end

module I18n::Backend::InterpolationCompiler::Compiler
  INTERPOLATION_SYNTAX_PATTERN = ::T.let(nil, ::T.untyped)
  TOKENIZER = ::T.let(nil, ::T.untyped)
end

class I18n::Backend::KeyValue
  include ::I18n::Backend::Flatten
end

module I18n::Backend::KeyValue::Implementation
  include ::I18n::Backend::Flatten
end

module I18n::Backend::Transliterator
  DEFAULT_REPLACEMENT_CHAR = ::T.let(nil, ::T.untyped)
end

class I18n::Backend::Transliterator::HashTransliterator
  DEFAULT_APPROXIMATIONS = ::T.let(nil, ::T.untyped)
end

module I18n::Gettext
  CONTEXT_SEPARATOR = ::T.let(nil, ::T.untyped)
  PLURAL_SEPARATOR = ::T.let(nil, ::T.untyped)
end

I18n::JSON = ActiveSupport::JSON

module I18n::Locale::Tag
  RFC4646_FORMATS = ::T.let(nil, ::T.untyped)
  RFC4646_SUBTAGS = ::T.let(nil, ::T.untyped)
end

module I18n::Locale::Tag::Rfc4646::Parser
  PATTERN = ::T.let(nil, ::T.untyped)
end

module I18n::Tests::Localization
end

module I18n::Tests::Localization
  def self.included(base); end
end

class IO
  def beep(); end

  def check_winsize_changed(); end

  def clear_screen(); end

  def console_mode(); end

  def console_mode=(console_mode); end

  def cooked(); end

  def cooked!(); end

  def cursor(); end

  def cursor=(cursor); end

  def cursor_down(arg); end

  def cursor_left(arg); end

  def cursor_right(arg); end

  def cursor_up(arg); end

  def echo=(echo); end

  def echo?(); end

  def erase_line(arg); end

  def erase_screen(arg); end

  def getch(*arg); end

  def getpass(*arg); end

  def goto(arg, arg1); end

  def goto_column(arg); end

  def iflush(); end

  def ioflush(); end

  def noecho(); end

  def nonblock(*arg); end

  def nonblock=(nonblock); end

  def nonblock?(); end

  def nread(); end

  def oflush(); end

  def pathconf(arg); end

  def pressed?(); end

  def raw(*arg); end

  def raw!(*arg); end

  def ready?(); end

  def scroll_backward(arg); end

  def scroll_forward(arg); end

  def set_encoding_by_bom(); end

  def wait(*arg); end

  def wait_readable(*arg); end

  def wait_writable(*arg); end

  def winsize(); end

  def winsize=(winsize); end
end

class IO::ConsoleMode
  def echo=(echo); end

  def raw(*arg); end

  def raw!(*arg); end
end

class IO::ConsoleMode
end

IO::EWOULDBLOCKWaitReadable = IO::EAGAINWaitReadable

IO::EWOULDBLOCKWaitWritable = IO::EAGAINWaitWritable

class IO
  def self.console(*arg); end

  def self.console_size(); end

  def self.default_console_size(); end
end

class IPAddr
  def ==(other); end

  def initialize(addr=T.unsafe(nil), family=T.unsafe(nil)); end
end

module IRB
  IRBRC_EXT = ::T.let(nil, ::T.untyped)
  MagicFile = ::T.let(nil, ::T.untyped)
  STDIN_FILE_NAME = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module IRB::Color
  BLUE = ::T.let(nil, ::T.untyped)
  BOLD = ::T.let(nil, ::T.untyped)
  CLEAR = ::T.let(nil, ::T.untyped)
  CYAN = ::T.let(nil, ::T.untyped)
  GREEN = ::T.let(nil, ::T.untyped)
  MAGENTA = ::T.let(nil, ::T.untyped)
  RED = ::T.let(nil, ::T.untyped)
  REVERSE = ::T.let(nil, ::T.untyped)
  UNDERLINE = ::T.let(nil, ::T.untyped)
  YELLOW = ::T.let(nil, ::T.untyped)
end

module IRB::Color
  def self.clear(); end

  def self.colorable?(); end

  def self.colorize(text, seq); end

  def self.colorize_code(code, complete: T.unsafe(nil)); end

  def self.inspect_colorable?(obj, seen: T.unsafe(nil)); end
end

class IRB::Context
  def __exit__(*arg); end

  def __inspect__(); end

  def __to_s__(); end

  def echo_on_assignment(); end

  def echo_on_assignment=(echo_on_assignment); end

  def echo_on_assignment?(); end

  def evaluate(line, line_no, exception: T.unsafe(nil)); end

  def initialize(irb, workspace=T.unsafe(nil), input_method=T.unsafe(nil)); end

  def inspect_last_value(); end

  def newline_before_multiline_output(); end

  def newline_before_multiline_output=(newline_before_multiline_output); end

  def newline_before_multiline_output?(); end

  def omit_on_assignment(); end

  def omit_on_assignment=(omit_on_assignment); end

  def omit_on_assignment?(); end

  def use_colorize(); end

  def use_colorize?(); end

  def use_multiline(); end

  def use_multiline?(); end

  def use_reidline(); end

  def use_reidline?(); end

  def use_singleline(); end

  def use_singleline?(); end
  IDNAME_IVARS = ::T.let(nil, ::T.untyped)
  NOPRINTING_IVARS = ::T.let(nil, ::T.untyped)
  NO_INSPECTING_IVARS = ::T.let(nil, ::T.untyped)
end

class IRB::DefaultEncodings
  def external(); end

  def external=(_); end

  def internal(); end

  def internal=(_); end
end

class IRB::DefaultEncodings
  def self.[](*arg); end

  def self.members(); end
end

module IRB::ExtendCommandBundle
  def irb(*opts, &b); end

  def irb_change_workspace(*opts, &b); end

  def irb_current_working_workspace(*opts, &b); end

  def irb_fg(*opts, &b); end

  def irb_help(*opts, &b); end

  def irb_info(*opts, &b); end

  def irb_jobs(*opts, &b); end

  def irb_kill(*opts, &b); end

  def irb_pop_workspace(*opts, &b); end

  def irb_push_workspace(*opts, &b); end

  def irb_source(*opts, &b); end

  def irb_workspaces(*opts, &b); end
end

IRB::ExtendCommandBundle::EXCB = IRB::ExtendCommandBundle

module IRB::ExtendCommandBundle
  def self.irb_original_method_name(method_name); end
end

class IRB::FileInputMethod
  def initialize(file); end
end

module IRB::InputCompletor
  BASIC_WORD_BREAK_CHARACTERS = ::T.let(nil, ::T.untyped)
  CompletionProc = ::T.let(nil, ::T.untyped)
  Operators = ::T.let(nil, ::T.untyped)
  PerfectMatchedProc = ::T.let(nil, ::T.untyped)
  ReservedWords = ::T.let(nil, ::T.untyped)
end

module IRB::InputCompletor
  def self.ignored_modules(); end

  def self.retrieve_completion_data(input, bind: T.unsafe(nil), doc_namespace: T.unsafe(nil)); end

  def self.select_message(receiver, message, candidates, sep=T.unsafe(nil)); end
end

class IRB::InputMethod
  def initialize(file=T.unsafe(nil)); end

  def winsize(); end
end

class IRB::Inspector
  def initialize(inspect_proc, init_proc=T.unsafe(nil)); end
end

class IRB::Irb
  def assignment_expression?(line); end

  def handle_exception(exc); end

  def initialize(workspace=T.unsafe(nil), input_method=T.unsafe(nil)); end

  def output_value(omit=T.unsafe(nil)); end

  def prompt(prompt, ltype, indent, line_no); end
  ASSIGNMENT_NODE_TYPES = ::T.let(nil, ::T.untyped)
end

class IRB::Locale
  def String(mes); end

  def encoding(); end

  def find(file, paths=T.unsafe(nil)); end

  def format(*opts); end

  def gets(*rs); end

  def initialize(locale=T.unsafe(nil)); end

  def lang(); end

  def load(file, priv=T.unsafe(nil)); end

  def modifier(); end

  def print(*opts); end

  def printf(*opts); end

  def puts(*opts); end

  def readline(*rs); end

  def require(file, priv=T.unsafe(nil)); end

  def territory(); end
  LOCALE_DIR = ::T.let(nil, ::T.untyped)
  LOCALE_NAME_RE = ::T.let(nil, ::T.untyped)
end

class IRB::Locale
end

class IRB::OutputMethod::NotImplementedError
  def initialize(val); end
end

class IRB::ReadlineInputMethod
  def initialize(); end
end

class IRB::ReadlineInputMethod
  def self.initialize_readline(); end
end

class IRB::ReidlineInputMethod
  include ::Reline
  def auto_indent(&block); end

  def check_termination(&block); end

  def dynamic_prompt(&block); end

  def encoding(); end

  def eof?(); end

  def initialize(); end

  def line(line_no); end
end

class IRB::ReidlineInputMethod
end

class IRB::StdioInputMethod
  def initialize(); end
end

class IRB::WorkSpace
  def initialize(*main); end

  def local_variable_get(name); end

  def local_variable_set(name, value); end
end

module IRB
  def self.Inspector(inspect, init=T.unsafe(nil)); end

  def self.delete_caller(); end

  def self.init_config(ap_path); end

  def self.init_error(); end

  def self.load_modules(); end

  def self.parse_opts(argv: T.unsafe(nil)); end

  def self.rc_file(ext=T.unsafe(nil)); end

  def self.rc_file_generators(); end

  def self.run_config(); end

  def self.setup(ap_path, argv: T.unsafe(nil)); end
end

class Integer
  include ::JSON::Ext::Generator::GeneratorMethods::Integer
  def to_bn(); end
end

class JSON::Ext::Generator::State
  def escape_slash(); end

  def escape_slash=(escape_slash); end

  def escape_slash?(); end
end

class JSON::Ext::Generator::State
  def self.from_state(arg); end
end

class JSON::Ext::Parser
  def initialize(*arg); end
end

JSON::Parser = JSON::Ext::Parser

JSON::State = JSON::Ext::Generator::State

JSON::UnparserError = JSON::GeneratorError

module JSON
  def self.create_fast_state(); end

  def self.create_pretty_state(); end

  def self.load_file(filespec, opts=T.unsafe(nil)); end

  def self.load_file!(filespec, opts=T.unsafe(nil)); end
end

module Kernel
  include ::ActiveSupport::ForkTracker::CoreExtPrivate
  include ::ActiveSupport::ForkTracker::CoreExt
  def itself(); end

  def object_id(); end

  def pretty_inspect(); end

  def then(); end

  def yield_self(); end
end

module Kernel
  def self.at_exit(); end

  def self.fork(); end

  def self.load(*arg); end

  def self.require(path); end
end

class KeyError
  include ::DidYouMean::Correctable
end

module Launchy
  VERSION = ::T.let(nil, ::T.untyped)
end

module Launchy::Version
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PATCH = ::T.let(nil, ::T.untyped)
end

module Listen
  VERSION = ::T.let(nil, ::T.untyped)
end

module Listen::Adapter
  OPTIMIZED_ADAPTERS = ::T.let(nil, ::T.untyped)
  POLLING_FALLBACK_MESSAGE = ::T.let(nil, ::T.untyped)
end

class Listen::Adapter::BSD
  BUNDLER_DECLARE_GEM = ::T.let(nil, ::T.untyped)
  DEFAULTS = ::T.let(nil, ::T.untyped)
  OS_REGEXP = ::T.let(nil, ::T.untyped)
end

class Listen::Adapter::Base
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Listen::Adapter::Darwin
  DEFAULTS = ::T.let(nil, ::T.untyped)
  INCOMPATIBLE_GEM_VERSION = ::T.let(nil, ::T.untyped)
  OS_REGEXP = ::T.let(nil, ::T.untyped)
end

class Listen::Adapter::Linux
  DEFAULTS = ::T.let(nil, ::T.untyped)
  OS_REGEXP = ::T.let(nil, ::T.untyped)
  README_URL = ::T.let(nil, ::T.untyped)
end

class Listen::Adapter::Polling
  DEFAULTS = ::T.let(nil, ::T.untyped)
  OS_REGEXP = ::T.let(nil, ::T.untyped)
end

class Listen::Adapter::Windows
  BUNDLER_DECLARE_GEM = ::T.let(nil, ::T.untyped)
  OS_REGEXP = ::T.let(nil, ::T.untyped)
end

class Listen::Event::Loop
  MAX_STARTUP_SECONDS = ::T.let(nil, ::T.untyped)
end

Listen::Event::Loop::Error = Listen::Error

Listen::Event::Loop::NotStarted = Listen::Error::NotStarted

class Listen::Listener::Config
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Listen::Record::SymlinkDetector
  README_URL = ::T.let(nil, ::T.untyped)
  SYMLINK_LOOP_ERROR = ::T.let(nil, ::T.untyped)
end

Listen::Record::SymlinkDetector::Error = Listen::Error

class Listen::Silencer
  DEFAULT_IGNORED_DIRECTORIES = ::T.let(nil, ::T.untyped)
  DEFAULT_IGNORED_EXTENSIONS = ::T.let(nil, ::T.untyped)
end

class LoadError
  def is_missing?(location); end
end

class Logger
  def debug!(); end

  def error!(); end

  def fatal!(); end

  def info!(); end

  def warn!(); end
  SEV_LABEL = ::T.let(nil, ::T.untyped)
end

class Logger::Formatter
  Format = ::T.let(nil, ::T.untyped)
end

class Logger::LogDevice
  include ::MonitorMixin
end

module Logger::Period
  SiD = ::T.let(nil, ::T.untyped)
end

module Lumberjack
  LINE_SEPARATOR = ::T.let(nil, ::T.untyped)
end

class Lumberjack::Device::LogFile
  EXTERNAL_ENCODING = ::T.let(nil, ::T.untyped)
end

class Lumberjack::Device::Writer
  DEFAULT_ADDITIONAL_LINES_TEMPLATE = ::T.let(nil, ::T.untyped)
  DEFAULT_FIRST_LINE_TEMPLATE = ::T.let(nil, ::T.untyped)
end

class Lumberjack::LogEntry
  TIME_FORMAT = ::T.let(nil, ::T.untyped)
  UNIT_OF_WORK_ID = ::T.let(nil, ::T.untyped)
end

class Lumberjack::Rack::RequestId
  REQUEST_ID = ::T.let(nil, ::T.untyped)
end

module Lumberjack::Severity
  DEBUG = ::T.let(nil, ::T.untyped)
  ERROR = ::T.let(nil, ::T.untyped)
  FATAL = ::T.let(nil, ::T.untyped)
  INFO = ::T.let(nil, ::T.untyped)
  SEVERITY_LABELS = ::T.let(nil, ::T.untyped)
  UNKNOWN = ::T.let(nil, ::T.untyped)
  WARN = ::T.let(nil, ::T.untyped)
end

class Lumberjack::TaggedLoggerSupport::Formatter
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Lumberjack::Template
  MICROSECOND_TIME_FORMAT = ::T.let(nil, ::T.untyped)
  MILLISECOND_TIME_FORMAT = ::T.let(nil, ::T.untyped)
  PLACEHOLDER_PATTERN = ::T.let(nil, ::T.untyped)
  TEMPLATE_ARGUMENT_ORDER = ::T.let(nil, ::T.untyped)
end

module Marshal
  extend ::ActiveSupport::MarshalWithAutoloading
end

class Matrix
  SELECTORS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Matrix::EigenvalueDecomposition
  def initialize(a); end
end

class Matrix::LUPDecomposition
  include ::Matrix::ConversionHelper
  def det(); end

  def determinant(); end

  def initialize(a); end

  def l(); end

  def p(); end

  def pivots(); end

  def singular?(); end

  def solve(b); end

  def to_a(); end

  def to_ary(); end

  def u(); end
end

class Matrix::LUPDecomposition
end

module Mercenary
  VERSION = ::T.let(nil, ::T.untyped)
end

class Mercenary::Command
  def action(&block); end

  def actions(); end

  def actions=(actions); end

  def add_default_options(opts); end

  def alias(cmd_name); end

  def aliases(); end

  def command(cmd_name); end

  def commands(); end

  def commands=(commands); end

  def default_command(command_name=T.unsafe(nil)); end

  def description(desc=T.unsafe(nil)); end

  def execute(argv=T.unsafe(nil), config=T.unsafe(nil)); end

  def full_name(); end

  def go(argv, opts, config); end

  def has_command?(sub_command); end

  def ident(); end

  def identity(); end

  def initialize(name, parent=T.unsafe(nil)); end

  def logger(level=T.unsafe(nil)); end

  def map(); end

  def name(); end

  def names_and_aliases(); end

  def option(sym, *options); end

  def options(); end

  def options=(options); end

  def parent(); end

  def parent=(parent); end

  def process_options(opts, config); end

  def summarize(); end

  def syntax(syntax=T.unsafe(nil)); end

  def trace(); end

  def version(version=T.unsafe(nil)); end
end

class Mercenary::Command
end

class Mercenary::Option
  def config_key(); end

  def description(); end

  def eql?(other); end

  def for_option_parser(); end

  def formatted_switches(); end

  def initialize(config_key, info); end

  def long(); end

  def return_type(); end

  def short(); end

  def switches(); end
end

class Mercenary::Option
end

class Mercenary::Presenter
  def command(); end

  def command=(command); end

  def command_header(); end

  def command_options_presentation(); end

  def command_presentation(); end

  def initialize(command); end

  def method_missing(meth, *args, &block); end

  def options_presentation(); end

  def parent_command_options_presentation(); end

  def subcommands_presentation(); end

  def usage_presentation(); end
end

class Mercenary::Presenter
end

class Mercenary::Program
  def config(); end

  def go(argv); end

  def initialize(name); end

  def optparse(); end
end

class Mercenary::Program
end

module MethodSource
  VERSION = ::T.let(nil, ::T.untyped)
end

module MethodSource::CodeHelpers::IncompleteExpression
  GENERIC_REGEXPS = ::T.let(nil, ::T.untyped)
  RBX_ONLY_REGEXPS = ::T.let(nil, ::T.untyped)
end

MiniTest = Minitest

module Minitest
  ENCS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Minitest::Assertions
  E = ::T.let(nil, ::T.untyped)
  UNDEFINED = ::T.let(nil, ::T.untyped)
end

class Minitest::BacktraceFilter
  MT_RE = ::T.let(nil, ::T.untyped)
end

class Minitest::Runnable
  SIGNALS = ::T.let(nil, ::T.untyped)
end

class Minitest::Spec
  TYPES = ::T.let(nil, ::T.untyped)
end

module Minitest::Spec::DSL
  TYPES = ::T.let(nil, ::T.untyped)
end

class Minitest::Test
  PASSTHROUGH_EXCEPTIONS = ::T.let(nil, ::T.untyped)
  TEARDOWN_METHODS = ::T.let(nil, ::T.untyped)
end

class Minitest::Unit
  VERSION = ::T.let(nil, ::T.untyped)
end

class Module
  include ::ActiveSupport::Dependencies::ModuleConstMissing
  def alias_attribute(new_name, old_name); end

  def anonymous?(); end

  def cattr_accessor(*syms, instance_reader: T.unsafe(nil), instance_writer: T.unsafe(nil), instance_accessor: T.unsafe(nil), default: T.unsafe(nil), &blk); end

  def cattr_reader(*syms, instance_reader: T.unsafe(nil), instance_accessor: T.unsafe(nil), default: T.unsafe(nil), location: T.unsafe(nil)); end

  def cattr_writer(*syms, instance_writer: T.unsafe(nil), instance_accessor: T.unsafe(nil), default: T.unsafe(nil), location: T.unsafe(nil)); end

  def delegate(*methods, to: T.unsafe(nil), prefix: T.unsafe(nil), allow_nil: T.unsafe(nil), private: T.unsafe(nil)); end

  def delegate_missing_to(target, allow_nil: T.unsafe(nil)); end

  def deprecate(*method_names); end

  def mattr_accessor(*syms, instance_reader: T.unsafe(nil), instance_writer: T.unsafe(nil), instance_accessor: T.unsafe(nil), default: T.unsafe(nil), &blk); end

  def mattr_reader(*syms, instance_reader: T.unsafe(nil), instance_accessor: T.unsafe(nil), default: T.unsafe(nil), location: T.unsafe(nil)); end

  def mattr_writer(*syms, instance_writer: T.unsafe(nil), instance_accessor: T.unsafe(nil), default: T.unsafe(nil), location: T.unsafe(nil)); end

  def method_visibility(method); end

  def module_parent(); end

  def module_parent_name(); end

  def module_parents(); end

  def redefine_method(method, &block); end

  def redefine_singleton_method(method, &block); end

  def remove_possible_method(method); end

  def remove_possible_singleton_method(method); end

  def silence_redefinition_of_method(method); end
  DELEGATION_RESERVED_KEYWORDS = ::T.let(nil, ::T.untyped)
  DELEGATION_RESERVED_METHOD_NAMES = ::T.let(nil, ::T.untyped)
  RUBY_RESERVED_KEYWORDS = ::T.let(nil, ::T.untyped)
end

class Module::DelegationError
end

class Module::DelegationError
end

class Monitor
  def enter(); end

  def exit(); end

  def mon_check_owner(); end

  def mon_enter(); end

  def mon_exit(); end

  def mon_locked?(); end

  def mon_owned?(); end

  def mon_synchronize(); end

  def mon_try_enter(); end

  def new_cond(); end

  def synchronize(); end

  def try_enter(); end

  def try_mon_enter(); end

  def wait_for_cond(arg, arg1); end
end

module MonitorMixin
  def initialize(*args); end
end

class MonitorMixin::ConditionVariable
  def initialize(monitor); end
end

module Mutex_m
  VERSION = ::T.let(nil, ::T.untyped)
end

class NameError
  include ::DidYouMean::Correctable
  def missing_name(); end

  def missing_name?(name); end
end

module Nenv
  VERSION = ::T.let(nil, ::T.untyped)
end

class Net::BufferedIO
  def write_timeout(); end

  def write_timeout=(write_timeout); end
end

class Net::HTTP
  def ipaddr(); end

  def ipaddr=(addr); end

  def max_retries(); end

  def max_retries=(retries); end

  def max_version(); end

  def max_version=(max_version); end

  def min_version(); end

  def min_version=(min_version); end

  def write_timeout(); end

  def write_timeout=(sec); end
  ENVIRONMENT_VARIABLE_IS_MULTIUSER_SAFE = ::T.let(nil, ::T.untyped)
end

Net::HTTP::ProxyMod = Net::HTTP::ProxyDelta

class Net::HTTPAlreadyReported
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPAlreadyReported
end

Net::HTTPClientError::EXCEPTION_TYPE = Net::HTTPServerException

Net::HTTPClientErrorCode = Net::HTTPClientError

class Net::HTTPEarlyHints
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPEarlyHints
end

Net::HTTPFatalErrorCode = Net::HTTPClientError

Net::HTTPInformation::EXCEPTION_TYPE = Net::HTTPError

Net::HTTPInformationCode = Net::HTTPInformation

class Net::HTTPLoopDetected
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPLoopDetected
end

class Net::HTTPMisdirectedRequest
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPMisdirectedRequest
end

Net::HTTPMovedTemporarily = Net::HTTPFound

Net::HTTPMultipleChoice = Net::HTTPMultipleChoices

class Net::HTTPNotExtended
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPNotExtended
end

class Net::HTTPPayloadTooLarge
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPPayloadTooLarge
end

class Net::HTTPProcessing
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPProcessing
end

class Net::HTTPRangeNotSatisfiable
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPRangeNotSatisfiable
end

Net::HTTPRedirection::EXCEPTION_TYPE = Net::HTTPRetriableError

Net::HTTPRedirectionCode = Net::HTTPRedirection

Net::HTTPRequestURITooLarge = Net::HTTPURITooLong

Net::HTTPResponceReceiver = Net::HTTPResponse

Net::HTTPRetriableCode = Net::HTTPRedirection

Net::HTTPServerError::EXCEPTION_TYPE = Net::HTTPFatalError

Net::HTTPServerErrorCode = Net::HTTPServerError

Net::HTTPSession = Net::HTTP

Net::HTTPSuccess::EXCEPTION_TYPE = Net::HTTPError

Net::HTTPSuccessCode = Net::HTTPSuccess

class Net::HTTPURITooLong
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPURITooLong
end

Net::HTTPUnknownResponse::EXCEPTION_TYPE = Net::HTTPError

class Net::HTTPVariantAlsoNegotiates
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPVariantAlsoNegotiates
end

Net::NetPrivate::HTTPRequest = Net::HTTPRequest

Net::NetPrivate::Socket = Net::InternetMessageIO

Net::ProtocRetryError = Net::ProtoRetriableError

class Net::ReadTimeout
  def initialize(io=T.unsafe(nil)); end

  def io(); end
end

class Net::WriteTimeout
  def initialize(io=T.unsafe(nil)); end

  def io(); end
end

class NilClass
  include ::JSON::Ext::Generator::GeneratorMethods::NilClass
  def to_d(); end
end

class NoMatchingPatternError
end

class NoMatchingPatternError
end

module Nokogiri
  LIBXML2_PATCHES = ::T.let(nil, ::T.untyped)
  LIBXML_COMPILED_VERSION = ::T.let(nil, ::T.untyped)
  LIBXML_ICONV_ENABLED = ::T.let(nil, ::T.untyped)
  LIBXML_LOADED_VERSION = ::T.let(nil, ::T.untyped)
  LIBXML_MEMORY_MANAGEMENT = ::T.let(nil, ::T.untyped)
  LIBXSLT_COMPILED_VERSION = ::T.let(nil, ::T.untyped)
  LIBXSLT_DATETIME_ENABLED = ::T.let(nil, ::T.untyped)
  LIBXSLT_LOADED_VERSION = ::T.let(nil, ::T.untyped)
  LIBXSLT_PATCHES = ::T.let(nil, ::T.untyped)
  OTHER_LIBRARY_VERSIONS = ::T.let(nil, ::T.untyped)
  PACKAGED_LIBRARIES = ::T.let(nil, ::T.untyped)
  PRECOMPILED_LIBRARIES = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
  VERSION_INFO = ::T.let(nil, ::T.untyped)
end

class Nokogiri::CSS::Node
  ALLOW_COMBINATOR_ON_SELF = ::T.let(nil, ::T.untyped)
end

class Nokogiri::CSS::Parser
  CACHE_SWITCH_NAME = ::T.let(nil, ::T.untyped)
  Racc_arg = ::T.let(nil, ::T.untyped)
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
  Racc_token_to_s_table = ::T.let(nil, ::T.untyped)
end

module Nokogiri::Decorators::Slop
  XPATH_PREFIX = ::T.let(nil, ::T.untyped)
end

module Nokogiri::Gumbo
  DEFAULT_MAX_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  DEFAULT_MAX_ERRORS = ::T.let(nil, ::T.untyped)
  DEFAULT_MAX_TREE_DEPTH = ::T.let(nil, ::T.untyped)
end

Nokogiri::HTML = Nokogiri::HTML4

module Nokogiri::HTML4
  NamedCharacters = ::T.let(nil, ::T.untyped)
end

class Nokogiri::HTML4::ElementDescription
  ACTION_ATTR = ::T.let(nil, ::T.untyped)
  ALIGN_ATTR = ::T.let(nil, ::T.untyped)
  ALT_ATTR = ::T.let(nil, ::T.untyped)
  APPLET_ATTRS = ::T.let(nil, ::T.untyped)
  AREA_ATTRS = ::T.let(nil, ::T.untyped)
  ATTRS = ::T.let(nil, ::T.untyped)
  A_ATTRS = ::T.let(nil, ::T.untyped)
  BASEFONT_ATTRS = ::T.let(nil, ::T.untyped)
  BGCOLOR_ATTR = ::T.let(nil, ::T.untyped)
  BLOCK = ::T.let(nil, ::T.untyped)
  BLOCKLI_ELT = ::T.let(nil, ::T.untyped)
  BODY_ATTRS = ::T.let(nil, ::T.untyped)
  BODY_CONTENTS = ::T.let(nil, ::T.untyped)
  BODY_DEPR = ::T.let(nil, ::T.untyped)
  BUTTON_ATTRS = ::T.let(nil, ::T.untyped)
  CELLHALIGN = ::T.let(nil, ::T.untyped)
  CELLVALIGN = ::T.let(nil, ::T.untyped)
  CLEAR_ATTRS = ::T.let(nil, ::T.untyped)
  COL_ATTRS = ::T.let(nil, ::T.untyped)
  COL_ELT = ::T.let(nil, ::T.untyped)
  COMPACT_ATTR = ::T.let(nil, ::T.untyped)
  COMPACT_ATTRS = ::T.let(nil, ::T.untyped)
  CONTENT_ATTR = ::T.let(nil, ::T.untyped)
  COREATTRS = ::T.let(nil, ::T.untyped)
  CORE_ATTRS = ::T.let(nil, ::T.untyped)
  CORE_I18N_ATTRS = ::T.let(nil, ::T.untyped)
  DIR_ATTR = ::T.let(nil, ::T.untyped)
  DL_CONTENTS = ::T.let(nil, ::T.untyped)
  DefaultDescriptions = ::T.let(nil, ::T.untyped)
  EDIT_ATTRS = ::T.let(nil, ::T.untyped)
  EMBED_ATTRS = ::T.let(nil, ::T.untyped)
  EMPTY = ::T.let(nil, ::T.untyped)
  EVENTS = ::T.let(nil, ::T.untyped)
  FIELDSET_CONTENTS = ::T.let(nil, ::T.untyped)
  FLOW = ::T.let(nil, ::T.untyped)
  FLOW_PARAM = ::T.let(nil, ::T.untyped)
  FONTSTYLE = ::T.let(nil, ::T.untyped)
  FONT_ATTRS = ::T.let(nil, ::T.untyped)
  FORMCTRL = ::T.let(nil, ::T.untyped)
  FORM_ATTRS = ::T.let(nil, ::T.untyped)
  FORM_CONTENTS = ::T.let(nil, ::T.untyped)
  FRAMESET_ATTRS = ::T.let(nil, ::T.untyped)
  FRAMESET_CONTENTS = ::T.let(nil, ::T.untyped)
  FRAME_ATTRS = ::T.let(nil, ::T.untyped)
  HEADING = ::T.let(nil, ::T.untyped)
  HEAD_ATTRS = ::T.let(nil, ::T.untyped)
  HEAD_CONTENTS = ::T.let(nil, ::T.untyped)
  HREF_ATTRS = ::T.let(nil, ::T.untyped)
  HR_DEPR = ::T.let(nil, ::T.untyped)
  HTML_ATTRS = ::T.let(nil, ::T.untyped)
  HTML_CDATA = ::T.let(nil, ::T.untyped)
  HTML_CONTENT = ::T.let(nil, ::T.untyped)
  HTML_FLOW = ::T.let(nil, ::T.untyped)
  HTML_INLINE = ::T.let(nil, ::T.untyped)
  HTML_PCDATA = ::T.let(nil, ::T.untyped)
  I18N = ::T.let(nil, ::T.untyped)
  I18N_ATTRS = ::T.let(nil, ::T.untyped)
  IFRAME_ATTRS = ::T.let(nil, ::T.untyped)
  IMG_ATTRS = ::T.let(nil, ::T.untyped)
  INLINE = ::T.let(nil, ::T.untyped)
  INLINE_P = ::T.let(nil, ::T.untyped)
  INPUT_ATTRS = ::T.let(nil, ::T.untyped)
  LABEL_ATTR = ::T.let(nil, ::T.untyped)
  LABEL_ATTRS = ::T.let(nil, ::T.untyped)
  LANGUAGE_ATTR = ::T.let(nil, ::T.untyped)
  LEGEND_ATTRS = ::T.let(nil, ::T.untyped)
  LINK_ATTRS = ::T.let(nil, ::T.untyped)
  LIST = ::T.let(nil, ::T.untyped)
  LI_ELT = ::T.let(nil, ::T.untyped)
  MAP_CONTENTS = ::T.let(nil, ::T.untyped)
  META_ATTRS = ::T.let(nil, ::T.untyped)
  MODIFIER = ::T.let(nil, ::T.untyped)
  NAME_ATTR = ::T.let(nil, ::T.untyped)
  NOFRAMES_CONTENT = ::T.let(nil, ::T.untyped)
  OBJECT_ATTRS = ::T.let(nil, ::T.untyped)
  OBJECT_CONTENTS = ::T.let(nil, ::T.untyped)
  OBJECT_DEPR = ::T.let(nil, ::T.untyped)
  OL_ATTRS = ::T.let(nil, ::T.untyped)
  OPTGROUP_ATTRS = ::T.let(nil, ::T.untyped)
  OPTION_ATTRS = ::T.let(nil, ::T.untyped)
  OPTION_ELT = ::T.let(nil, ::T.untyped)
  PARAM_ATTRS = ::T.let(nil, ::T.untyped)
  PCDATA = ::T.let(nil, ::T.untyped)
  PHRASE = ::T.let(nil, ::T.untyped)
  PRE_CONTENT = ::T.let(nil, ::T.untyped)
  PROMPT_ATTRS = ::T.let(nil, ::T.untyped)
  QUOTE_ATTRS = ::T.let(nil, ::T.untyped)
  ROWS_COLS_ATTR = ::T.let(nil, ::T.untyped)
  SCRIPT_ATTRS = ::T.let(nil, ::T.untyped)
  SELECT_ATTRS = ::T.let(nil, ::T.untyped)
  SELECT_CONTENT = ::T.let(nil, ::T.untyped)
  SPECIAL = ::T.let(nil, ::T.untyped)
  SRC_ALT_ATTRS = ::T.let(nil, ::T.untyped)
  STYLE_ATTRS = ::T.let(nil, ::T.untyped)
  TABLE_ATTRS = ::T.let(nil, ::T.untyped)
  TABLE_CONTENTS = ::T.let(nil, ::T.untyped)
  TABLE_DEPR = ::T.let(nil, ::T.untyped)
  TALIGN_ATTRS = ::T.let(nil, ::T.untyped)
  TARGET_ATTR = ::T.let(nil, ::T.untyped)
  TEXTAREA_ATTRS = ::T.let(nil, ::T.untyped)
  TH_TD_ATTR = ::T.let(nil, ::T.untyped)
  TH_TD_DEPR = ::T.let(nil, ::T.untyped)
  TR_CONTENTS = ::T.let(nil, ::T.untyped)
  TR_ELT = ::T.let(nil, ::T.untyped)
  TYPE_ATTR = ::T.let(nil, ::T.untyped)
  UL_DEPR = ::T.let(nil, ::T.untyped)
  VERSION_ATTR = ::T.let(nil, ::T.untyped)
  WIDTH_ATTR = ::T.let(nil, ::T.untyped)
end

Nokogiri::HTML4::ElementDescription::Desc = Struct::HTMLElementDescription

module Nokogiri::HTML5
  HTML_NAMESPACE = ::T.let(nil, ::T.untyped)
  MATHML_NAMESPACE = ::T.let(nil, ::T.untyped)
  SVG_NAMESPACE = ::T.let(nil, ::T.untyped)
  XLINK_NAMESPACE = ::T.let(nil, ::T.untyped)
  XMLNS_NAMESPACE = ::T.let(nil, ::T.untyped)
  XML_NAMESPACE = ::T.let(nil, ::T.untyped)
end

module Nokogiri::XML
  XML_C14N_1_0 = ::T.let(nil, ::T.untyped)
  XML_C14N_1_1 = ::T.let(nil, ::T.untyped)
  XML_C14N_EXCLUSIVE_1_0 = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::Builder
  DEFAULT_DOCUMENT_OPTIONS = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::Document
  IMPLIED_XPATH_CONTEXTS = ::T.let(nil, ::T.untyped)
  NCNAME_CHAR = ::T.let(nil, ::T.untyped)
  NCNAME_RE = ::T.let(nil, ::T.untyped)
  NCNAME_START_CHAR = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::Element
end

class Nokogiri::XML::Element
end

class Nokogiri::XML::ElementContent
  ELEMENT = ::T.let(nil, ::T.untyped)
  MULT = ::T.let(nil, ::T.untyped)
  ONCE = ::T.let(nil, ::T.untyped)
  OPT = ::T.let(nil, ::T.untyped)
  OR = ::T.let(nil, ::T.untyped)
  PCDATA = ::T.let(nil, ::T.untyped)
  PLUS = ::T.let(nil, ::T.untyped)
  SEQ = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::EntityDecl
  EXTERNAL_GENERAL_PARSED = ::T.let(nil, ::T.untyped)
  EXTERNAL_GENERAL_UNPARSED = ::T.let(nil, ::T.untyped)
  EXTERNAL_PARAMETER = ::T.let(nil, ::T.untyped)
  INTERNAL_GENERAL = ::T.let(nil, ::T.untyped)
  INTERNAL_PARAMETER = ::T.let(nil, ::T.untyped)
  INTERNAL_PREDEFINED = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::Node
  include ::Nokogiri::HTML5::Node
  ATTRIBUTE_DECL = ::T.let(nil, ::T.untyped)
  ATTRIBUTE_NODE = ::T.let(nil, ::T.untyped)
  CDATA_SECTION_NODE = ::T.let(nil, ::T.untyped)
  COMMENT_NODE = ::T.let(nil, ::T.untyped)
  DOCB_DOCUMENT_NODE = ::T.let(nil, ::T.untyped)
  DOCUMENT_FRAG_NODE = ::T.let(nil, ::T.untyped)
  DOCUMENT_NODE = ::T.let(nil, ::T.untyped)
  DOCUMENT_TYPE_NODE = ::T.let(nil, ::T.untyped)
  DTD_NODE = ::T.let(nil, ::T.untyped)
  ELEMENT_DECL = ::T.let(nil, ::T.untyped)
  ELEMENT_NODE = ::T.let(nil, ::T.untyped)
  ENTITY_DECL = ::T.let(nil, ::T.untyped)
  ENTITY_NODE = ::T.let(nil, ::T.untyped)
  ENTITY_REF_NODE = ::T.let(nil, ::T.untyped)
  HTML_DOCUMENT_NODE = ::T.let(nil, ::T.untyped)
  IMPLIED_XPATH_CONTEXTS = ::T.let(nil, ::T.untyped)
  NAMESPACE_DECL = ::T.let(nil, ::T.untyped)
  NOTATION_NODE = ::T.let(nil, ::T.untyped)
  PI_NODE = ::T.let(nil, ::T.untyped)
  TEXT_NODE = ::T.let(nil, ::T.untyped)
  XINCLUDE_END = ::T.let(nil, ::T.untyped)
  XINCLUDE_START = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::NodeSet
  IMPLIED_XPATH_CONTEXTS = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::ParseOptions
  COMPACT = ::T.let(nil, ::T.untyped)
  DEFAULT_HTML = ::T.let(nil, ::T.untyped)
  DEFAULT_SCHEMA = ::T.let(nil, ::T.untyped)
  DEFAULT_XML = ::T.let(nil, ::T.untyped)
  DEFAULT_XSLT = ::T.let(nil, ::T.untyped)
  DTDATTR = ::T.let(nil, ::T.untyped)
  DTDLOAD = ::T.let(nil, ::T.untyped)
  DTDVALID = ::T.let(nil, ::T.untyped)
  HUGE = ::T.let(nil, ::T.untyped)
  NOBASEFIX = ::T.let(nil, ::T.untyped)
  NOBLANKS = ::T.let(nil, ::T.untyped)
  NOCDATA = ::T.let(nil, ::T.untyped)
  NODICT = ::T.let(nil, ::T.untyped)
  NOENT = ::T.let(nil, ::T.untyped)
  NOERROR = ::T.let(nil, ::T.untyped)
  NONET = ::T.let(nil, ::T.untyped)
  NOWARNING = ::T.let(nil, ::T.untyped)
  NOXINCNODE = ::T.let(nil, ::T.untyped)
  NSCLEAN = ::T.let(nil, ::T.untyped)
  OLD10 = ::T.let(nil, ::T.untyped)
  PEDANTIC = ::T.let(nil, ::T.untyped)
  RECOVER = ::T.let(nil, ::T.untyped)
  SAX1 = ::T.let(nil, ::T.untyped)
  STRICT = ::T.let(nil, ::T.untyped)
  XINCLUDE = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::Reader
  TYPE_ATTRIBUTE = ::T.let(nil, ::T.untyped)
  TYPE_CDATA = ::T.let(nil, ::T.untyped)
  TYPE_COMMENT = ::T.let(nil, ::T.untyped)
  TYPE_DOCUMENT = ::T.let(nil, ::T.untyped)
  TYPE_DOCUMENT_FRAGMENT = ::T.let(nil, ::T.untyped)
  TYPE_DOCUMENT_TYPE = ::T.let(nil, ::T.untyped)
  TYPE_ELEMENT = ::T.let(nil, ::T.untyped)
  TYPE_END_ELEMENT = ::T.let(nil, ::T.untyped)
  TYPE_END_ENTITY = ::T.let(nil, ::T.untyped)
  TYPE_ENTITY = ::T.let(nil, ::T.untyped)
  TYPE_ENTITY_REFERENCE = ::T.let(nil, ::T.untyped)
  TYPE_NONE = ::T.let(nil, ::T.untyped)
  TYPE_NOTATION = ::T.let(nil, ::T.untyped)
  TYPE_PROCESSING_INSTRUCTION = ::T.let(nil, ::T.untyped)
  TYPE_SIGNIFICANT_WHITESPACE = ::T.let(nil, ::T.untyped)
  TYPE_TEXT = ::T.let(nil, ::T.untyped)
  TYPE_WHITESPACE = ::T.let(nil, ::T.untyped)
  TYPE_XML_DECLARATION = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::SAX::Parser
  ENCODINGS = ::T.let(nil, ::T.untyped)
end

module Nokogiri::XML::Searchable
  LOOKS_LIKE_XPATH = ::T.let(nil, ::T.untyped)
end

module Notiffany
  VERSION = ::T.let(nil, ::T.untyped)
end

class Notiffany::Notifier
  NOTIFICATIONS_DISABLED = ::T.let(nil, ::T.untyped)
  ONLY_NOTIFY = ::T.let(nil, ::T.untyped)
  SUPPORTED = ::T.let(nil, ::T.untyped)
  USING_NOTIFIER = ::T.let(nil, ::T.untyped)
end

class Notiffany::Notifier::Base
  ERROR_ADD_GEM_AND_RUN_BUNDLE = ::T.let(nil, ::T.untyped)
  HOSTS = ::T.let(nil, ::T.untyped)
end

class Notiffany::Notifier::Config
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Notiffany::Notifier::Detected
  NO_SUPPORTED_NOTIFIERS = ::T.let(nil, ::T.untyped)
end

class Notiffany::Notifier::Emacs
  DEFAULTS = ::T.let(nil, ::T.untyped)
  DEFAULT_ELISP_ERB = ::T.let(nil, ::T.untyped)
end

class Notiffany::Notifier::File
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Notiffany::Notifier::GNTP
  CLIENT_DEFAULTS = ::T.let(nil, ::T.untyped)
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Notiffany::Notifier::Growl
  DEFAULTS = ::T.let(nil, ::T.untyped)
  INSTALL_GROWLNOTIFY = ::T.let(nil, ::T.untyped)
end

class Notiffany::Notifier::Libnotify
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Notiffany::Notifier::Notifu
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Notiffany::Notifier::NotifySend
  DEFAULTS = ::T.let(nil, ::T.untyped)
  SUPPORTED = ::T.let(nil, ::T.untyped)
end

class Notiffany::Notifier::TerminalNotifier
  DEFAULTS = ::T.let(nil, ::T.untyped)
  ERROR_ONLY_OSX10 = ::T.let(nil, ::T.untyped)
end

class Notiffany::Notifier::TerminalTitle
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Notiffany::Notifier::Tmux
  DEFAULTS = ::T.let(nil, ::T.untyped)
  ERROR_ANCIENT_TMUX = ::T.let(nil, ::T.untyped)
  ERROR_NOT_INSIDE_TMUX = ::T.let(nil, ::T.untyped)
end

class Notiffany::Notifier::Tmux::Client
  CLIENT = ::T.let(nil, ::T.untyped)
end

class Object
  include ::JSON::Ext::Generator::GeneratorMethods::Object
  include ::ActiveSupport::Dependencies::Loadable
  include ::ActiveSupport::Tryable
  include ::PP::ObjectMixin
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  include ::ActiveSupport::ForkTracker::CoreExtPrivate
  include ::ActiveSupport::ForkTracker::CoreExt
  def html_safe?(); end

  def to_yaml(options=T.unsafe(nil)); end
  ARGF = ::T.let(nil, ::T.untyped)
  ARGV = ::T.let(nil, ::T.untyped)
  CROSS_COMPILING = ::T.let(nil, ::T.untyped)
  ENV = ::T.let(nil, ::T.untyped)
  RUBY_COPYRIGHT = ::T.let(nil, ::T.untyped)
  RUBY_DESCRIPTION = ::T.let(nil, ::T.untyped)
  RUBY_ENGINE = ::T.let(nil, ::T.untyped)
  RUBY_ENGINE_VERSION = ::T.let(nil, ::T.untyped)
  RUBY_PATCHLEVEL = ::T.let(nil, ::T.untyped)
  RUBY_PLATFORM = ::T.let(nil, ::T.untyped)
  RUBY_RELEASE_DATE = ::T.let(nil, ::T.untyped)
  RUBY_REVISION = ::T.let(nil, ::T.untyped)
  RUBY_VERSION = ::T.let(nil, ::T.untyped)
  STDERR = ::T.let(nil, ::T.untyped)
  STDIN = ::T.let(nil, ::T.untyped)
  STDOUT = ::T.let(nil, ::T.untyped)
  TOPLEVEL_BINDING = ::T.let(nil, ::T.untyped)
end

class Object
  def self.yaml_tag(url); end
end

class OpenSSL::ASN1::ASN1Data
  def indefinite_length(); end

  def indefinite_length=(indefinite_length); end
end

class OpenSSL::BN
  def +@(); end

  def -@(); end

  def /(arg); end

  def negative?(); end
end

module OpenSSL::KDF
end

class OpenSSL::KDF::KDFError
end

class OpenSSL::KDF::KDFError
end

module OpenSSL::KDF
  def self.hkdf(*arg); end

  def self.pbkdf2_hmac(*arg); end

  def self.scrypt(*arg); end
end

class OpenSSL::OCSP::Request
  def signed?(); end
end

OpenSSL::PKCS7::Signer = OpenSSL::PKCS7::SignerInfo

class OpenSSL::PKey::EC
  EXPLICIT_CURVE = ::T.let(nil, ::T.untyped)
end

class OpenSSL::PKey::EC::Point
  def to_octet_string(arg); end
end

module OpenSSL::SSL
  OP_ALLOW_NO_DHE_KEX = ::T.let(nil, ::T.untyped)
  OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION = ::T.let(nil, ::T.untyped)
  OP_CRYPTOPRO_TLSEXT_BUG = ::T.let(nil, ::T.untyped)
  OP_LEGACY_SERVER_CONNECT = ::T.let(nil, ::T.untyped)
  OP_NO_ENCRYPT_THEN_MAC = ::T.let(nil, ::T.untyped)
  OP_NO_RENEGOTIATION = ::T.let(nil, ::T.untyped)
  OP_NO_TLSv1_3 = ::T.let(nil, ::T.untyped)
  OP_SAFARI_ECDHE_ECDSA_BUG = ::T.let(nil, ::T.untyped)
  OP_TLSEXT_PADDING = ::T.let(nil, ::T.untyped)
  SSL2_VERSION = ::T.let(nil, ::T.untyped)
  SSL3_VERSION = ::T.let(nil, ::T.untyped)
  TLS1_1_VERSION = ::T.let(nil, ::T.untyped)
  TLS1_2_VERSION = ::T.let(nil, ::T.untyped)
  TLS1_3_VERSION = ::T.let(nil, ::T.untyped)
  TLS1_VERSION = ::T.let(nil, ::T.untyped)
end

class OpenSSL::SSL::SSLContext
  def alpn_protocols(); end

  def alpn_protocols=(alpn_protocols); end

  def alpn_select_cb(); end

  def alpn_select_cb=(alpn_select_cb); end

  def enable_fallback_scsv(); end

  def max_version=(version); end

  def min_version=(version); end
  DEFAULT_TMP_DH_CALLBACK = ::T.let(nil, ::T.untyped)
end

class OpenSSL::SSL::SSLSocket
  def alpn_protocol(); end

  def tmp_key(); end
end

module OpenSSL::X509
  V_FLAG_NO_CHECK_TIME = ::T.let(nil, ::T.untyped)
  V_FLAG_TRUSTED_FIRST = ::T.let(nil, ::T.untyped)
end

class OpenSSL::X509::Attribute
  def ==(other); end
end

class OpenSSL::X509::CRL
  def ==(other); end
end

class OpenSSL::X509::Extension
  def ==(other); end
end

class OpenSSL::X509::Name
  def to_utf8(); end
end

class OpenSSL::X509::Request
  def ==(other); end
end

class OpenSSL::X509::Revoked
  def ==(other); end

  def to_der(); end
end

module OpenSSL
  def self.fips_mode(); end
end

class OpenStruct
  VERSION = ::T.let(nil, ::T.untyped)
end

class OptionParser
  def additional_message(typ, opt); end
end

class OptionParser::List
  def get_candidates(id); end
end

class OptionParser::ParseError
  def additional(); end

  def additional=(additional); end
end

module Pango
  ANALYSIS_FLAG_CENTERED_BASELINE = ::T.let(nil, ::T.untyped)
  ANALYSIS_FLAG_IS_ELLIPSIS = ::T.let(nil, ::T.untyped)
  ATTR_INDEX_FROM_TEXT_BEGINNING = ::T.let(nil, ::T.untyped)
  ENGINE_TYPE_LANG = ::T.let(nil, ::T.untyped)
  ENGINE_TYPE_SHAPE = ::T.let(nil, ::T.untyped)
  GLYPH_EMPTY = ::T.let(nil, ::T.untyped)
  GLYPH_INVALID_INPUT = ::T.let(nil, ::T.untyped)
  GLYPH_UNKNOWN_FLAG = ::T.let(nil, ::T.untyped)
  LOG_DOMAIN = ::T.let(nil, ::T.untyped)
  RENDER_TYPE_NONE = ::T.let(nil, ::T.untyped)
  SCALE = ::T.let(nil, ::T.untyped)
  UNKNOWN_GLYPH_HEIGHT = ::T.let(nil, ::T.untyped)
  UNKNOWN_GLYPH_WIDTH = ::T.let(nil, ::T.untyped)
  VERSION_MIN_REQUIRED = ::T.let(nil, ::T.untyped)
end

class Pango::Alignment
  CENTER = ::T.let(nil, ::T.untyped)
  LEFT = ::T.let(nil, ::T.untyped)
  RIGHT = ::T.let(nil, ::T.untyped)
end

class Pango::AttrType
  ABSOLUTE_SIZE = ::T.let(nil, ::T.untyped)
  BACKGROUND = ::T.let(nil, ::T.untyped)
  BACKGROUND_ALPHA = ::T.let(nil, ::T.untyped)
  FALLBACK = ::T.let(nil, ::T.untyped)
  FAMILY = ::T.let(nil, ::T.untyped)
  FONT_DESC = ::T.let(nil, ::T.untyped)
  FONT_FEATURES = ::T.let(nil, ::T.untyped)
  FOREGROUND = ::T.let(nil, ::T.untyped)
  FOREGROUND_ALPHA = ::T.let(nil, ::T.untyped)
  GRAVITY = ::T.let(nil, ::T.untyped)
  GRAVITY_HINT = ::T.let(nil, ::T.untyped)
  INVALID = ::T.let(nil, ::T.untyped)
  LANGUAGE = ::T.let(nil, ::T.untyped)
  LETTER_SPACING = ::T.let(nil, ::T.untyped)
  RISE = ::T.let(nil, ::T.untyped)
  SCALE = ::T.let(nil, ::T.untyped)
  SHAPE = ::T.let(nil, ::T.untyped)
  SIZE = ::T.let(nil, ::T.untyped)
  STRETCH = ::T.let(nil, ::T.untyped)
  STRIKETHROUGH = ::T.let(nil, ::T.untyped)
  STRIKETHROUGH_COLOR = ::T.let(nil, ::T.untyped)
  STYLE = ::T.let(nil, ::T.untyped)
  UNDERLINE = ::T.let(nil, ::T.untyped)
  UNDERLINE_COLOR = ::T.let(nil, ::T.untyped)
  VARIANT = ::T.let(nil, ::T.untyped)
  WEIGHT = ::T.let(nil, ::T.untyped)
end

class Pango::BidiType
  AL = ::T.let(nil, ::T.untyped)
  AN = ::T.let(nil, ::T.untyped)
  B = ::T.let(nil, ::T.untyped)
  BN = ::T.let(nil, ::T.untyped)
  CS = ::T.let(nil, ::T.untyped)
  EN = ::T.let(nil, ::T.untyped)
  ES = ::T.let(nil, ::T.untyped)
  ET = ::T.let(nil, ::T.untyped)
  L = ::T.let(nil, ::T.untyped)
  LRE = ::T.let(nil, ::T.untyped)
  LRO = ::T.let(nil, ::T.untyped)
  NSM = ::T.let(nil, ::T.untyped)
  ON = ::T.let(nil, ::T.untyped)
  PDF = ::T.let(nil, ::T.untyped)
  R = ::T.let(nil, ::T.untyped)
  RLE = ::T.let(nil, ::T.untyped)
  RLO = ::T.let(nil, ::T.untyped)
  S = ::T.let(nil, ::T.untyped)
  WS = ::T.let(nil, ::T.untyped)
end

class Pango::CairoFcFontMap
  include ::Pango::CairoFontMap
  include ::GLib::Interface
end

module Pango::CairoFont
  include ::GLib::Interface
end

module Pango::CairoFont
  extend ::GLib::MetaInterface
  extend ::GLib::Interface
end

module Pango::CairoFontMap
  include ::GLib::Interface
end

module Pango::CairoFontMap
  extend ::GLib::MetaInterface
  extend ::GLib::Interface
end

class Pango::CoverageLevel
  APPROXIMATE = ::T.let(nil, ::T.untyped)
  EXACT = ::T.let(nil, ::T.untyped)
  FALLBACK = ::T.let(nil, ::T.untyped)
  NONE = ::T.let(nil, ::T.untyped)
end

class Pango::Direction
  LTR = ::T.let(nil, ::T.untyped)
  NEUTRAL = ::T.let(nil, ::T.untyped)
  RTL = ::T.let(nil, ::T.untyped)
  TTB_LTR = ::T.let(nil, ::T.untyped)
  TTB_RTL = ::T.let(nil, ::T.untyped)
  WEAK_LTR = ::T.let(nil, ::T.untyped)
  WEAK_RTL = ::T.let(nil, ::T.untyped)
end

class Pango::EllipsizeMode
  MIDDLE = ::T.let(nil, ::T.untyped)
  NONE = ::T.let(nil, ::T.untyped)
  START = ::T.let(nil, ::T.untyped)
end

class Pango::FontMask
  FAMILY = ::T.let(nil, ::T.untyped)
  GRAVITY = ::T.let(nil, ::T.untyped)
  SIZE = ::T.let(nil, ::T.untyped)
  STRETCH = ::T.let(nil, ::T.untyped)
  STYLE = ::T.let(nil, ::T.untyped)
  VARIANT = ::T.let(nil, ::T.untyped)
  WEIGHT = ::T.let(nil, ::T.untyped)
end

class Pango::Gravity
  AUTO = ::T.let(nil, ::T.untyped)
  EAST = ::T.let(nil, ::T.untyped)
  NORTH = ::T.let(nil, ::T.untyped)
  SOUTH = ::T.let(nil, ::T.untyped)
  WEST = ::T.let(nil, ::T.untyped)
end

class Pango::GravityHint
  LINE = ::T.let(nil, ::T.untyped)
  NATURAL = ::T.let(nil, ::T.untyped)
  STRONG = ::T.let(nil, ::T.untyped)
end

class Pango::Map
end

class Pango::Map
end

class Pango::MapEntry
end

class Pango::MapEntry
end

class Pango::RenderPart
  BACKGROUND = ::T.let(nil, ::T.untyped)
  FOREGROUND = ::T.let(nil, ::T.untyped)
  STRIKETHROUGH = ::T.let(nil, ::T.untyped)
  UNDERLINE = ::T.let(nil, ::T.untyped)
end

class Pango::RendererPrivate
end

class Pango::RendererPrivate
end

module Pango::Scale
  LARGE = ::T.let(nil, ::T.untyped)
  MEDIUM = ::T.let(nil, ::T.untyped)
  SMALL = ::T.let(nil, ::T.untyped)
  XX_LARGE = ::T.let(nil, ::T.untyped)
  XX_SMALL = ::T.let(nil, ::T.untyped)
  X_LARGE = ::T.let(nil, ::T.untyped)
  X_SMALL = ::T.let(nil, ::T.untyped)
end

module Pango::Scale
end

class Pango::Script
  AHOM = ::T.let(nil, ::T.untyped)
  ANATOLIAN_HIEROGLYPHS = ::T.let(nil, ::T.untyped)
  ARABIC = ::T.let(nil, ::T.untyped)
  ARMENIAN = ::T.let(nil, ::T.untyped)
  BALINESE = ::T.let(nil, ::T.untyped)
  BASSA_VAH = ::T.let(nil, ::T.untyped)
  BATAK = ::T.let(nil, ::T.untyped)
  BENGALI = ::T.let(nil, ::T.untyped)
  BOPOMOFO = ::T.let(nil, ::T.untyped)
  BRAHMI = ::T.let(nil, ::T.untyped)
  BRAILLE = ::T.let(nil, ::T.untyped)
  BUGINESE = ::T.let(nil, ::T.untyped)
  BUHID = ::T.let(nil, ::T.untyped)
  CANADIAN_ABORIGINAL = ::T.let(nil, ::T.untyped)
  CARIAN = ::T.let(nil, ::T.untyped)
  CAUCASIAN_ALBANIAN = ::T.let(nil, ::T.untyped)
  CHAKMA = ::T.let(nil, ::T.untyped)
  CHAM = ::T.let(nil, ::T.untyped)
  CHEROKEE = ::T.let(nil, ::T.untyped)
  COMMON = ::T.let(nil, ::T.untyped)
  COPTIC = ::T.let(nil, ::T.untyped)
  CUNEIFORM = ::T.let(nil, ::T.untyped)
  CYPRIOT = ::T.let(nil, ::T.untyped)
  CYRILLIC = ::T.let(nil, ::T.untyped)
  DESERET = ::T.let(nil, ::T.untyped)
  DEVANAGARI = ::T.let(nil, ::T.untyped)
  DUPLOYAN = ::T.let(nil, ::T.untyped)
  ELBASAN = ::T.let(nil, ::T.untyped)
  ETHIOPIC = ::T.let(nil, ::T.untyped)
  GEORGIAN = ::T.let(nil, ::T.untyped)
  GLAGOLITIC = ::T.let(nil, ::T.untyped)
  GOTHIC = ::T.let(nil, ::T.untyped)
  GRANTHA = ::T.let(nil, ::T.untyped)
  GREEK = ::T.let(nil, ::T.untyped)
  GUJARATI = ::T.let(nil, ::T.untyped)
  GURMUKHI = ::T.let(nil, ::T.untyped)
  HAN = ::T.let(nil, ::T.untyped)
  HANGUL = ::T.let(nil, ::T.untyped)
  HANUNOO = ::T.let(nil, ::T.untyped)
  HATRAN = ::T.let(nil, ::T.untyped)
  HEBREW = ::T.let(nil, ::T.untyped)
  HIRAGANA = ::T.let(nil, ::T.untyped)
  INHERITED = ::T.let(nil, ::T.untyped)
  INVALID_CODE = ::T.let(nil, ::T.untyped)
  KANNADA = ::T.let(nil, ::T.untyped)
  KATAKANA = ::T.let(nil, ::T.untyped)
  KAYAH_LI = ::T.let(nil, ::T.untyped)
  KHAROSHTHI = ::T.let(nil, ::T.untyped)
  KHMER = ::T.let(nil, ::T.untyped)
  KHOJKI = ::T.let(nil, ::T.untyped)
  KHUDAWADI = ::T.let(nil, ::T.untyped)
  LAO = ::T.let(nil, ::T.untyped)
  LATIN = ::T.let(nil, ::T.untyped)
  LEPCHA = ::T.let(nil, ::T.untyped)
  LIMBU = ::T.let(nil, ::T.untyped)
  LINEAR_A = ::T.let(nil, ::T.untyped)
  LINEAR_B = ::T.let(nil, ::T.untyped)
  LYCIAN = ::T.let(nil, ::T.untyped)
  LYDIAN = ::T.let(nil, ::T.untyped)
  MAHAJANI = ::T.let(nil, ::T.untyped)
  MALAYALAM = ::T.let(nil, ::T.untyped)
  MANDAIC = ::T.let(nil, ::T.untyped)
  MANICHAEAN = ::T.let(nil, ::T.untyped)
  MENDE_KIKAKUI = ::T.let(nil, ::T.untyped)
  MEROITIC_CURSIVE = ::T.let(nil, ::T.untyped)
  MEROITIC_HIEROGLYPHS = ::T.let(nil, ::T.untyped)
  MIAO = ::T.let(nil, ::T.untyped)
  MODI = ::T.let(nil, ::T.untyped)
  MONGOLIAN = ::T.let(nil, ::T.untyped)
  MRO = ::T.let(nil, ::T.untyped)
  MULTANI = ::T.let(nil, ::T.untyped)
  MYANMAR = ::T.let(nil, ::T.untyped)
  NABATAEAN = ::T.let(nil, ::T.untyped)
  NEW_TAI_LUE = ::T.let(nil, ::T.untyped)
  NKO = ::T.let(nil, ::T.untyped)
  OGHAM = ::T.let(nil, ::T.untyped)
  OLD_HUNGARIAN = ::T.let(nil, ::T.untyped)
  OLD_ITALIC = ::T.let(nil, ::T.untyped)
  OLD_NORTH_ARABIAN = ::T.let(nil, ::T.untyped)
  OLD_PERMIC = ::T.let(nil, ::T.untyped)
  OLD_PERSIAN = ::T.let(nil, ::T.untyped)
  OL_CHIKI = ::T.let(nil, ::T.untyped)
  ORIYA = ::T.let(nil, ::T.untyped)
  OSMANYA = ::T.let(nil, ::T.untyped)
  PAHAWH_HMONG = ::T.let(nil, ::T.untyped)
  PALMYRENE = ::T.let(nil, ::T.untyped)
  PAU_CIN_HAU = ::T.let(nil, ::T.untyped)
  PHAGS_PA = ::T.let(nil, ::T.untyped)
  PHOENICIAN = ::T.let(nil, ::T.untyped)
  PSALTER_PAHLAVI = ::T.let(nil, ::T.untyped)
  REJANG = ::T.let(nil, ::T.untyped)
  RUNIC = ::T.let(nil, ::T.untyped)
  SAURASHTRA = ::T.let(nil, ::T.untyped)
  SHARADA = ::T.let(nil, ::T.untyped)
  SHAVIAN = ::T.let(nil, ::T.untyped)
  SIDDHAM = ::T.let(nil, ::T.untyped)
  SIGNWRITING = ::T.let(nil, ::T.untyped)
  SINHALA = ::T.let(nil, ::T.untyped)
  SORA_SOMPENG = ::T.let(nil, ::T.untyped)
  SUNDANESE = ::T.let(nil, ::T.untyped)
  SYLOTI_NAGRI = ::T.let(nil, ::T.untyped)
  SYRIAC = ::T.let(nil, ::T.untyped)
  TAGALOG = ::T.let(nil, ::T.untyped)
  TAGBANWA = ::T.let(nil, ::T.untyped)
  TAI_LE = ::T.let(nil, ::T.untyped)
  TAKRI = ::T.let(nil, ::T.untyped)
  TAMIL = ::T.let(nil, ::T.untyped)
  TELUGU = ::T.let(nil, ::T.untyped)
  THAANA = ::T.let(nil, ::T.untyped)
  THAI = ::T.let(nil, ::T.untyped)
  TIBETAN = ::T.let(nil, ::T.untyped)
  TIFINAGH = ::T.let(nil, ::T.untyped)
  TIRHUTA = ::T.let(nil, ::T.untyped)
  UGARITIC = ::T.let(nil, ::T.untyped)
  UNKNOWN = ::T.let(nil, ::T.untyped)
  VAI = ::T.let(nil, ::T.untyped)
  WARANG_CITI = ::T.let(nil, ::T.untyped)
  YI = ::T.let(nil, ::T.untyped)
end

class Pango::Stretch
  CONDENSED = ::T.let(nil, ::T.untyped)
  EXPANDED = ::T.let(nil, ::T.untyped)
  EXTRA_CONDENSED = ::T.let(nil, ::T.untyped)
  EXTRA_EXPANDED = ::T.let(nil, ::T.untyped)
  NORMAL = ::T.let(nil, ::T.untyped)
  SEMI_CONDENSED = ::T.let(nil, ::T.untyped)
  SEMI_EXPANDED = ::T.let(nil, ::T.untyped)
  ULTRA_CONDENSED = ::T.let(nil, ::T.untyped)
  ULTRA_EXPANDED = ::T.let(nil, ::T.untyped)
end

class Pango::Style
  ITALIC = ::T.let(nil, ::T.untyped)
  NORMAL = ::T.let(nil, ::T.untyped)
  OBLIQUE = ::T.let(nil, ::T.untyped)
end

class Pango::TabAlign
  LEFT = ::T.let(nil, ::T.untyped)
end

class Pango::Underline
  DOUBLE = ::T.let(nil, ::T.untyped)
  ERROR = ::T.let(nil, ::T.untyped)
  LOW = ::T.let(nil, ::T.untyped)
  NONE = ::T.let(nil, ::T.untyped)
  SINGLE = ::T.let(nil, ::T.untyped)
end

class Pango::Variant
  NORMAL = ::T.let(nil, ::T.untyped)
  SMALL_CAPS = ::T.let(nil, ::T.untyped)
end

module Pango::Version
  MAJOR = ::T.let(nil, ::T.untyped)
  MICRO = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
end

class Pango::Weight
  BOLD = ::T.let(nil, ::T.untyped)
  BOOK = ::T.let(nil, ::T.untyped)
  HEAVY = ::T.let(nil, ::T.untyped)
  LIGHT = ::T.let(nil, ::T.untyped)
  MEDIUM = ::T.let(nil, ::T.untyped)
  NORMAL = ::T.let(nil, ::T.untyped)
  SEMIBOLD = ::T.let(nil, ::T.untyped)
  SEMILIGHT = ::T.let(nil, ::T.untyped)
  THIN = ::T.let(nil, ::T.untyped)
  ULTRABOLD = ::T.let(nil, ::T.untyped)
  ULTRAHEAVY = ::T.let(nil, ::T.untyped)
  ULTRALIGHT = ::T.let(nil, ::T.untyped)
end

class Pango::WrapMode
  CHAR = ::T.let(nil, ::T.untyped)
  WORD = ::T.let(nil, ::T.untyped)
  WORD_CHAR = ::T.let(nil, ::T.untyped)
end

ParseError = Racc::ParseError

class Pathname
  def fnmatch?(*arg); end

  def glob(*arg); end

  def make_symlink(arg); end
end

class Proc
  def <<(arg); end

  def >>(arg); end

  def clone(); end
end

module Process
  CLOCK_TAI = ::T.let(nil, ::T.untyped)
end

module Process
  def self.fork(); end
end

class ProgressBar::Components::Bar
  DEFAULT_PROGRESS_MARK = ::T.let(nil, ::T.untyped)
  DEFAULT_REMAINDER_MARK = ::T.let(nil, ::T.untyped)
  DEFAULT_UPA_STEPS = ::T.let(nil, ::T.untyped)
end

class ProgressBar::Components::Time
  ELAPSED_LABEL = ::T.let(nil, ::T.untyped)
  ESTIMATED_LABEL = ::T.let(nil, ::T.untyped)
  NO_TIME_ELAPSED_TEXT = ::T.let(nil, ::T.untyped)
  OOB_FRIENDLY_TIME_TEXT = ::T.let(nil, ::T.untyped)
  OOB_LIMIT_IN_HOURS = ::T.let(nil, ::T.untyped)
  OOB_TEXT_TO_FORMAT = ::T.let(nil, ::T.untyped)
  OOB_TIME_FORMATS = ::T.let(nil, ::T.untyped)
  OOB_UNKNOWN_TIME_TEXT = ::T.let(nil, ::T.untyped)
  TIME_FORMAT = ::T.let(nil, ::T.untyped)
end

class ProgressBar::Components::Title
  DEFAULT_TITLE = ::T.let(nil, ::T.untyped)
end

class ProgressBar::Format::Molecule
  BAR_MOLECULES = ::T.let(nil, ::T.untyped)
  MOLECULES = ::T.let(nil, ::T.untyped)
end

class ProgressBar::Format::String
  ANSI_SGR_PATTERN = ::T.let(nil, ::T.untyped)
  MOLECULE_PATTERN = ::T.let(nil, ::T.untyped)
end

class ProgressBar::Output
  DEFAULT_OUTPUT_STREAM = ::T.let(nil, ::T.untyped)
end

class ProgressBar::Outputs::NonTty
  DEFAULT_FORMAT_STRING = ::T.let(nil, ::T.untyped)
end

class ProgressBar::Outputs::Tty
  DEFAULT_FORMAT_STRING = ::T.let(nil, ::T.untyped)
end

class ProgressBar::Progress
  DEFAULT_BEGINNING_POSITION = ::T.let(nil, ::T.untyped)
  DEFAULT_SMOOTHING = ::T.let(nil, ::T.untyped)
  DEFAULT_TOTAL = ::T.let(nil, ::T.untyped)
end

class ProgressBar::Time
  TIME_MOCKING_LIBRARY_METHODS = ::T.let(nil, ::T.untyped)
end

class Pry
  BINDING_METHOD_IMPL = ::T.let(nil, ::T.untyped)
  Commands = ::T.let(nil, ::T.untyped)
  EMPTY_COMPLETIONS = ::T.let(nil, ::T.untyped)
  HAS_SAFE_LEVEL = ::T.let(nil, ::T.untyped)
  LOCAL_RC_FILE = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Pry::BasicObject
  include ::ActiveSupport::ForkTracker::CoreExtPrivate
  include ::ActiveSupport::ForkTracker::CoreExt
  ENV = ::T.let(nil, ::T.untyped)
end

Pry::BasicObject::Dir = Dir

Pry::BasicObject::File = File

Pry::BasicObject::Kernel = Kernel

Pry::BasicObject::LoadError = LoadError

Pry::BasicObject::Pry = Pry

class Pry::Code
  extend ::MethodSource::CodeHelpers
end

class Pry::CodeFile
  DEFAULT_EXT = ::T.let(nil, ::T.untyped)
  EXTENSIONS = ::T.let(nil, ::T.untyped)
  FILES = ::T.let(nil, ::T.untyped)
  INITIAL_PWD = ::T.let(nil, ::T.untyped)
end

class Pry::Command
  VOID_VALUE = ::T.let(nil, ::T.untyped)
end

class Pry::Command::Ls
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

class Pry::Command::Ls::Constants
  DEPRECATED_CONSTANTS = ::T.let(nil, ::T.untyped)
end

class Pry::Command::Ls::Globals
  BUILTIN_GLOBALS = ::T.let(nil, ::T.untyped)
  PSEUDO_GLOBALS = ::T.let(nil, ::T.untyped)
end

class Pry::Command::Wtf
  RUBY_FRAME_PATTERN = ::T.let(nil, ::T.untyped)
end

module Pry::Helpers::DocumentationHelpers
  YARD_TAGS = ::T.let(nil, ::T.untyped)
end

module Pry::Helpers::Text
  COLORS = ::T.let(nil, ::T.untyped)
end

class Pry::Indent
  IGNORE_TOKENS = ::T.let(nil, ::T.untyped)
  MIDWAY_TOKENS = ::T.let(nil, ::T.untyped)
  OPEN_TOKENS = ::T.let(nil, ::T.untyped)
  OPTIONAL_DO_TOKENS = ::T.let(nil, ::T.untyped)
  SINGLELINE_TOKENS = ::T.let(nil, ::T.untyped)
  SPACES = ::T.let(nil, ::T.untyped)
  STATEMENT_END_TOKENS = ::T.let(nil, ::T.untyped)
end

class Pry::InputCompleter
  ARRAY_REGEXP = ::T.let(nil, ::T.untyped)
  CONSTANT_OR_METHOD_REGEXP = ::T.let(nil, ::T.untyped)
  CONSTANT_REGEXP = ::T.let(nil, ::T.untyped)
  GLOBALVARIABLE_REGEXP = ::T.let(nil, ::T.untyped)
  HEX_REGEXP = ::T.let(nil, ::T.untyped)
  NUMERIC_REGEXP = ::T.let(nil, ::T.untyped)
  PROC_OR_HASH_REGEXP = ::T.let(nil, ::T.untyped)
  REGEX_REGEXP = ::T.let(nil, ::T.untyped)
  RESERVED_WORDS = ::T.let(nil, ::T.untyped)
  SYMBOL_METHOD_CALL_REGEXP = ::T.let(nil, ::T.untyped)
  SYMBOL_REGEXP = ::T.let(nil, ::T.untyped)
  TOPLEVEL_LOOKUP_REGEXP = ::T.let(nil, ::T.untyped)
  VARIABLE_REGEXP = ::T.let(nil, ::T.untyped)
  WORD_ESCAPE_STR = ::T.let(nil, ::T.untyped)
end

class Pry::Inspector
  MAP = ::T.let(nil, ::T.untyped)
end

class Pry::ObjectPath
  SPECIAL_TERMS = ::T.let(nil, ::T.untyped)
end

class Pry::Output
  DEFAULT_SIZE = ::T.let(nil, ::T.untyped)
end

class Pry::Slop
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Pry::Slop::Option
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

module Psych
  VERSION = ::T.let(nil, ::T.untyped)
end

module Psych
  def self.add_builtin_type(type_tag, &block); end

  def self.add_domain_type(domain, type_tag, &block); end

  def self.add_tag(tag, klass); end

  def self.domain_types(); end

  def self.domain_types=(domain_types); end

  def self.dump_tags(); end

  def self.dump_tags=(dump_tags); end

  def self.libyaml_version(); end

  def self.load_tags(); end

  def self.load_tags=(load_tags); end

  def self.remove_type(type_tag); end
end

module PublicSuffix
  BANG = ::T.let(nil, ::T.untyped)
  DOT = ::T.let(nil, ::T.untyped)
  STAR = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class PublicSuffix::List
  DEFAULT_LIST_PATH = ::T.let(nil, ::T.untyped)
end

class RDoc::Alias
  def initialize(text, old_name, new_name, comment, singleton=T.unsafe(nil)); end
end

class RDoc::Attr
  def initialize(text, name, rw, comment, singleton=T.unsafe(nil)); end
end

class RDoc::ClassModule
  def initialize(name, superclass=T.unsafe(nil)); end
end

class RDoc::CodeObject
  def initialize_visibility(); end
end

class RDoc::Comment
  def initialize(text=T.unsafe(nil), location=T.unsafe(nil), language=T.unsafe(nil)); end

  def line(); end

  def line=(line); end
end

class RDoc::Constant
  def initialize(name, value, comment); end
  MARSHAL_VERSION = ::T.let(nil, ::T.untyped)
end

class RDoc::Context
  def add_module_by_normal_module(mod); end

  def initialize_methods_etc(); end
end

class RDoc::Context::Section
  def initialize(parent, title, comment); end
end

class RDoc::CrossReference
  def initialize(context); end
end

class RDoc::ERBIO
  def initialize(str, safe_level=T.unsafe(nil), trim_mode=T.unsafe(nil), eoutvar=T.unsafe(nil)); end
end

module RDoc::Encoding
  HEADER_REGEXP = ::T.let(nil, ::T.untyped)
end

module RDoc::Encoding
  def self.detect_encoding(string); end

  def self.remove_magic_comment(string); end
end

class RDoc::Generator::Darkfish
  def initialize(store, options); end
end

class RDoc::Generator::JsonIndex
  def initialize(parent_generator, options); end
end

class RDoc::Generator::POT
  def initialize(store, options); end
end

class RDoc::Generator::POT::MessageExtractor
  def initialize(store); end
end

class RDoc::Generator::POT::POEntry
  def initialize(msgid, options=T.unsafe(nil)); end
end

class RDoc::Generator::RI
  def initialize(store, options); end
end

class RDoc::I18n::Locale
  def initialize(name); end
end

class RDoc::I18n::Text
  def initialize(raw); end
end

class RDoc::Markdown
  def initialize(extensions=T.unsafe(nil), debug=T.unsafe(nil)); end
end

class RDoc::Markdown::Literals
  def initialize(str, debug=T.unsafe(nil)); end
end

class RDoc::Markdown::Literals::MemoEntry
  def initialize(ans, pos); end
end

class RDoc::Markdown::Literals::RuleInfo
  def initialize(name, rendered); end
end

class RDoc::Markdown::MemoEntry
  def initialize(ans, pos); end
end

class RDoc::Markdown::RuleInfo
  def initialize(name, rendered); end
end

class RDoc::Markup
  def add_regexp_handling(pattern, name); end

  def initialize(attribute_manager=T.unsafe(nil)); end
end

class RDoc::Markup::AttrSpan
  def initialize(length); end
end

class RDoc::Markup::AttributeManager
  def add_regexp_handling(pattern, name); end

  def convert_regexp_handlings(str, attrs); end

  def regexp_handlings(); end
end

class RDoc::Markup::Attributes
  def regexp_handling(); end
end

class RDoc::Markup::Document
  def initialize(*parts); end
end

class RDoc::Markup::Formatter
  def add_regexp_handling_RDOCLINK(); end

  def add_regexp_handling_TIDYLINK(); end

  def convert_regexp_handling(target); end

  def initialize(options, markup=T.unsafe(nil)); end
end

class RDoc::Markup::Include
  def initialize(file, include_path); end
end

class RDoc::Markup::IndentedParagraph
  def initialize(indent, *parts); end
end

class RDoc::Markup::List
  def initialize(type=T.unsafe(nil), *items); end
end

class RDoc::Markup::ListItem
  def initialize(label=T.unsafe(nil), *parts); end
end

class RDoc::Markup::Parser::MyStringScanner
  def [](i); end

  def eos?(); end

  def initialize(input); end

  def matched(); end

  def newline!(); end

  def pos(); end

  def scan(re); end

  def unscan(s); end
end

class RDoc::Markup::Parser::MyStringScanner
end

class RDoc::Markup::PreProcess
  def initialize(input_file_name, include_path); end
end

class RDoc::Markup::Raw
  def initialize(*parts); end
end

class RDoc::Markup::RegexpHandling
  def ==(o); end

  def initialize(type, text); end

  def text(); end

  def text=(text); end

  def type(); end
end

class RDoc::Markup::RegexpHandling
end

class RDoc::Markup::ToHtml
  def handle_regexp_HARD_BREAK(target); end

  def handle_regexp_HYPERLINK(target); end

  def handle_regexp_RDOCLINK(target); end

  def handle_regexp_TIDYLINK(target); end
end

class RDoc::Markup::ToHtmlCrossref
  def handle_regexp_CROSSREF(target); end

  def initialize(options, from_path, context, markup=T.unsafe(nil)); end
end

class RDoc::Markup::ToHtmlSnippet
  def handle_regexp_CROSSREF(target); end

  def initialize(options, characters=T.unsafe(nil), paragraphs=T.unsafe(nil), markup=T.unsafe(nil)); end
end

class RDoc::Markup::ToJoinedParagraph
  def initialize(); end
end

class RDoc::Markup::ToLabel
  def handle_regexp_CROSSREF(target); end

  def handle_regexp_HARD_BREAK(*node); end

  def handle_regexp_TIDYLINK(target); end

  def initialize(markup=T.unsafe(nil)); end
end

class RDoc::Markup::ToMarkdown
  def handle_regexp_RDOCLINK(target); end

  def handle_regexp_TIDYLINK(target); end
end

class RDoc::Markup::ToRdoc
  def handle_regexp_HARD_BREAK(target); end

  def handle_regexp_SUPPRESSED_CROSSREF(target); end

  def initialize(markup=T.unsafe(nil)); end
end

class RDoc::Markup::ToTableOfContents
  def initialize(); end
end

class RDoc::Markup::ToTtOnly
  def initialize(markup=T.unsafe(nil)); end
end

class RDoc::MethodAttr
  def initialize(text, name); end
end

class RDoc::Mixin
  def initialize(name, comment); end
end

class RDoc::Parser
  def initialize(top_level, file_name, content, options, stats); end
end

class RDoc::Parser::C
  def do_classes_and_modules(); end
end

class RDoc::Parser::RipperStateLex
  def get_squashed_tk(); end

  def initialize(code); end
  EXPR_ARG = ::T.let(nil, ::T.untyped)
  EXPR_ARG_ANY = ::T.let(nil, ::T.untyped)
  EXPR_BEG = ::T.let(nil, ::T.untyped)
  EXPR_BEG_ANY = ::T.let(nil, ::T.untyped)
  EXPR_CLASS = ::T.let(nil, ::T.untyped)
  EXPR_CMDARG = ::T.let(nil, ::T.untyped)
  EXPR_DOT = ::T.let(nil, ::T.untyped)
  EXPR_END = ::T.let(nil, ::T.untyped)
  EXPR_ENDARG = ::T.let(nil, ::T.untyped)
  EXPR_ENDFN = ::T.let(nil, ::T.untyped)
  EXPR_END_ANY = ::T.let(nil, ::T.untyped)
  EXPR_FITEM = ::T.let(nil, ::T.untyped)
  EXPR_FNAME = ::T.let(nil, ::T.untyped)
  EXPR_LABEL = ::T.let(nil, ::T.untyped)
  EXPR_LABELED = ::T.let(nil, ::T.untyped)
  EXPR_MID = ::T.let(nil, ::T.untyped)
  EXPR_NONE = ::T.let(nil, ::T.untyped)
  EXPR_VALUE = ::T.let(nil, ::T.untyped)
  RIPPER_HAS_LEX_STATE = ::T.let(nil, ::T.untyped)
end

class RDoc::Parser::RipperStateLex::InnerStateLex
  def initialize(code); end

  def on_default(event, tok, data); end
end

class RDoc::Parser::RipperStateLex::InnerStateLex
end

class RDoc::Parser::RipperStateLex::Token
  def char_no(); end

  def char_no=(_); end

  def kind(); end

  def kind=(_); end

  def line_no(); end

  def line_no=(_); end

  def state(); end

  def state=(_); end

  def text(); end

  def text=(_); end
end

class RDoc::Parser::RipperStateLex::Token
  def self.[](*arg); end

  def self.members(); end
end

class RDoc::Parser::RipperStateLex
  def self.end?(token); end

  def self.parse(code); end
end

class RDoc::Parser::Ruby
  def get_included_module_with_optional_parens(); end

  def retrieve_comment_body(tk); end
end

module RDoc::Parser::RubyTools
  def skip_tkspace_without_nl(); end
end

class RDoc::RD::BlockParser
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
end

class RDoc::RD::Inline
  def initialize(rdoc, reference); end
end

class RDoc::RD::InlineParser
  def initialize(block_parser); end
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
end

class RDoc::RI::Driver
  def initialize(initial_options=T.unsafe(nil)); end
end

class RDoc::RI::Driver::NotFoundError
  def initialize(klass, suggestions=T.unsafe(nil)); end
end

RDoc::RI::Store = RDoc::Store

class RDoc::Require
  def initialize(name, comment); end
end

class RDoc::Servlet
  def initialize(server, stores, cache, mount_path=T.unsafe(nil), extra_doc_dirs=T.unsafe(nil)); end
end

class RDoc::Stats
  def initialize(store, num_files, verbosity=T.unsafe(nil)); end
end

class RDoc::Stats::Quiet
  def initialize(num_files); end
end

class RDoc::Store
  def initialize(path=T.unsafe(nil), type=T.unsafe(nil)); end

  def unmatched_constant_alias(); end

  def update_parser_of_file(absolute_name, parser); end
end

class RDoc::Store::MissingFileError
  def initialize(store, file, name); end
end

class RDoc::Task
  def before_running_rdoc(&block); end

  def check_names(names); end

  def clobber_task_description(); end

  def defaults(); end

  def define(); end

  def external(); end

  def external=(external); end

  def generator(); end

  def generator=(generator); end

  def initialize(name=T.unsafe(nil)); end

  def inline_source(); end

  def inline_source=(value); end

  def main(); end

  def main=(main); end

  def markup(); end

  def markup=(markup); end

  def name(); end

  def name=(name); end

  def option_list(); end

  def options(); end

  def options=(options); end

  def rdoc_dir(); end

  def rdoc_dir=(rdoc_dir); end

  def rdoc_files(); end

  def rdoc_files=(rdoc_files); end

  def rdoc_task_description(); end

  def rerdoc_task_description(); end

  def template(); end

  def template=(template); end

  def title(); end

  def title=(title); end
end

class RDoc::Task
end

module RDoc::Text
  def language(); end

  def language=(language); end
end

class RDoc::TopLevel
  def initialize(absolute_name, relative_name=T.unsafe(nil)); end
end

RSVG = Rsvg

module RSpec
  MODULES_TO_AUTOLOAD = ::T.let(nil, ::T.untyped)
end

class RSpec::CallerFilter
  ADDITIONAL_TOP_LEVEL_FILES = ::T.let(nil, ::T.untyped)
  IGNORE_REGEX = ::T.let(nil, ::T.untyped)
  LIB_REGEX = ::T.let(nil, ::T.untyped)
  RSPEC_LIBS = ::T.let(nil, ::T.untyped)
end

class RSpec::Core::Configuration
  DEFAULT_FORMATTER = ::T.let(nil, ::T.untyped)
  FAILED_STATUS = ::T.let(nil, ::T.untyped)
  MOCKING_ADAPTERS = ::T.let(nil, ::T.untyped)
  PASSED_STATUS = ::T.let(nil, ::T.untyped)
  PENDING_STATUS = ::T.let(nil, ::T.untyped)
  RAISE_ERROR_WARNING_NOTIFIER = ::T.let(nil, ::T.untyped)
  UNKNOWN_STATUS = ::T.let(nil, ::T.untyped)
  VALID_STATUSES = ::T.let(nil, ::T.untyped)
end

class RSpec::Core::ConfigurationOptions
  OPTIONS_ORDER = ::T.let(nil, ::T.untyped)
  UNFORCED_OPTIONS = ::T.let(nil, ::T.untyped)
  UNPROCESSABLE_OPTIONS = ::T.let(nil, ::T.untyped)
end

RSpec::Core::Example::AllExceptionsExcludingDangerousOnesOnRubiesThatAllowIt = RSpec::Support::AllExceptionsExceptOnesWeMustNotRescue

class RSpec::Core::ExampleGroup
  INSTANCE_VARIABLE_TO_IGNORE = ::T.let(nil, ::T.untyped)
end

RSpec::Core::ExclusionRules = RSpec::Core::FilterRules

class RSpec::Core::FilterRules
  PROC_HEX_NUMBER = ::T.let(nil, ::T.untyped)
  PROJECT_DIR = ::T.let(nil, ::T.untyped)
end

module RSpec::Core::Formatters::ConsoleCodes
  VT100_CODES = ::T.let(nil, ::T.untyped)
  VT100_CODE_VALUES = ::T.let(nil, ::T.untyped)
end

class RSpec::Core::Formatters::DeprecationFormatter
  DEPRECATION_STREAM_NOTICE = ::T.let(nil, ::T.untyped)
  RAISE_ERROR_CONFIG_NOTICE = ::T.let(nil, ::T.untyped)
  TOO_MANY_WARNINGS_NOTICE = ::T.let(nil, ::T.untyped)
end

class RSpec::Core::Formatters::DeprecationFormatter::DelayedPrinter
  TOO_MANY_USES_LIMIT = ::T.let(nil, ::T.untyped)
end

class RSpec::Core::Formatters::ExceptionPresenter
  PENDING_DETAIL_FORMATTER = ::T.let(nil, ::T.untyped)
end

module RSpec::Core::Formatters::Helpers
  DEFAULT_PRECISION = ::T.let(nil, ::T.untyped)
  SUB_SECOND_PRECISION = ::T.let(nil, ::T.untyped)
end

class RSpec::Core::Formatters::HtmlPrinter
  GLOBAL_SCRIPTS = ::T.let(nil, ::T.untyped)
  GLOBAL_STYLES = ::T.let(nil, ::T.untyped)
  HTML_HEADER = ::T.let(nil, ::T.untyped)
  REPORT_HEADER = ::T.let(nil, ::T.untyped)
end

module RSpec::Core::Formatters::SyntaxHighlighter::CodeRayImplementation
  RESET_CODE = ::T.let(nil, ::T.untyped)
end

RSpec::Core::Formatters::SyntaxHighlighter::WindowsImplementation = RSpec::Core::Formatters::SyntaxHighlighter::NoSyntaxHighlightingImplementation

class RSpec::Core::Hooks::HookCollections
  EMPTY_HOOK_ARRAY = ::T.let(nil, ::T.untyped)
  HOOK_TYPES = ::T.let(nil, ::T.untyped)
  SCOPES = ::T.let(nil, ::T.untyped)
  SCOPE_ALIASES = ::T.let(nil, ::T.untyped)
end

module RSpec::Core::Metadata
  RESERVED_KEYS = ::T.let(nil, ::T.untyped)
end

class RSpec::Core::Ordering::Random
  MAX_32_BIT = ::T.let(nil, ::T.untyped)
end

module RSpec::Core::Pending
  NOT_YET_IMPLEMENTED = ::T.let(nil, ::T.untyped)
  NO_REASON_GIVEN = ::T.let(nil, ::T.untyped)
end

class RSpec::Core::Profiler
  NOTIFICATIONS = ::T.let(nil, ::T.untyped)
end

class RSpec::Core::Reporter
  RSPEC_NOTIFICATIONS = ::T.let(nil, ::T.untyped)
end

module RSpec::Core::ShellEscape
  SHELLS_ALLOWING_UNQUOTED_IDS = ::T.let(nil, ::T.untyped)
end

module RSpec::Core::Version
  STRING = ::T.let(nil, ::T.untyped)
end

class RSpec::Expectations::Configuration
  FALSE_POSITIVE_BEHAVIOURS = ::T.let(nil, ::T.untyped)
end

RSpec::Expectations::LegacyMacherAdapter = RSpec::Expectations::LegacyMatcherAdapter

module RSpec::Expectations::Version
  STRING = ::T.let(nil, ::T.untyped)
end

module RSpec::Matchers
  BE_PREDICATE_REGEX = ::T.let(nil, ::T.untyped)
  DYNAMIC_MATCHER_REGEX = ::T.let(nil, ::T.untyped)
  HAS_REGEX = ::T.let(nil, ::T.untyped)
end

RSpec::Matchers::AliasedNegatedMatcher::DefaultFailureMessages = RSpec::Matchers::BuiltIn::BaseMatcher::DefaultFailureMessages

class RSpec::Matchers::BuiltIn::BaseMatcher
  UNDEFINED = ::T.let(nil, ::T.untyped)
end

class RSpec::Matchers::BuiltIn::BePredicate
  REGEX = ::T.let(nil, ::T.untyped)
end

class RSpec::Matchers::BuiltIn::Equal
  LITERAL_SINGLETONS = ::T.let(nil, ::T.untyped)
end

class RSpec::Matchers::BuiltIn::Has
  REGEX = ::T.let(nil, ::T.untyped)
end

class RSpec::Matchers::BuiltIn::RaiseError
  UndefinedValue = ::T.let(nil, ::T.untyped)
end

RSpec::Matchers::BuiltIn::SpecificValuesChange::MATCH_ANYTHING = BasicObject

RSpec::Matchers::BuiltIn::StartAndEndWith = RSpec::Matchers::BuiltIn::StartOrEndWith

module RSpec::Matchers::DSL::Macros
  RAISE_NOTIFIER = ::T.let(nil, ::T.untyped)
end

class RSpec::Matchers::ExpectedsForMultipleDiffs
  DEFAULT_DIFF_LABEL = ::T.let(nil, ::T.untyped)
  DESCRIPTION_MAX_LENGTH = ::T.let(nil, ::T.untyped)
end

module RSpec::Mocks
  DEFAULT_CALLBACK_INVOCATION_STRATEGY = ::T.let(nil, ::T.untyped)
  IGNORED_BACKTRACE_LINE = ::T.let(nil, ::T.untyped)
end

class RSpec::Mocks::AnyInstance::PositiveExpectationChain
  ExpectationInvocationOrder = ::T.let(nil, ::T.untyped)
end

class RSpec::Mocks::AnyInstance::Recorder
  include ::T::CompatibilityPatches::RSpecCompatibility::RecorderExtensions
end

class RSpec::Mocks::AnyInstance::StubChain
  EmptyInvocationOrder = ::T.let(nil, ::T.untyped)
  InvocationOrder = ::T.let(nil, ::T.untyped)
end

class RSpec::Mocks::ArgumentListMatcher
  MATCH_ALL = ::T.let(nil, ::T.untyped)
end

class RSpec::Mocks::ArgumentMatchers::AnyArgMatcher
  INSTANCE = ::T.let(nil, ::T.untyped)
end

class RSpec::Mocks::ArgumentMatchers::AnyArgsMatcher
  INSTANCE = ::T.let(nil, ::T.untyped)
end

class RSpec::Mocks::ArgumentMatchers::BooleanMatcher
  INSTANCE = ::T.let(nil, ::T.untyped)
end

class RSpec::Mocks::ArgumentMatchers::NoArgsMatcher
  INSTANCE = ::T.let(nil, ::T.untyped)
end

class RSpec::Mocks::Matchers::HaveReceived
  ARGS_CONSTRAINTS = ::T.let(nil, ::T.untyped)
  CONSTRAINTS = ::T.let(nil, ::T.untyped)
  COUNT_CONSTRAINTS = ::T.let(nil, ::T.untyped)
end

class RSpec::Mocks::MethodDouble
  include ::T::CompatibilityPatches::RSpecCompatibility::MethodDoubleExtensions
end

class RSpec::Mocks::ObjectReference
  MODULE_NAME_METHOD = ::T.let(nil, ::T.untyped)
end

class RSpec::Mocks::Proxy
  DEFAULT_MESSAGE_EXPECTATION_OPTS = ::T.let(nil, ::T.untyped)
end

module RSpec::Mocks::Version
  STRING = ::T.let(nil, ::T.untyped)
end

RSpec::SharedContext = RSpec::Core::SharedContext

module RSpec::Support
  DEFAULT_FAILURE_NOTIFIER = ::T.let(nil, ::T.untyped)
  DEFAULT_WARNING_NOTIFIER = ::T.let(nil, ::T.untyped)
  KERNEL_METHOD_METHOD = ::T.let(nil, ::T.untyped)
end

module RSpec::Support::AllExceptionsExceptOnesWeMustNotRescue
  AVOID_RESCUING = ::T.let(nil, ::T.untyped)
end

class RSpec::Support::Differ
  def color?(); end

  def diff(actual, expected); end

  def diff_as_object(actual, expected); end

  def diff_as_string(actual, expected); end

  def initialize(opts=T.unsafe(nil)); end
end

class RSpec::Support::Differ
end

class RSpec::Support::EncodedString
  REPLACE = ::T.let(nil, ::T.untyped)
  US_ASCII = ::T.let(nil, ::T.untyped)
  UTF_8 = ::T.let(nil, ::T.untyped)
end

class RSpec::Support::MethodSignature
  INFINITY = ::T.let(nil, ::T.untyped)
end

class RSpec::Support::Mutex
  NEW_MUTEX_METHOD = ::T.let(nil, ::T.untyped)
end

class RSpec::Support::ObjectFormatter
  ELLIPSIS = ::T.let(nil, ::T.untyped)
  INSPECTOR_CLASSES = ::T.let(nil, ::T.untyped)
end

class RSpec::Support::ObjectFormatter::DateTimeInspector
  FORMAT = ::T.let(nil, ::T.untyped)
end

class RSpec::Support::ObjectFormatter::TimeInspector
  FORMAT = ::T.let(nil, ::T.untyped)
end

class RSpec::Support::ObjectFormatter::UninspectableObjectInspector
  OBJECT_ID_FORMAT = ::T.let(nil, ::T.untyped)
end

RSpec::Support::StrictSignatureVerifier = RSpec::Support::MethodSignatureVerifier

module RSpec::Support::Version
  STRING = ::T.let(nil, ::T.untyped)
end

module RSpec::Version
  STRING = ::T.let(nil, ::T.untyped)
end

module Racc
  Copyright = ::T.let(nil, ::T.untyped)
  Racc_No_Extensions = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
  Version = ::T.let(nil, ::T.untyped)
end

class Racc::CparseParams
end

class Racc::CparseParams
end

class Racc::Parser
  Racc_Main_Parsing_Routine = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Core_Id_C = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Core_Version = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Core_Version_C = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Core_Version_R = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Type = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Version = ::T.let(nil, ::T.untyped)
  Racc_YY_Parse_Method = ::T.let(nil, ::T.untyped)
end

module Rake
  EARLY = ::T.let(nil, ::T.untyped)
  EMPTY_TASK_ARGS = ::T.let(nil, ::T.untyped)
  LATE = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Rake::Application
  DEFAULT_RAKEFILES = ::T.let(nil, ::T.untyped)
end

module Rake::Backtrace
  SUPPRESSED_PATHS = ::T.let(nil, ::T.untyped)
  SUPPRESSED_PATHS_RE = ::T.let(nil, ::T.untyped)
  SUPPRESS_PATTERN = ::T.let(nil, ::T.untyped)
  SYS_KEYS = ::T.let(nil, ::T.untyped)
  SYS_PATHS = ::T.let(nil, ::T.untyped)
end

module Rake::DSL
  include ::FileUtils::StreamUtils_
end

class Rake::FileList
  ARRAY_METHODS = ::T.let(nil, ::T.untyped)
  DEFAULT_IGNORE_PATTERNS = ::T.let(nil, ::T.untyped)
  DEFAULT_IGNORE_PROCS = ::T.let(nil, ::T.untyped)
  DELEGATING_METHODS = ::T.let(nil, ::T.untyped)
  GLOB_PATTERN = ::T.let(nil, ::T.untyped)
  MUST_DEFINE = ::T.let(nil, ::T.untyped)
  MUST_NOT_DEFINE = ::T.let(nil, ::T.untyped)
  SPECIAL_RETURN = ::T.let(nil, ::T.untyped)
end

module Rake::FileUtilsExt
  include ::FileUtils::StreamUtils_
  DEFAULT = ::T.let(nil, ::T.untyped)
end

module Rake::FileUtilsExt
  extend ::FileUtils::StreamUtils_
end

class Rake::InvocationChain
  EMPTY = ::T.let(nil, ::T.untyped)
end

class Rake::LinkedList
  EMPTY = ::T.let(nil, ::T.untyped)
end

class Rake::Promise
  NOT_SET = ::T.let(nil, ::T.untyped)
end

Rake::RDocTask = RDoc::Task

class Rake::Scope
  EMPTY = ::T.let(nil, ::T.untyped)
end

class Rake::TaskLib
  include ::FileUtils::StreamUtils_
end

module Rake::Version
  BUILD = ::T.let(nil, ::T.untyped)
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  NUMBERS = ::T.let(nil, ::T.untyped)
  OTHER = ::T.let(nil, ::T.untyped)
end

module Rake
  extend ::FileUtils::StreamUtils_
end

RakeFileUtils = Rake::FileUtilsExt

class Random
  def self.bytes(arg); end
end

class Range
  def %(arg); end

  def entries(); end

  def sum(identity=T.unsafe(nil)); end

  def to_a(); end
end

module RbConfig
  def self.expand(val, config=T.unsafe(nil)); end

  def self.fire_update!(key, val, mkconf=T.unsafe(nil), conf=T.unsafe(nil)); end

  def self.ruby(); end
end

module Readline
  def self.completion_quote_character(); end
end

module Reline
  def eof?(*args, &block); end
  FILENAME_COMPLETION_PROC = ::T.let(nil, ::T.untyped)
  HISTORY = ::T.let(nil, ::T.untyped)
  USERNAME_COMPLETION_PROC = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Reline::ANSI
  RAW_KEYSTROKE_CONFIG = ::T.let(nil, ::T.untyped)
end

class Reline::ANSI
  def self.clear_screen(); end

  def self.cursor_pos(); end

  def self.deprep(otio); end

  def self.encoding(); end

  def self.erase_after_cursor(); end

  def self.get_screen_size(); end

  def self.getc(); end

  def self.input=(val); end

  def self.move_cursor_column(x); end

  def self.move_cursor_down(x); end

  def self.move_cursor_up(x); end

  def self.output=(val); end

  def self.prep(); end

  def self.retrieve_keybuffer(); end

  def self.scroll_down(x); end

  def self.set_screen_size(rows, columns); end

  def self.set_winch_handler(&handler); end

  def self.ungetc(c); end

  def self.win?(); end
end

class Reline::Config
  def add_default_key_binding(keystroke, target); end

  def bind_key(key, func_name); end

  def bind_tty_special_chars(); end

  def bind_tty_special_chars=(bind_tty_special_chars); end

  def bind_variable(name, value); end

  def blink_matching_paren(); end

  def blink_matching_paren=(blink_matching_paren); end

  def byte_oriented(); end

  def byte_oriented=(byte_oriented); end

  def completion_ignore_case(); end

  def completion_ignore_case=(completion_ignore_case); end

  def convert_meta(); end

  def convert_meta=(convert_meta); end

  def disable_completion(); end

  def disable_completion=(disable_completion); end

  def editing_mode(); end

  def editing_mode=(val); end

  def editing_mode_is?(*val); end

  def emacs_mode_string(); end

  def emacs_mode_string=(emacs_mode_string); end

  def enable_keypad(); end

  def enable_keypad=(enable_keypad); end

  def expand_tilde(); end

  def expand_tilde=(expand_tilde); end

  def handle_directive(directive, file, no); end

  def history_preserve_point(); end

  def history_preserve_point=(history_preserve_point); end

  def history_size(); end

  def history_size=(history_size); end

  def horizontal_scroll_mode(); end

  def horizontal_scroll_mode=(horizontal_scroll_mode); end

  def input_meta(); end

  def input_meta=(input_meta); end

  def inputrc_path(); end

  def key_bindings(); end

  def key_notation_to_code(notation); end

  def keymap(); end

  def keyseq_timeout(); end

  def keyseq_timeout=(keyseq_timeout); end

  def mark_directories(); end

  def mark_directories=(mark_directories); end

  def mark_modified_lines(); end

  def mark_modified_lines=(mark_modified_lines); end

  def mark_symlinked_directories(); end

  def mark_symlinked_directories=(mark_symlinked_directories); end

  def match_hidden_files(); end

  def match_hidden_files=(match_hidden_files); end

  def meta_flag(); end

  def meta_flag=(meta_flag); end

  def output_meta(); end

  def output_meta=(output_meta); end

  def page_completions(); end

  def page_completions=(page_completions); end

  def parse_keyseq(str); end

  def prefer_visible_bell(); end

  def prefer_visible_bell=(prefer_visible_bell); end

  def print_completions_horizontally(); end

  def print_completions_horizontally=(print_completions_horizontally); end

  def read(file=T.unsafe(nil)); end

  def read_lines(lines, file=T.unsafe(nil)); end

  def reset(); end

  def reset_default_key_bindings(); end

  def retrieve_string(str); end

  def show_all_if_ambiguous(); end

  def show_all_if_ambiguous=(show_all_if_ambiguous); end

  def show_all_if_unmodified(); end

  def show_all_if_unmodified=(show_all_if_unmodified); end

  def show_mode_in_prompt(); end

  def show_mode_in_prompt=(show_mode_in_prompt); end

  def test_mode(); end

  def vi_cmd_mode_icon(); end

  def vi_cmd_mode_icon=(vi_cmd_mode_icon); end

  def vi_ins_mode_icon(); end

  def vi_ins_mode_icon=(vi_ins_mode_icon); end

  def visible_stats(); end

  def visible_stats=(visible_stats); end
  KEYSEQ_PATTERN = ::T.let(nil, ::T.untyped)
  VARIABLE_NAMES = ::T.let(nil, ::T.untyped)
  VARIABLE_NAME_SYMBOLS = ::T.let(nil, ::T.untyped)
end

class Reline::Config::InvalidInputrc
  def file(); end

  def file=(file); end

  def lineno(); end

  def lineno=(lineno); end
end

class Reline::Config::InvalidInputrc
end

class Reline::Config
end

class Reline::Core
  def ambiguous_width(); end

  def ambiguous_width=(ambiguous_width); end

  def auto_indent_proc(); end

  def auto_indent_proc=(p); end

  def basic_quote_characters(); end

  def basic_quote_characters=(v); end

  def basic_word_break_characters(); end

  def basic_word_break_characters=(v); end

  def completer_quote_characters(); end

  def completer_quote_characters=(v); end

  def completer_word_break_characters(); end

  def completer_word_break_characters=(v); end

  def completion_append_character(); end

  def completion_append_character=(val); end

  def completion_case_fold(); end

  def completion_case_fold=(v); end

  def completion_proc(); end

  def completion_proc=(p); end

  def completion_quote_character(); end

  def config(); end

  def config=(config); end

  def dig_perfect_match_proc(); end

  def dig_perfect_match_proc=(p); end

  def emacs_editing_mode(); end

  def emacs_editing_mode?(); end

  def encoding(); end

  def filename_quote_characters(); end

  def filename_quote_characters=(v); end

  def get_screen_size(); end

  def input=(val); end

  def key_stroke(); end

  def key_stroke=(key_stroke); end

  def last_incremental_search(); end

  def last_incremental_search=(last_incremental_search); end

  def line_editor(); end

  def line_editor=(line_editor); end

  def output(); end

  def output=(val); end

  def output_modifier_proc(); end

  def output_modifier_proc=(p); end

  def pre_input_hook(); end

  def pre_input_hook=(p); end

  def prompt_proc(); end

  def prompt_proc=(p); end

  def readline(prompt=T.unsafe(nil), add_hist=T.unsafe(nil)); end

  def readmultiline(prompt=T.unsafe(nil), add_hist=T.unsafe(nil), &confirm_multiline_termination); end

  def special_prefixes(); end

  def special_prefixes=(v); end

  def vi_editing_mode(); end

  def vi_editing_mode?(); end
  ATTR_READER_NAMES = ::T.let(nil, ::T.untyped)
end

class Reline::Core
end

class Reline::CursorPos
  def x(); end

  def x=(_); end

  def y(); end

  def y=(_); end
end

class Reline::CursorPos
  def self.[](*arg); end

  def self.members(); end
end

class Reline::GeneralIO
  RAW_KEYSTROKE_CONFIG = ::T.let(nil, ::T.untyped)
end

class Reline::GeneralIO
  def self.clear_screen(); end

  def self.cursor_pos(); end

  def self.deprep(otio); end

  def self.encoding(); end

  def self.erase_after_cursor(); end

  def self.get_screen_size(); end

  def self.getc(); end

  def self.input=(val); end

  def self.move_cursor_column(val); end

  def self.move_cursor_down(val); end

  def self.move_cursor_up(val); end

  def self.prep(); end

  def self.scroll_down(val); end

  def self.set_screen_size(rows, columns); end

  def self.set_winch_handler(&handler); end

  def self.ungetc(c); end

  def self.win?(); end
end

class Reline::History
  def <<(val); end

  def [](index); end

  def []=(index, val); end

  def concat(*val); end

  def delete_at(index); end

  def initialize(config); end

  def push(*val); end

  def to_s(); end
end

class Reline::History
end

Reline::IOGate = Reline::ANSI

Reline::Key = Struct::Key

module Reline::KeyActor
end

class Reline::KeyActor::Base
  def get_method(key); end
  MAPPING = ::T.let(nil, ::T.untyped)
end

class Reline::KeyActor::Base
end

class Reline::KeyActor::Emacs
  MAPPING = ::T.let(nil, ::T.untyped)
end

class Reline::KeyActor::Emacs
end

class Reline::KeyActor::ViCommand
  MAPPING = ::T.let(nil, ::T.untyped)
end

class Reline::KeyActor::ViCommand
end

class Reline::KeyActor::ViInsert
  MAPPING = ::T.let(nil, ::T.untyped)
end

class Reline::KeyActor::ViInsert
end

module Reline::KeyActor
end

class Reline::KeyStroke
  def expand(input); end

  def initialize(config); end

  def match_status(input); end
end

class Reline::KeyStroke
end

class Reline::KillRing
  def append(string, before_p=T.unsafe(nil)); end

  def initialize(max=T.unsafe(nil)); end

  def process(); end

  def yank(); end

  def yank_pop(); end
end

class Reline::KillRing::RingBuffer
  def <<(point); end

  def empty?(); end

  def head(); end

  def initialize(max=T.unsafe(nil)); end

  def size(); end
end

class Reline::KillRing::RingBuffer
end

class Reline::KillRing::RingPoint
  def ==(other); end

  def backward(); end

  def backward=(_); end

  def forward(); end

  def forward=(_); end

  def initialize(str); end

  def str(); end

  def str=(_); end
end

class Reline::KillRing::RingPoint
  def self.[](*arg); end

  def self.members(); end
end

module Reline::KillRing::State
  CONTINUED = ::T.let(nil, ::T.untyped)
  FRESH = ::T.let(nil, ::T.untyped)
  PROCESSED = ::T.let(nil, ::T.untyped)
  YANK = ::T.let(nil, ::T.untyped)
end

module Reline::KillRing::State
end

class Reline::KillRing
end

class Reline::LineEditor
  def auto_indent_proc(); end

  def auto_indent_proc=(auto_indent_proc); end

  def byte_pointer(); end

  def byte_pointer=(val); end

  def call_completion_proc(); end

  def completion_append_character(); end

  def completion_append_character=(completion_append_character); end

  def completion_proc(); end

  def completion_proc=(completion_proc); end

  def confirm_multiline_termination(); end

  def confirm_multiline_termination_proc(); end

  def confirm_multiline_termination_proc=(confirm_multiline_termination_proc); end

  def delete_text(start=T.unsafe(nil), length=T.unsafe(nil)); end

  def dig_perfect_match_proc(); end

  def dig_perfect_match_proc=(dig_perfect_match_proc); end

  def editing_mode(); end

  def eof?(); end

  def finalize(); end

  def finish(); end

  def finished?(); end

  def initialize(config, encoding); end

  def input_key(key); end

  def insert_text(text); end

  def line(); end

  def multiline_off(); end

  def multiline_on(); end

  def output=(output); end

  def output_modifier_proc(); end

  def output_modifier_proc=(output_modifier_proc); end

  def pre_input_hook(); end

  def pre_input_hook=(pre_input_hook); end

  def prompt_proc(); end

  def prompt_proc=(prompt_proc); end

  def rerender(); end

  def reset(prompt=T.unsafe(nil), encoding:); end

  def reset_line(); end

  def reset_variables(prompt=T.unsafe(nil), encoding:); end

  def retrieve_completion_block(set_completion_quote_character=T.unsafe(nil)); end

  def whole_buffer(); end

  def whole_lines(index: T.unsafe(nil), line: T.unsafe(nil)); end
  VI_MOTIONS = ::T.let(nil, ::T.untyped)
end

Reline::LineEditor::CompletionJourneyData = Struct::CompletionJourneyData

module Reline::LineEditor::CompletionState
  COMPLETION = ::T.let(nil, ::T.untyped)
  JOURNEY = ::T.let(nil, ::T.untyped)
  MENU = ::T.let(nil, ::T.untyped)
  MENU_WITH_PERFECT_MATCH = ::T.let(nil, ::T.untyped)
  NORMAL = ::T.let(nil, ::T.untyped)
  PERFECT_MATCH = ::T.let(nil, ::T.untyped)
end

module Reline::LineEditor::CompletionState
end

Reline::LineEditor::MenuInfo = Struct::MenuInfo

class Reline::LineEditor
end

class Reline::Unicode
  CSI_REGEXP = ::T.let(nil, ::T.untyped)
  EscapedChars = ::T.let(nil, ::T.untyped)
  EscapedPairs = ::T.let(nil, ::T.untyped)
  NON_PRINTING_END = ::T.let(nil, ::T.untyped)
  NON_PRINTING_START = ::T.let(nil, ::T.untyped)
  OSC_REGEXP = ::T.let(nil, ::T.untyped)
  WIDTH_SCANNER = ::T.let(nil, ::T.untyped)
end

class Reline::Unicode::EastAsianWidth
  TYPE_A = ::T.let(nil, ::T.untyped)
  TYPE_F = ::T.let(nil, ::T.untyped)
  TYPE_H = ::T.let(nil, ::T.untyped)
  TYPE_N = ::T.let(nil, ::T.untyped)
  TYPE_NA = ::T.let(nil, ::T.untyped)
  TYPE_W = ::T.let(nil, ::T.untyped)
end

class Reline::Unicode::EastAsianWidth
end

class Reline::Unicode
  def self.calculate_width(str, allow_escape_code=T.unsafe(nil)); end

  def self.ed_transpose_words(line, byte_pointer); end

  def self.em_backward_word(line, byte_pointer); end

  def self.em_big_backward_word(line, byte_pointer); end

  def self.em_forward_word(line, byte_pointer); end

  def self.em_forward_word_with_capitalization(line, byte_pointer); end

  def self.escape_for_print(str); end

  def self.get_mbchar_byte_size_by_first_char(c); end

  def self.get_mbchar_width(mbchar); end

  def self.get_next_mbchar_size(line, byte_pointer); end

  def self.get_prev_mbchar_size(line, byte_pointer); end

  def self.split_by_width(str, max_width, encoding=T.unsafe(nil)); end

  def self.vi_backward_word(line, byte_pointer); end

  def self.vi_big_backward_word(line, byte_pointer); end

  def self.vi_big_forward_end_word(line, byte_pointer); end

  def self.vi_big_forward_word(line, byte_pointer); end

  def self.vi_first_print(line); end

  def self.vi_forward_end_word(line, byte_pointer); end

  def self.vi_forward_word(line, byte_pointer); end
end

module Reline
  extend ::Forwardable
  extend ::SingleForwardable
  def self.ambiguous_width(*args, &block); end

  def self.auto_indent_proc(*args, &block); end

  def self.auto_indent_proc=(*args, &block); end

  def self.basic_quote_characters(*args, &block); end

  def self.basic_quote_characters=(*args, &block); end

  def self.basic_word_break_characters(*args, &block); end

  def self.basic_word_break_characters=(*args, &block); end

  def self.completer_quote_characters(*args, &block); end

  def self.completer_quote_characters=(*args, &block); end

  def self.completer_word_break_characters(*args, &block); end

  def self.completer_word_break_characters=(*args, &block); end

  def self.completion_append_character(*args, &block); end

  def self.completion_append_character=(*args, &block); end

  def self.completion_case_fold(*args, &block); end

  def self.completion_case_fold=(*args, &block); end

  def self.completion_proc(*args, &block); end

  def self.completion_proc=(*args, &block); end

  def self.completion_quote_character(*args, &block); end

  def self.core(); end

  def self.delete_text(*args, &block); end

  def self.dig_perfect_match_proc(*args, &block); end

  def self.dig_perfect_match_proc=(*args, &block); end

  def self.emacs_editing_mode(*args, &block); end

  def self.emacs_editing_mode?(*args, &block); end

  def self.encoding_system_needs(); end

  def self.eof?(*args, &block); end

  def self.filename_quote_characters(*args, &block); end

  def self.filename_quote_characters=(*args, &block); end

  def self.get_screen_size(*args, &block); end

  def self.input=(*args, &block); end

  def self.insert_text(*args, &block); end

  def self.last_incremental_search(*args, &block); end

  def self.last_incremental_search=(*args, &block); end

  def self.line_buffer(*args, &block); end

  def self.line_editor(); end

  def self.output=(*args, &block); end

  def self.output_modifier_proc(*args, &block); end

  def self.output_modifier_proc=(*args, &block); end

  def self.point(*args, &block); end

  def self.point=(*args, &block); end

  def self.pre_input_hook(*args, &block); end

  def self.pre_input_hook=(*args, &block); end

  def self.prompt_proc(*args, &block); end

  def self.prompt_proc=(*args, &block); end

  def self.readline(*args, &block); end

  def self.readmultiline(*args, &block); end

  def self.redisplay(*args, &block); end

  def self.special_prefixes(*args, &block); end

  def self.special_prefixes=(*args, &block); end

  def self.vi_editing_mode(*args, &block); end

  def self.vi_editing_mode?(*args, &block); end
end

class Ripper
  def column(); end

  def debug_output(); end

  def debug_output=(debug_output); end

  def encoding(); end

  def end_seen?(); end

  def error?(); end

  def filename(); end

  def initialize(*arg); end

  def lineno(); end

  def parse(); end

  def state(); end

  def token(); end

  def yydebug(); end

  def yydebug=(yydebug); end
  EXPR_ARG = ::T.let(nil, ::T.untyped)
  EXPR_ARG_ANY = ::T.let(nil, ::T.untyped)
  EXPR_BEG = ::T.let(nil, ::T.untyped)
  EXPR_BEG_ANY = ::T.let(nil, ::T.untyped)
  EXPR_CLASS = ::T.let(nil, ::T.untyped)
  EXPR_CMDARG = ::T.let(nil, ::T.untyped)
  EXPR_DOT = ::T.let(nil, ::T.untyped)
  EXPR_END = ::T.let(nil, ::T.untyped)
  EXPR_ENDARG = ::T.let(nil, ::T.untyped)
  EXPR_ENDFN = ::T.let(nil, ::T.untyped)
  EXPR_END_ANY = ::T.let(nil, ::T.untyped)
  EXPR_FITEM = ::T.let(nil, ::T.untyped)
  EXPR_FNAME = ::T.let(nil, ::T.untyped)
  EXPR_LABEL = ::T.let(nil, ::T.untyped)
  EXPR_LABELED = ::T.let(nil, ::T.untyped)
  EXPR_MID = ::T.let(nil, ::T.untyped)
  EXPR_NONE = ::T.let(nil, ::T.untyped)
  EXPR_VALUE = ::T.let(nil, ::T.untyped)
  PARSER_EVENT_TABLE = ::T.let(nil, ::T.untyped)
  SCANNER_EVENT_TABLE = ::T.let(nil, ::T.untyped)
  Version = ::T.let(nil, ::T.untyped)
end

class Ripper::Filter
  def initialize(src, filename=T.unsafe(nil), lineno=T.unsafe(nil)); end
end

class Ripper::Lexer
  def errors(); end

  def lex(); end

  def scan(); end

  def tokenize(); end
end

class Ripper::Lexer::Elem
  def event(); end

  def event=(_); end

  def initialize(pos, event, tok, state, message=T.unsafe(nil)); end

  def message(); end

  def message=(_); end

  def pos(); end

  def pos=(_); end

  def state(); end

  def state=(_); end

  def tok(); end

  def tok=(_); end
end

class Ripper::Lexer::Elem
  def self.[](*arg); end

  def self.members(); end
end

class Ripper::Lexer::State
  def &(i); end

  def ==(i); end

  def allbits?(i); end

  def anybits?(i); end

  def initialize(i); end

  def nobits?(i); end

  def to_i(); end

  def to_int(); end

  def to_int=(_); end

  def to_s=(_); end

  def |(i); end
end

class Ripper::Lexer::State
  def self.[](*arg); end

  def self.members(); end
end

class Ripper::Lexer
end

class Ripper::SexpBuilder
  def on_BEGIN(*args); end

  def on_CHAR(tok); end

  def on_END(*args); end

  def on___end__(tok); end

  def on_alias(*args); end

  def on_alias_error(*args); end

  def on_aref(*args); end

  def on_aref_field(*args); end

  def on_arg_ambiguous(*args); end

  def on_arg_paren(*args); end

  def on_args_add(*args); end

  def on_args_add_block(*args); end

  def on_args_add_star(*args); end

  def on_args_forward(*args); end

  def on_args_new(*args); end

  def on_array(*args); end

  def on_aryptn(*args); end

  def on_assign(*args); end

  def on_assign_error(*args); end

  def on_assoc_new(*args); end

  def on_assoc_splat(*args); end

  def on_assoclist_from_args(*args); end

  def on_backref(tok); end

  def on_backtick(tok); end

  def on_bare_assoc_hash(*args); end

  def on_begin(*args); end

  def on_binary(*args); end

  def on_block_var(*args); end

  def on_blockarg(*args); end

  def on_bodystmt(*args); end

  def on_brace_block(*args); end

  def on_break(*args); end

  def on_call(*args); end

  def on_case(*args); end

  def on_class(*args); end

  def on_class_name_error(*args); end

  def on_comma(tok); end

  def on_command(*args); end

  def on_command_call(*args); end

  def on_comment(tok); end

  def on_const(tok); end

  def on_const_path_field(*args); end

  def on_const_path_ref(*args); end

  def on_const_ref(*args); end

  def on_cvar(tok); end

  def on_def(*args); end

  def on_defined(*args); end

  def on_defs(*args); end

  def on_do_block(*args); end

  def on_dot2(*args); end

  def on_dot3(*args); end

  def on_dyna_symbol(*args); end

  def on_else(*args); end

  def on_elsif(*args); end

  def on_embdoc(tok); end

  def on_embdoc_beg(tok); end

  def on_embdoc_end(tok); end

  def on_embexpr_beg(tok); end

  def on_embexpr_end(tok); end

  def on_embvar(tok); end

  def on_ensure(*args); end

  def on_excessed_comma(*args); end

  def on_fcall(*args); end

  def on_field(*args); end

  def on_float(tok); end

  def on_for(*args); end

  def on_gvar(tok); end

  def on_hash(*args); end

  def on_heredoc_beg(tok); end

  def on_heredoc_end(tok); end

  def on_hshptn(*args); end

  def on_ident(tok); end

  def on_if(*args); end

  def on_if_mod(*args); end

  def on_ifop(*args); end

  def on_ignored_nl(tok); end

  def on_ignored_sp(tok); end

  def on_imaginary(tok); end

  def on_in(*args); end

  def on_int(tok); end

  def on_ivar(tok); end

  def on_kw(tok); end

  def on_kwrest_param(*args); end

  def on_label(tok); end

  def on_label_end(tok); end

  def on_lambda(*args); end

  def on_lbrace(tok); end

  def on_lbracket(tok); end

  def on_lparen(tok); end

  def on_magic_comment(*args); end

  def on_massign(*args); end

  def on_method_add_arg(*args); end

  def on_method_add_block(*args); end

  def on_mlhs_add(*args); end

  def on_mlhs_add_post(*args); end

  def on_mlhs_add_star(*args); end

  def on_mlhs_new(*args); end

  def on_mlhs_paren(*args); end

  def on_module(*args); end

  def on_mrhs_add(*args); end

  def on_mrhs_add_star(*args); end

  def on_mrhs_new(*args); end

  def on_mrhs_new_from_args(*args); end

  def on_next(*args); end

  def on_nl(tok); end

  def on_nokw_param(*args); end

  def on_op(tok); end

  def on_opassign(*args); end

  def on_operator_ambiguous(*args); end

  def on_param_error(*args); end

  def on_params(*args); end

  def on_paren(*args); end

  def on_parse_error(*args); end

  def on_period(tok); end

  def on_program(*args); end

  def on_qsymbols_add(*args); end

  def on_qsymbols_beg(tok); end

  def on_qsymbols_new(*args); end

  def on_qwords_add(*args); end

  def on_qwords_beg(tok); end

  def on_qwords_new(*args); end

  def on_rational(tok); end

  def on_rbrace(tok); end

  def on_rbracket(tok); end

  def on_redo(*args); end

  def on_regexp_add(*args); end

  def on_regexp_beg(tok); end

  def on_regexp_end(tok); end

  def on_regexp_literal(*args); end

  def on_regexp_new(*args); end

  def on_rescue(*args); end

  def on_rescue_mod(*args); end

  def on_rest_param(*args); end

  def on_retry(*args); end

  def on_return(*args); end

  def on_return0(*args); end

  def on_rparen(tok); end

  def on_sclass(*args); end

  def on_semicolon(tok); end

  def on_sp(tok); end

  def on_stmts_add(*args); end

  def on_stmts_new(*args); end

  def on_string_add(*args); end

  def on_string_concat(*args); end

  def on_string_content(*args); end

  def on_string_dvar(*args); end

  def on_string_embexpr(*args); end

  def on_string_literal(*args); end

  def on_super(*args); end

  def on_symbeg(tok); end

  def on_symbol(*args); end

  def on_symbol_literal(*args); end

  def on_symbols_add(*args); end

  def on_symbols_beg(tok); end

  def on_symbols_new(*args); end

  def on_tlambda(tok); end

  def on_tlambeg(tok); end

  def on_top_const_field(*args); end

  def on_top_const_ref(*args); end

  def on_tstring_beg(tok); end

  def on_tstring_content(tok); end

  def on_tstring_end(tok); end

  def on_unary(*args); end

  def on_undef(*args); end

  def on_unless(*args); end

  def on_unless_mod(*args); end

  def on_until(*args); end

  def on_until_mod(*args); end

  def on_var_alias(*args); end

  def on_var_field(*args); end

  def on_var_ref(*args); end

  def on_vcall(*args); end

  def on_void_stmt(*args); end

  def on_when(*args); end

  def on_while(*args); end

  def on_while_mod(*args); end

  def on_word_add(*args); end

  def on_word_new(*args); end

  def on_words_add(*args); end

  def on_words_beg(tok); end

  def on_words_new(*args); end

  def on_words_sep(tok); end

  def on_xstring_add(*args); end

  def on_xstring_literal(*args); end

  def on_xstring_new(*args); end

  def on_yield(*args); end

  def on_yield0(*args); end

  def on_zsuper(*args); end
end

class Ripper::SexpBuilder
end

class Ripper::SexpBuilderPP
end

class Ripper::SexpBuilderPP
end

class Ripper::TokenPattern
  def initialize(pattern); end

  def match(str); end

  def match_list(tokens); end
  MAP = ::T.let(nil, ::T.untyped)
end

class Ripper::TokenPattern::CompileError
end

class Ripper::TokenPattern::CompileError
end

class Ripper::TokenPattern::Error
end

class Ripper::TokenPattern::Error
end

class Ripper::TokenPattern::MatchData
  def initialize(tokens, match); end

  def string(n=T.unsafe(nil)); end
end

class Ripper::TokenPattern::MatchData
end

class Ripper::TokenPattern::MatchError
end

class Ripper::TokenPattern::MatchError
end

class Ripper::TokenPattern
  def self.compile(*arg); end
end

class Ripper
  def self.dedent_string(arg, arg1); end

  def self.lex_state_name(arg); end

  def self.token_match(src, pattern); end
end

module Roo
  CLASS_FOR_EXTENSION = ::T.let(nil, ::T.untyped)
  ROO_EXCELML_NOTICE = ::T.let(nil, ::T.untyped)
  ROO_EXCEL_NOTICE = ::T.let(nil, ::T.untyped)
  ROO_GOOGLE_NOTICE = ::T.let(nil, ::T.untyped)
  TEMP_PREFIX = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Roo::Base
  MAX_ROW_COL = ::T.let(nil, ::T.untyped)
  MIN_ROW_COL = ::T.let(nil, ::T.untyped)
end

class Roo::CSV
  TYPE_MAP = ::T.let(nil, ::T.untyped)
end

class Roo::Excelx
  ERROR_VALUES = ::T.let(nil, ::T.untyped)
end

class Roo::Excelx::Cell::DateTime
  DATE_FORMATS = ::T.let(nil, ::T.untyped)
  SECONDS_IN_DAY = ::T.let(nil, ::T.untyped)
  TIME_FORMATS = ::T.let(nil, ::T.untyped)
end

class Roo::Excelx::Extractor
  COMMON_STRINGS = ::T.let(nil, ::T.untyped)
end

module Roo::Excelx::Format
  EXCEPTIONAL_FORMATS = ::T.let(nil, ::T.untyped)
  STANDARD_FORMATS = ::T.let(nil, ::T.untyped)
end

Roo::LibreOffice = Roo::OpenOffice

class Roo::OpenOffice
  ERROR_MISSING_CONTENT_XML = ::T.let(nil, ::T.untyped)
  XPATH_FIND_TABLE_STYLES = ::T.let(nil, ::T.untyped)
  XPATH_LOCAL_NAME_TABLE = ::T.let(nil, ::T.untyped)
end

module Roo::Utils
  LETTERS = ::T.let(nil, ::T.untyped)
end

module Rsvg
  LOG_DOMAIN = ::T.let(nil, ::T.untyped)
  MAJOR_VERSION = ::T.let(nil, ::T.untyped)
  MICRO_VERSION = ::T.let(nil, ::T.untyped)
  MINOR_VERSION = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Rsvg::Error
  include ::GLib::ErrorInfo
  FAILED = ::T.let(nil, ::T.untyped)
end

class Rsvg::Error::Failed
end

class Rsvg::Error::Failed
end

class Rsvg::Error
end

class Rsvg::HandleFlags
  FLAGS_NONE = ::T.let(nil, ::T.untyped)
  FLAG_KEEP_IMAGE_DATA = ::T.let(nil, ::T.untyped)
  FLAG_UNLIMITED = ::T.let(nil, ::T.untyped)
end

class Rsvg::HandlePrivate
end

class Rsvg::HandlePrivate
end

module Rsvg::Version
  MAJOR = ::T.let(nil, ::T.untyped)
  MICRO = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
end

class RubyLex
  def check_code_block(code); end

  def check_corresponding_token_depth(); end

  def check_newline_depth_difference(); end

  def check_state(code); end

  def check_string_literal(); end

  def each_top_level_statement(); end

  def initialize_input(); end

  def lex(); end

  def process_continue(); end

  def process_literal_type(); end

  def process_nesting_level(); end

  def prompt(); end

  def ripper_lex_without_warning(code); end

  def set_auto_indent(context); end

  def set_input(io, p=T.unsafe(nil), &block); end

  def set_prompt(p=T.unsafe(nil), &block); end
end

class RubyLex::TerminateLineInput
  def initialize(); end
end

class RubyLex::TerminateLineInput
end

class RubyLex
  def self.compile_with_errors_suppressed(code); end
end

class RubyVM::AbstractSyntaxTree::Node
  def pretty_print_children(q, names=T.unsafe(nil)); end
end

module RubyVM::MJIT
end

module RubyVM::MJIT
  def self.enabled?(); end

  def self.pause(*arg); end

  def self.resume(); end
end

ScanError = StringScanner::Error

class Set
  def ==(other); end

  def ===(o); end

  def compare_by_identity(); end

  def compare_by_identity?(); end

  def divide(&func); end

  def eql?(o); end

  def flatten_merge(set, seen=T.unsafe(nil)); end

  def pretty_print(pp); end

  def pretty_print_cycle(pp); end

  def reset(); end
  InspectKey = ::T.let(nil, ::T.untyped)
end

module Shellany
  VERSION = ::T.let(nil, ::T.untyped)
end

module SimpleCov
  VERSION = ::T.let(nil, ::T.untyped)
end

module SimpleCov::ExitCodes
  EXCEPTION = ::T.let(nil, ::T.untyped)
  MAXIMUM_COVERAGE_DROP = ::T.let(nil, ::T.untyped)
  MINIMUM_COVERAGE = ::T.let(nil, ::T.untyped)
  SUCCESS = ::T.let(nil, ::T.untyped)
end

class SimpleCov::Formatter::HTMLFormatter
  VERSION = ::T.let(nil, ::T.untyped)
end

class SimpleCov::LinesClassifier
  COMMENT_LINE = ::T.let(nil, ::T.untyped)
  NOT_RELEVANT = ::T.let(nil, ::T.untyped)
  RELEVANT = ::T.let(nil, ::T.untyped)
  WHITESPACE_LINE = ::T.let(nil, ::T.untyped)
  WHITESPACE_OR_COMMENT_LINE = ::T.let(nil, ::T.untyped)
end

class SimpleDelegator
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

module Singleton
  def _dump(depth=T.unsafe(nil)); end

  def clone(); end

  def dup(); end
end

module Singleton::SingletonClassMethods
  def _load(str); end

  def clone(); end
end

module Singleton
  def self.__init__(klass); end
end

class Socket
  IPV6_DONTFRAG = ::T.let(nil, ::T.untyped)
  IPV6_PATHMTU = ::T.let(nil, ::T.untyped)
  IPV6_RECVPATHMTU = ::T.let(nil, ::T.untyped)
  SO_BPF_EXTENSIONS = ::T.let(nil, ::T.untyped)
end

module Socket::Constants
  IPV6_DONTFRAG = ::T.let(nil, ::T.untyped)
  IPV6_PATHMTU = ::T.let(nil, ::T.untyped)
  IPV6_RECVPATHMTU = ::T.let(nil, ::T.untyped)
  SO_BPF_EXTENSIONS = ::T.let(nil, ::T.untyped)
end

class SortedSet
  def initialize(*args, &block); end
end

class SortedSet
  def self.setup(); end
end

Spruz = Tins

class Squib::Args::Import
  def data(); end

  def data=(data); end

  def explode(); end

  def explode=(explode); end

  def file(); end

  def file=(file); end

  def sheet(); end

  def sheet=(sheet); end

  def strip(); end

  def strip=(strip); end
end

class String
  include ::JSON::Ext::Generator::GeneratorMethods::String
  def parse_csv(**options); end

  def shellescape(); end

  def shellsplit(); end

  def truncate_bytes(truncate_at, omission: T.unsafe(nil)); end
  BLANK_RE = ::T.let(nil, ::T.untyped)
  ENCODED_BLANKS = ::T.let(nil, ::T.untyped)
end

class StringIO
  def set_encoding_by_bom(); end
  VERSION = ::T.let(nil, ::T.untyped)
end

class StringScanner
  def bol?(); end

  def fixed_anchor?(); end

  def initialize(*arg); end
  Id = ::T.let(nil, ::T.untyped)
  Version = ::T.let(nil, ::T.untyped)
end

class Struct
  def deconstruct(); end

  def deconstruct_keys(arg); end

  def filter(*arg); end
end

class Struct::CompletionJourneyData
  def list(); end

  def list=(_); end

  def pointer(); end

  def pointer=(_); end

  def postposing(); end

  def postposing=(_); end

  def preposing(); end

  def preposing=(_); end
end

class Struct::CompletionJourneyData
  def self.[](*arg); end

  def self.members(); end
end

Struct::Group = Etc::Group

class Struct::Key
  def char(); end

  def char=(_); end

  def combined_char(); end

  def combined_char=(_); end

  def with_meta(); end

  def with_meta=(_); end
end

class Struct::Key
  def self.[](*arg); end

  def self.members(); end
end

class Struct::MenuInfo
  def list(); end

  def list=(_); end

  def target(); end

  def target=(_); end
end

class Struct::MenuInfo
  def self.[](*arg); end

  def self.members(); end
end

Struct::Passwd = Etc::Passwd

Struct::Tms = Process::Tms

class Symbol
  def ends_with?(*arg); end

  def starts_with?(*arg); end
end

class Sync
  VERSION = ::T.let(nil, ::T.untyped)
end

module TZInfo
  VERSION = ::T.let(nil, ::T.untyped)
end

class Tempfile
  def _close(); end

  def inspect(); end
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Tempfile::Remover
  def call(*args); end

  def initialize(tmpfile); end
end

class Tempfile::Remover
end

module Term::ANSIColor
  ATTRIBUTE_NAMES = ::T.let(nil, ::T.untyped)
  COLORED_REGEXP = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
  VERSION_ARRAY = ::T.let(nil, ::T.untyped)
  VERSION_BUILD = ::T.let(nil, ::T.untyped)
  VERSION_MAJOR = ::T.let(nil, ::T.untyped)
  VERSION_MINOR = ::T.let(nil, ::T.untyped)
end

module Thor::RakeCompat
  include ::Rake::DSL
  include ::Rake::FileUtilsExt
end

class Thor::Shell::Color
  def are_colors_supported?(); end
end

class Time
  include ::DateAndTime::Zones
  def acts_like_time?(); end

  def ago(seconds); end

  def at_beginning_of_hour(); end

  def at_beginning_of_minute(); end

  def at_end_of_hour(); end

  def at_end_of_minute(); end

  def beginning_of_hour(); end

  def beginning_of_minute(); end

  def change(options); end

  def compare_with_coercion(other); end

  def compare_without_coercion(arg); end

  def end_of_hour(); end

  def end_of_minute(); end

  def eql_with_coercion(other); end

  def eql_without_coercion(arg); end

  def formatted_offset(colon=T.unsafe(nil), alternate_utc_string=T.unsafe(nil)); end

  def in(seconds); end

  def minus_with_coercion(other); end

  def minus_with_duration(other); end

  def minus_without_coercion(other); end

  def minus_without_duration(arg); end

  def next_day(days=T.unsafe(nil)); end

  def next_month(months=T.unsafe(nil)); end

  def next_year(years=T.unsafe(nil)); end

  def plus_with_duration(other); end

  def plus_without_duration(arg); end

  def prev_day(days=T.unsafe(nil)); end

  def prev_month(months=T.unsafe(nil)); end

  def prev_year(years=T.unsafe(nil)); end

  def rfc3339(fraction_digits=T.unsafe(nil)); end

  def sec_fraction(); end

  def seconds_since_midnight(); end

  def seconds_until_end_of_day(); end

  def since(seconds); end

  def to_default_s(); end
  COMMON_YEAR_DAYS_IN_MONTH = ::T.let(nil, ::T.untyped)
  DATE_FORMATS = ::T.let(nil, ::T.untyped)
end

class Time
  def self.===(other); end

  def self.at_with_coercion(*args); end

  def self.at_without_coercion(*arg); end

  def self.days_in_month(month, year=T.unsafe(nil)); end

  def self.days_in_year(year=T.unsafe(nil)); end

  def self.find_zone(time_zone); end

  def self.find_zone!(time_zone); end

  def self.rfc3339(str); end

  def self.use_zone(time_zone); end

  def self.zone_default(); end

  def self.zone_default=(zone_default); end
end

module Tins
  VERSION = ::T.let(nil, ::T.untyped)
  VERSION_ARRAY = ::T.let(nil, ::T.untyped)
  VERSION_BUILD = ::T.let(nil, ::T.untyped)
  VERSION_MAJOR = ::T.let(nil, ::T.untyped)
  VERSION_MINOR = ::T.let(nil, ::T.untyped)
end

module Tins::Delegate
  UNSET = ::T.let(nil, ::T.untyped)
end

module Tins::FileBinary::Constants
  BINARY = ::T.let(nil, ::T.untyped)
  SEEK_SET = ::T.let(nil, ::T.untyped)
  ZERO = ::T.let(nil, ::T.untyped)
end

module Tins::GO::EnumerableExtension
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

module Tins::Implement
  MESSAGES = ::T.let(nil, ::T.untyped)
end

module Tins::NULL
  extend ::Tins::Null
end

module Tins::SexySingleton
  def self.__init__(klass); end

  def self.included(klass); end
end

module Tins::StringVersion
  LEVELS = ::T.let(nil, ::T.untyped)
  SYMBOLS = ::T.let(nil, ::T.untyped)
end

class Tins::Token
  BASE16_ALPHABET = ::T.let(nil, ::T.untyped)
  BASE32_ALPHABET = ::T.let(nil, ::T.untyped)
  BASE32_EXTENDED_HEX_ALPHABET = ::T.let(nil, ::T.untyped)
  BASE64_ALPHABET = ::T.let(nil, ::T.untyped)
  BASE64_URL_FILENAME_SAFE_ALPHABET = ::T.let(nil, ::T.untyped)
  DEFAULT_ALPHABET = ::T.let(nil, ::T.untyped)
end

module Tins::Unit
  PREFIX_F = ::T.let(nil, ::T.untyped)
  PREFIX_LC = ::T.let(nil, ::T.untyped)
  PREFIX_UC = ::T.let(nil, ::T.untyped)
end

class Tins::Unit::UnitParser
  NUMBER = ::T.let(nil, ::T.untyped)
end

class TracePoint
  def eval_script(); end

  def instruction_sequence(); end

  def parameters(); end
end

class TracePoint
  def self.new(*events); end
end

class TrueClass
  include ::JSON::Ext::Generator::GeneratorMethods::TrueClass
end

module URI
  include ::URI::RFC2396_REGEXP
end

class URI::FTP
  def self.new2(user, password, host, port, path, typecode=T.unsafe(nil), arg_check=T.unsafe(nil)); end
end

class URI::File
  def check_password(user); end

  def check_user(user); end

  def check_userinfo(user); end

  def set_userinfo(v); end
  COMPONENT = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
end

class URI::File
end

class URI::LDAP
  def attributes(); end

  def attributes=(val); end

  def dn(); end

  def dn=(val); end

  def extensions(); end

  def extensions=(val); end

  def filter(); end

  def filter=(val); end

  def initialize(*arg); end

  def scope(); end

  def scope=(val); end

  def set_attributes(val); end

  def set_dn(val); end

  def set_extensions(val); end

  def set_filter(val); end

  def set_scope(val); end
end

class URI::MailTo
  def initialize(*arg); end
end

URI::Parser = URI::RFC2396_Parser

URI::REGEXP = URI::RFC2396_REGEXP

class URI::RFC2396_Parser
  def initialize(opts=T.unsafe(nil)); end
end

class URI::RFC3986_Parser
  def join(*uris); end

  def parse(uri); end

  def regexp(); end

  def split(uri); end
  RFC3986_relative_ref = ::T.let(nil, ::T.untyped)
end

module URI::Util
  def self.make_components_hash(klass, array_hash); end
end

module URI
  extend ::URI::Escape
  def self.get_encoding(label); end
end

module UnicodeNormalize
end

module UnicodeNormalize
end

module Warning
  extend ::Warning
end

class WeakRef
  def initialize(orig); end
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

module Zeitwerk::ExplicitNamespace
  extend ::Zeitwerk::RealModName
end

module Zip
  CDIR_ENTRY_STATIC_HEADER_LENGTH = ::T.let(nil, ::T.untyped)
  CENTRAL_DIRECTORY_ENTRY_SIGNATURE = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHODS = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_AES = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_BZIP2 = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_DEFLATE = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_DEFLATE_64 = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_IBM_CMPSC = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_IBM_LZ77 = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_IBM_TERSE = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_IMPLODE = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_JPEG = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_LZMA = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_PKWARE_DCLI = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_PPMD = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_REDUCE_1 = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_REDUCE_2 = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_REDUCE_3 = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_REDUCE_4 = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_SHRINK = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_STORE = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_WAVPACK = ::T.let(nil, ::T.untyped)
  FILE_TYPE_DIR = ::T.let(nil, ::T.untyped)
  FILE_TYPE_FILE = ::T.let(nil, ::T.untyped)
  FILE_TYPE_SYMLINK = ::T.let(nil, ::T.untyped)
  FSTYPES = ::T.let(nil, ::T.untyped)
  FSTYPE_ACORN = ::T.let(nil, ::T.untyped)
  FSTYPE_AMIGA = ::T.let(nil, ::T.untyped)
  FSTYPE_ATARI = ::T.let(nil, ::T.untyped)
  FSTYPE_ATHEOS = ::T.let(nil, ::T.untyped)
  FSTYPE_BEOS = ::T.let(nil, ::T.untyped)
  FSTYPE_CPM = ::T.let(nil, ::T.untyped)
  FSTYPE_FAT = ::T.let(nil, ::T.untyped)
  FSTYPE_HPFS = ::T.let(nil, ::T.untyped)
  FSTYPE_MAC = ::T.let(nil, ::T.untyped)
  FSTYPE_MAC_OSX = ::T.let(nil, ::T.untyped)
  FSTYPE_MVS = ::T.let(nil, ::T.untyped)
  FSTYPE_NTFS = ::T.let(nil, ::T.untyped)
  FSTYPE_QDOS = ::T.let(nil, ::T.untyped)
  FSTYPE_TANDEM = ::T.let(nil, ::T.untyped)
  FSTYPE_THEOS = ::T.let(nil, ::T.untyped)
  FSTYPE_TOPS20 = ::T.let(nil, ::T.untyped)
  FSTYPE_UNIX = ::T.let(nil, ::T.untyped)
  FSTYPE_VFAT = ::T.let(nil, ::T.untyped)
  FSTYPE_VMS = ::T.let(nil, ::T.untyped)
  FSTYPE_VM_CMS = ::T.let(nil, ::T.untyped)
  FSTYPE_Z_SYSTEM = ::T.let(nil, ::T.untyped)
  LOCAL_ENTRY_SIGNATURE = ::T.let(nil, ::T.untyped)
  LOCAL_ENTRY_STATIC_HEADER_LENGTH = ::T.let(nil, ::T.untyped)
  LOCAL_ENTRY_TRAILING_DESCRIPTOR_LENGTH = ::T.let(nil, ::T.untyped)
  RUNNING_ON_WINDOWS = ::T.let(nil, ::T.untyped)
  VERSION_MADE_BY = ::T.let(nil, ::T.untyped)
  VERSION_NEEDED_TO_EXTRACT = ::T.let(nil, ::T.untyped)
  VERSION_NEEDED_TO_EXTRACT_ZIP64 = ::T.let(nil, ::T.untyped)
end

class Zip::CentralDirectory
  END_OF_CDS = ::T.let(nil, ::T.untyped)
  MAX_END_OF_CDS_SIZE = ::T.let(nil, ::T.untyped)
  STATIC_EOCD_SIZE = ::T.let(nil, ::T.untyped)
  ZIP64_END_OF_CDS = ::T.let(nil, ::T.untyped)
  ZIP64_EOCD_LOCATOR = ::T.let(nil, ::T.untyped)
end

class Zip::Decompressor
  CHUNK_SIZE = ::T.let(nil, ::T.untyped)
end

class Zip::DecryptedIo
  CHUNK_SIZE = ::T.let(nil, ::T.untyped)
end

class Zip::Entry
  DEFLATED = ::T.let(nil, ::T.untyped)
  EFS = ::T.let(nil, ::T.untyped)
  STORED = ::T.let(nil, ::T.untyped)
end

class Zip::ExtraField
  ID_MAP = ::T.let(nil, ::T.untyped)
end

class Zip::ExtraField::IUnix
  HEADER_ID = ::T.let(nil, ::T.untyped)
end

class Zip::ExtraField::NTFS
  HEADER_ID = ::T.let(nil, ::T.untyped)
  SEC_TO_UNIX_EPOCH = ::T.let(nil, ::T.untyped)
  WINDOWS_TICK = ::T.let(nil, ::T.untyped)
end

class Zip::ExtraField::OldUnix
  HEADER_ID = ::T.let(nil, ::T.untyped)
end

class Zip::ExtraField::UniversalTime
  ATIME_MASK = ::T.let(nil, ::T.untyped)
  CTIME_MASK = ::T.let(nil, ::T.untyped)
  HEADER_ID = ::T.let(nil, ::T.untyped)
  MTIME_MASK = ::T.let(nil, ::T.untyped)
end

class Zip::ExtraField::Zip64
  HEADER_ID = ::T.let(nil, ::T.untyped)
end

class Zip::ExtraField::Zip64Placeholder
  HEADER_ID = ::T.let(nil, ::T.untyped)
end

class Zip::File
  CREATE = ::T.let(nil, ::T.untyped)
  DATA_BUFFER_SIZE = ::T.let(nil, ::T.untyped)
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
  IO_METHODS = ::T.let(nil, ::T.untyped)
  MAX_SEGMENT_SIZE = ::T.let(nil, ::T.untyped)
  MIN_SEGMENT_SIZE = ::T.let(nil, ::T.untyped)
  SPLIT_SIGNATURE = ::T.let(nil, ::T.untyped)
  ZIP64_EOCD_SIGNATURE = ::T.let(nil, ::T.untyped)
end

module Zip::IOExtras
  CHUNK_SIZE = ::T.let(nil, ::T.untyped)
  RANGE_ALL = ::T.let(nil, ::T.untyped)
end

module Zip::IOExtras::AbstractInputStream
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class Zip::InputStream
  CHUNK_SIZE = ::T.let(nil, ::T.untyped)
end

module Zip::NullInputStream
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class Zip::StreamableStream
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

Zip::ZipCompressionMethodError = Zip::CompressionMethodError

Zip::ZipDestinationFileExistsError = Zip::DestinationFileExistsError

Zip::ZipEntryExistsError = Zip::EntryExistsError

Zip::ZipEntryNameError = Zip::EntryNameError

Zip::ZipError = Zip::Error

Zip::ZipInternalError = Zip::InternalError

class Zlib::Deflate
  def initialize(*arg); end
end

class Zlib::GzipReader
  def initialize(*arg); end
end

class Zlib::GzipWriter
  def initialize(*arg); end
end

class Zlib::Inflate
  def initialize(*arg); end
end
