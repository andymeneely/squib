# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/gdk_pixbuf2/all/gdk_pixbuf2.rbi
#
# gdk_pixbuf2-3.4.9

module GdkPixbuf
  def self.pixbuf_error_quark(*arguments, &block); end
end
class GdkPixbuf::Loader < GObjectIntrospection::Loader
  def define_constant(name, info); end
  def post_load(repository, namespace); end
  def pre_load(repository, namespace); end
  def require_libraries; end
  def rubyish_method_name(function_info, options = nil); end
end
class GdkPixbuf::Pixbuf < GLib::Object
  def __deprecatable_78240_composite__(options); end
  def add_alpha(*arguments, &block); end
  def apply_embedded_orientation(*arguments, &block); end
  def bits_per_sample(*arguments, &block); end
  def byte_length(*arguments, &block); end
  def colorspace(*arguments, &block); end
  def composite!(*margs, &mblock); end
  def composite(*margs, &mblock); end
  def composite_color(*arguments, &block); end
  def composite_color_simple(*arguments, &block); end
  def composite_raw(*arguments, &block); end
  def copy(*arguments, &block); end
  def copy_area(*arguments, &block); end
  def copy_options(*arguments, &block); end
  def dup; end
  def fill!(pixel); end
  def fill(*arguments, &block); end
  def flip(*arguments, &block); end
  def get_option(*arguments, &block); end
  def has_alpha?(*arguments, &block); end
  def height(*arguments, &block); end
  def initialize(*args); end
  def initialize_new(*arguments, &block); end
  def initialize_new_from_bytes(*arguments, &block); end
  def initialize_new_from_data(*arguments, &block); end
  def initialize_new_from_file(*arguments, &block); end
  def initialize_new_from_file_at_scale(*arguments, &block); end
  def initialize_new_from_file_at_size(*arguments, &block); end
  def initialize_new_from_inline(*arguments, &block); end
  def initialize_new_from_resource(*arguments, &block); end
  def initialize_new_from_resource_at_scale(*arguments, &block); end
  def initialize_new_from_stream(*arguments, &block); end
  def initialize_new_from_stream_at_scale(*arguments, &block); end
  def initialize_new_from_stream_finish(*arguments, &block); end
  def initialize_new_from_xpm_data(*arguments, &block); end
  def initialize_raw(*arguments, &block); end
  def initialize_with_hash(options); end
  def n_channels(*arguments, &block); end
  def new_subpixbuf(*margs, &mblock); end
  def options(*arguments, &block); end
  def pixel_bytes; end
  def pixels(*arguments, &block); end
  def read_pixel_bytes(*arguments, &block); end
  def read_pixels(*arguments, &block); end
  def remove_option(*arguments, &block); end
  def rotate(angle); end
  def rotate_simple(*arguments, &block); end
  def row_stride(*arguments, &block); end
  def rowstride(*arguments, &block); end
  def saturate_and_pixelate(saturation, pixelate); end
  def saturate_and_pixelate_raw(*arguments, &block); end
  def save(*args); end
  def save_to_buffer(*margs, &mblock); end
  def save_to_bufferv(*arguments, &block); end
  def save_to_callbackv(*arguments, &block); end
  def save_to_streamv(*arguments, &block); end
  def save_to_streamv_async(*arguments, &block); end
  def savev(*arguments, &block); end
  def scale!(source, *args); end
  def scale(*args); end
  def scale_raw(*arguments, &block); end
  def scale_simple(*arguments, &block); end
  def self.calculate_rowstride(*arguments, &block); end
  def self.formats(*arguments, &block); end
  def self.from_pixdata(*arguments, &block); end
  def self.get_file_info(*arguments, &block); end
  def self.get_file_info_async(*arguments, &block); end
  def self.get_file_info_finish(*arguments, &block); end
  def self.new(*args, &block); end
  def self.new_from_stream_async(*arguments, &block); end
  def self.new_from_stream_at_scale_async(*arguments, &block); end
  def self.save_to_stream_finish(*arguments, &block); end
  def set_option(*arguments, &block); end
  def subpixbuf(*arguments, &block); end
  def width(*arguments, &block); end
  extend GLib::Deprecatable
  extend GObjectIntrospection::Loader::VirtualFunctionImplementable
end
class GdkPixbuf::PixbufLoader < GLib::Object
  def animation(*arguments, &block); end
  def close(*arguments, &block); end
  def format(*arguments, &block); end
  def initialize(*arguments, &block); end
  def initialize_new(*arguments, &block); end
  def initialize_new_with_mime_type(*arguments, &block); end
  def initialize_new_with_type(*arguments, &block); end
  def last_write(data); end
  def parent_instance; end
  def pixbuf(*arguments, &block); end
  def priv; end
  def set_size(*arguments, &block); end
  def write(*arguments, &block); end
  def write_bytes(*arguments, &block); end
  extend GObjectIntrospection::Loader::VirtualFunctionImplementable
end
class GdkPixbuf::PixbufFormat < GLib::Boxed
  def copy(*arguments, &block); end
  def description(*arguments, &block); end
  def disabled=(*arguments, &block); end
  def disabled?(*arguments, &block); end
  def domain(*margs, &mblock); end
  def extensions(*arguments, &block); end
  def free(*arguments, &block); end
  def license(*arguments, &block); end
  def mime_types(*arguments, &block); end
  def name(*arguments, &block); end
  def save_option_supported?(*arguments, &block); end
  def scalable?(*arguments, &block); end
  def set_disabled(*arguments, &block); end
  def signature(*margs, &mblock); end
  def writable?(*arguments, &block); end
  extend GLib::Deprecatable
end
class GdkPixbuf::Pixdata
  def deserialize(*arguments, &block); end
  def height; end
  def height=(value); end
  def length; end
  def length=(value); end
  def magic; end
  def magic=(value); end
  def pixdata_type; end
  def pixdata_type=(value); end
  def pixel_data; end
  def pixel_data=(value); end
  def rowstride; end
  def rowstride=(value); end
  def self.from_pixbuf(*margs, &mblock); end
  def serialize(*arguments, &block); end
  def to_csource(*arguments, &block); end
  def width; end
  def width=(value); end
  extend GLib::Deprecatable
end
module Gdk
  extend GLib::Deprecatable
end
module GdkPixbuf::Version
  def self.or_later?(major, minor, micro = nil); end
end
class GdkPixbuf::Colorspace < GLib::Enum
end
class GdkPixbuf::InterpType < GLib::Enum
end
class GdkPixbuf::PixbufAlphaMode < GLib::Enum
end
class GdkPixbuf::PixbufAnimation < GLib::Object
  def get_iter(*arguments, &block); end
  def height(*arguments, &block); end
  def initialize(*arguments, &block); end
  def initialize_new_from_file(*arguments, &block); end
  def initialize_new_from_resource(*arguments, &block); end
  def initialize_new_from_stream(*arguments, &block); end
  def initialize_new_from_stream_finish(*arguments, &block); end
  def self.new_from_stream_async(*arguments, &block); end
  def static_image(*arguments, &block); end
  def static_image?(*arguments, &block); end
  def width(*arguments, &block); end
  extend GObjectIntrospection::Loader::VirtualFunctionImplementable
end
class GdkPixbuf::PixbufAnimationIter < GLib::Object
  def advance(*arguments, &block); end
  def delay_time(*arguments, &block); end
  def on_currently_loading_frame?(*arguments, &block); end
  def pixbuf(*arguments, &block); end
  extend GObjectIntrospection::Loader::VirtualFunctionImplementable
end
class GdkPixbuf::PixbufRotation < GLib::Enum
end
class GdkPixbuf::PixbufSimpleAnim < GdkPixbuf::PixbufAnimation
  def add_frame(*arguments, &block); end
  def initialize(*arguments, &block); end
  def initialize_new(*arguments, &block); end
  def loop=(*arguments, &block); end
  def loop?(*arguments, &block); end
  def set_loop(*arguments, &block); end
  extend GObjectIntrospection::Loader::VirtualFunctionImplementable
end
class GdkPixbuf::PixbufSimpleAnimIter < GdkPixbuf::PixbufAnimationIter
  extend GObjectIntrospection::Loader::VirtualFunctionImplementable
end
module GdkPixbuf::PixdataDumpType
end
module GdkPixbuf::PixdataType
end
