# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/nenv/all/nenv.rbi
#
# nenv-0.3.0

module Nenv
  def self.instance; end
  def self.method_missing(meth, *args); end
  def self.reset; end
  def self.respond_to?(meth); end
end
class Nenv::Environment
  def _namespaced_sanitize(meth); end
  def _sanitize(meth); end
  def create_method(meth, &block); end
  def initialize(namespace = nil); end
  def self._create_env_accessor(klass, meth, &block); end
  def self._create_env_reader(klass, meth, &block); end
  def self._create_env_writer(klass, meth, &block); end
  def self._fail_if_accessor_exists(klass, meth); end
  def self.create_method(meth, &block); end
end
module Nenv::Environment::Dumper::Default
  def self.call(raw_value); end
end
module Nenv::Environment::Dumper
  def self.setup(&callback); end
end
module Nenv::Environment::Loader::Predicate
  def self.call(raw_value); end
end
module Nenv::Environment::Loader::Default
  def self.call(raw_value); end
end
module Nenv::Environment::Loader
  def self.setup(meth, &callback); end
end
class Nenv::Environment::Error < ArgumentError
end
class Nenv::Environment::MethodError < Nenv::Environment::Error
  def initialize(meth); end
end
class Nenv::Environment::AlreadyExistsError < Nenv::Environment::MethodError
  def message; end
end
class Nenv::AutoEnvironment < Nenv::Environment
  def method_missing(meth, *args); end
end
module Nenv::Builder
  def self.build(&block); end
end
class Object < BasicObject
  def Nenv(namespace = nil); end
end
