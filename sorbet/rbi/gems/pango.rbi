# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/pango/all/pango.rbi
#
# pango-3.4.9

module Pango
  def self.attr_type_get_name(*arguments, &block); end
  def self.attr_type_register(*arguments, &block); end
  def self.bidi_type_for_unichar(*arguments, &block); end
  def self.break(*arguments, &block); end
  def self.config_key_get(*arguments, &block); end
  def self.config_key_get_system(*arguments, &block); end
  def self.default_break(*arguments, &block); end
  def self.extents_to_pixels(*arguments, &block); end
  def self.find_base_dir(*arguments, &block); end
  def self.find_paragraph_boundary(*arguments, &block); end
  def self.font_description_from_string(*arguments, &block); end
  def self.font_get_kerning(*arguments, &block); end
  def self.get_log_attrs(*arguments, &block); end
  def self.get_mirror_char(*arguments, &block); end
  def self.get_unknown_glyph(*arguments, &block); end
  def self.gravity_get_for_matrix(*arguments, &block); end
  def self.gravity_get_for_script(*arguments, &block); end
  def self.gravity_get_for_script_and_width(*arguments, &block); end
  def self.gravity_to_rotation(*arguments, &block); end
  def self.itemize(*arguments, &block); end
  def self.itemize_with_base_dir(*arguments, &block); end
  def self.language_from_string(*arguments, &block); end
  def self.language_get_default(*arguments, &block); end
  def self.lib_subdirectory(*arguments, &block); end
  def self.log2vis_get_embedding_levels(*arguments, &block); end
  def self.lookup_aliases(*arguments, &block); end
  def self.markup_parser_finish(*arguments, &block); end
  def self.markup_parser_new(*arguments, &block); end
  def self.module_register(*arguments, &block); end
  def self.parse_enum(*arguments, &block); end
  def self.parse_markup(markup_text, accel_marker = nil); end
  def self.parse_markup_raw(*arguments, &block); end
  def self.parse_stretch(*arguments, &block); end
  def self.parse_style(*arguments, &block); end
  def self.parse_variant(*arguments, &block); end
  def self.parse_weight(*arguments, &block); end
  def self.pixels(arg0); end
  def self.quantize_line_geometry(*arguments, &block); end
  def self.read_line(*arguments, &block); end
  def self.render(*arguments, &block); end
  def self.render_layout(*arguments, &block); end
  def self.render_layout_line(*arguments, &block); end
  def self.render_layout_line_subpixel(*arguments, &block); end
  def self.render_layout_subpixel(*arguments, &block); end
  def self.render_transformed(*arguments, &block); end
  def self.reorder_items(*arguments, &block); end
  def self.scan_int(*arguments, &block); end
  def self.scan_string(*arguments, &block); end
  def self.scan_word(*arguments, &block); end
  def self.script_for_unichar(*arguments, &block); end
  def self.script_get_sample_language(*arguments, &block); end
  def self.shape(*arguments, &block); end
  def self.shape_full(*arguments, &block); end
  def self.shutdown_display(*arguments, &block); end
  def self.skip_space(*arguments, &block); end
  def self.split_file_list(*arguments, &block); end
  def self.sysconf_subdirectory(*arguments, &block); end
  def self.trim_string(*arguments, &block); end
  def self.unichar_direction(*arguments, &block); end
  def self.units_from_double(*arguments, &block); end
  def self.units_to_double(*arguments, &block); end
  def self.version(*arguments, &block); end
  def self.version_check(*arguments, &block); end
  def self.version_string(*arguments, &block); end
  def self.zero_width?(*arguments, &block); end
  extend GLib::Deprecatable
end
class Pango::Loader < GObjectIntrospection::Loader
  def convert_attribute_classes; end
  def load_field_reader(info, i, field_info, klass, name, method_name); end
  def load_method_info(info, klass, method_name); end
  def load_struct_info(info); end
  def post_load(repository, namespace); end
  def pre_load(repository, namespace); end
  def require_extension; end
  def require_libraries; end
end
class Pango::CairoLoader < GObjectIntrospection::Loader
  def load_function_info(info); end
  def post_load(repository, namespace); end
  def pre_load(repository, namespace); end
  def rubyish_class_name(info); end
end
class Pango::FcLoader < GObjectIntrospection::Loader
  def rubyish_class_name(info); end
end
class Pango::FT2Loader < GObjectIntrospection::Loader
  def rubyish_class_name(info); end
end
class Pango::OTLoader < GObjectIntrospection::Loader
  def rubyish_class_name(info); end
end
class Pango::Attribute < GLib::Boxed
  def ==(*arguments, &block); end
  def destroy(*arguments, &block); end
  def end_index; end
  def end_index=(value); end
  def init(*arguments, &block); end
  def klass; end
  def klass=(value); end
  def start_index; end
  def start_index=(value); end
end
class Pango::AttrBool < Pango::AttrInt
  def value; end
end
class Pango::AttrLanguage < Pango::Attribute
  def attr; end
  def attr=(value); end
  def initialize(arg0); end
  def value; end
  def value=(value); end
end
class Pango::AttrFamily < Pango::AttrString
  def initialize(arg0); end
end
class Pango::AttrStyle < Pango::AttrInt
  def initialize(arg0); end
  def value; end
end
class Pango::AttrWeight < Pango::AttrInt
  def initialize(arg0); end
  def value; end
end
class Pango::AttrVariant < Pango::AttrInt
  def initialize(arg0); end
  def value; end
end
class Pango::AttrStretch < Pango::AttrInt
  def initialize(arg0); end
  def value; end
end
class Pango::AttrSize < Pango::Attribute
  def absolute; end
  def absolute=(value); end
  def attr; end
  def attr=(value); end
  def initialize(arg0); end
  def size; end
  def size=(value); end
end
class Pango::AttrFontDesc < Pango::Attribute
  def attr; end
  def attr=(value); end
  def desc; end
  def desc=(value); end
  def initialize(arg0); end
end
class Pango::AttrForeground < Pango::AttrColor
  def initialize(arg0, arg1, arg2); end
end
class Pango::AttrBackground < Pango::AttrColor
  def initialize(arg0, arg1, arg2); end
end
class Pango::AttrUnderline < Pango::AttrInt
  def initialize(arg0); end
  def value; end
  extend GLib::Deprecatable
end
class Pango::AttrStrikethrough < Pango::AttrBool
  def initialize(arg0); end
end
class Pango::AttrRise < Pango::AttrInt
  def initialize(arg0); end
end
class Pango::AttrShape < Pango::Attribute
  def attr; end
  def attr=(value); end
  def copy_func; end
  def copy_func=(value); end
  def data; end
  def data=(value); end
  def destroy_func; end
  def destroy_func=(value); end
  def initialize(*arg0); end
  def ink_rect; end
  def ink_rect=(value); end
  def logical_rect; end
  def logical_rect=(value); end
end
class Pango::AttrScale < Pango::AttrFloat
  def initialize(arg0); end
  extend GLib::Deprecatable
end
class Pango::AttrFallback < Pango::AttrBool
  def initialize(arg0); end
end
class Pango::AttrLetterSpacing < Pango::AttrInt
  def initialize(arg0); end
end
class Pango::AttrUnderlineColor < Pango::AttrColor
  def initialize(arg0, arg1, arg2); end
end
class Pango::AttrStrikethroughColor < Pango::AttrColor
  def initialize(arg0, arg1, arg2); end
end
class Pango::AttrAbsoluteSize < Pango::AttrSize
  def initialize(arg0); end
end
class Pango::AttrGravity < Pango::AttrInt
  def initialize(arg0); end
  def value; end
end
class Pango::AttrGravityHint < Pango::AttrInt
  def initialize(arg0); end
  def value; end
end
class Pango::AttrFontFeatures < Pango::AttrString
  def attr; end
  def attr=(value); end
  def features; end
  def features=(value); end
  def initialize(arg0); end
end
class Pango::AttrForegroundAlpha < Pango::AttrInt
  def initialize(arg0); end
end
class Pango::AttrBackgroundAlpha < Pango::AttrInt
  def initialize(arg0); end
end
class Pango::AttrIterator < GLib::Boxed
  def attrs; end
  def destroy(*arguments, &block); end
  def get_font(*arguments, &block); end
  def next(*arguments, &block); end
  def range(*arguments, &block); end
end
class Pango::AttrList < GLib::Boxed
  def change(*arguments, &block); end
  def each(&block); end
  def filter(*arguments, &block); end
  def initialize(*arguments, &block); end
  def initialize_new(*arguments, &block); end
  def insert(arg0); end
  def insert_before(arg0); end
  def iterator; end
  def ref(*arguments, &block); end
  def splice(*arguments, &block); end
  def unref(*arguments, &block); end
  include Enumerable
end
class Pango::AttrType < GLib::Enum
  def to_class; end
end
class Pango::Color < GLib::Boxed
  def blue; end
  def blue=(value); end
  def copy(*arguments, &block); end
  def free(*arguments, &block); end
  def green; end
  def green=(value); end
  def initialize(red, green, blue); end
  def initialize_raw; end
  def inspect; end
  def parse(*arguments, &block); end
  def red; end
  def red=(value); end
  def to_a; end
  def to_s(*arguments, &block); end
end
class Pango::FontDescription < GLib::Boxed
  def ==(*arguments, &block); end
  def absolute_size=(*arguments, &block); end
  def better_match(*arguments, &block); end
  def copy(*arguments, &block); end
  def copy_static(*arguments, &block); end
  def family(*arguments, &block); end
  def family=(*arguments, &block); end
  def family_static=(*arguments, &block); end
  def free(*arguments, &block); end
  def gravity(*arguments, &block); end
  def gravity=(*arguments, &block); end
  def hash(*arguments, &block); end
  def initialize(*arguments, &block); end
  def initialize_new(*arguments, &block); end
  def inspect; end
  def merge(*arguments, &block); end
  def merge_static(*arguments, &block); end
  def self.from_string(*arguments, &block); end
  def self.new(description = nil); end
  def set_absolute_size(*arguments, &block); end
  def set_family(*arguments, &block); end
  def set_family_static(*arguments, &block); end
  def set_fields(*arguments, &block); end
  def set_gravity(*arguments, &block); end
  def set_size(*arguments, &block); end
  def set_stretch(*arguments, &block); end
  def set_style(*arguments, &block); end
  def set_variant(*arguments, &block); end
  def set_weight(*arguments, &block); end
  def size(*arguments, &block); end
  def size=(*arguments, &block); end
  def size_is_absolute?(*arguments, &block); end
  def stretch(*arguments, &block); end
  def stretch=(*arguments, &block); end
  def style(*arguments, &block); end
  def style=(*arguments, &block); end
  def to_filename(*arguments, &block); end
  def to_s(*arguments, &block); end
  def unset_fields(*arguments, &block); end
  def variant(*arguments, &block); end
  def variant=(*arguments, &block); end
  def weight(*arguments, &block); end
  def weight=(*arguments, &block); end
  extend GLib::Deprecatable
end
class Pango::Language < GLib::Boxed
  def includes_script(*arguments, &block); end
  def inspect; end
  def matches(*arguments, &block); end
  def sample_string(*arguments, &block); end
  def scripts(*arguments, &block); end
  def self.default(*arguments, &block); end
  def self.from_string(*arguments, &block); end
  def self.new(name = nil); end
  def to_s(*arguments, &block); end
end
class Pango::Layout < GLib::Object
  def alignment(*arguments, &block); end
  def alignment=(*arguments, &block); end
  def attributes(*arguments, &block); end
  def attributes=(*arguments, &block); end
  def auto_dir=(*arguments, &block); end
  def auto_dir?(*arguments, &block); end
  def baseline(*arguments, &block); end
  def character_count(*arguments, &block); end
  def context(*arguments, &block); end
  def context_changed(*arguments, &block); end
  def copy(*arguments, &block); end
  def ellipsize(*arguments, &block); end
  def ellipsize=(*arguments, &block); end
  def ellipsized?(*arguments, &block); end
  def extents(*arguments, &block); end
  def font_description(*arguments, &block); end
  def font_description=(description); end
  def get_cursor_pos(*arguments, &block); end
  def get_line(*arguments, &block); end
  def get_line_readonly(*arguments, &block); end
  def get_pixel_extents(*margs, &mblock); end
  def height(*arguments, &block); end
  def height=(*arguments, &block); end
  def indent(*arguments, &block); end
  def indent=(*arguments, &block); end
  def index_to_line_x(*arguments, &block); end
  def index_to_pos(*arguments, &block); end
  def initialize(*arguments, &block); end
  def initialize_new(*arguments, &block); end
  def iter(*arguments, &block); end
  def justify=(*arguments, &block); end
  def justify?(*arguments, &block); end
  def line_count(*arguments, &block); end
  def lines(*arguments, &block); end
  def lines_readonly(*arguments, &block); end
  def log_attrs(*arguments, &block); end
  def log_attrs_readonly(*arguments, &block); end
  def markup=(markup); end
  def move_cursor_visually(*arguments, &block); end
  def pixel_extents(*arguments, &block); end
  def pixel_size(*arguments, &block); end
  def serial(*arguments, &block); end
  def set_alignment(*arguments, &block); end
  def set_attributes(*arguments, &block); end
  def set_auto_dir(*arguments, &block); end
  def set_ellipsize(*arguments, &block); end
  def set_font_description(description); end
  def set_font_description_raw(*arguments, &block); end
  def set_height(*arguments, &block); end
  def set_indent(*arguments, &block); end
  def set_justify(*arguments, &block); end
  def set_markup(markup); end
  def set_markup_raw(*arguments, &block); end
  def set_markup_with_accel(*arguments, &block); end
  def set_single_paragraph_mode(*arguments, &block); end
  def set_spacing(*arguments, &block); end
  def set_tabs(*arguments, &block); end
  def set_text(text); end
  def set_text_raw(*arguments, &block); end
  def set_width(*arguments, &block); end
  def set_wrap(*arguments, &block); end
  def single_paragraph_mode=(*arguments, &block); end
  def single_paragraph_mode?(*arguments, &block); end
  def size(*arguments, &block); end
  def spacing(*arguments, &block); end
  def spacing=(*arguments, &block); end
  def tabs(*arguments, &block); end
  def tabs=(*arguments, &block); end
  def text(*arguments, &block); end
  def text=(text); end
  def unknown_glyphs_count(*arguments, &block); end
  def width(*arguments, &block); end
  def width=(*arguments, &block); end
  def wrap(*arguments, &block); end
  def wrap=(*arguments, &block); end
  def wrapped?(*arguments, &block); end
  def xy_to_index(*arguments, &block); end
  extend GLib::Deprecatable
  extend GObjectIntrospection::Loader::VirtualFunctionImplementable
end
class Pango::Rectangle
  def ascent; end
  def descent; end
  def dup; end
  def height; end
  def height=(value); end
  def initialize(x, y, width, height); end
  def initialize_raw; end
  def lbearing(*margs, &mblock); end
  def left_bearing; end
  def rbearing(*margs, &mblock); end
  def right_bearing; end
  def to_a; end
  def width; end
  def width=(value); end
  def x; end
  def x=(value); end
  def y; end
  def y=(value); end
  extend GLib::Deprecatable
end
class Pango::Matrix < GLib::Boxed
  def +(matrix); end
  def concat!(*arguments, &block); end
  def concat(matrix); end
  def copy(*arguments, &block); end
  def font_scale_factor(*arguments, &block); end
  def font_scale_factors(*arguments, &block); end
  def free(*arguments, &block); end
  def initialize(xx = nil, xy = nil, yx = nil, yy = nil, x0 = nil, y0 = nil); end
  def initialize_raw; end
  def rotate!(*arguments, &block); end
  def rotate(degree); end
  def scale!(*arguments, &block); end
  def scale(scale_x, scale_y); end
  def to_a; end
  def transform_distance(*arguments, &block); end
  def transform_pixel_rectangle(*arguments, &block); end
  def transform_point(*arguments, &block); end
  def transform_rectangle(*arguments, &block); end
  def translate!(*arguments, &block); end
  def translate(tx, ty); end
  def x0; end
  def x0=(value); end
  def xx; end
  def xx=(value); end
  def xy; end
  def xy=(value); end
  def y0; end
  def y0=(value); end
  def yx; end
  def yx=(value); end
  def yy; end
  def yy=(value); end
end
module Pango::Version
  def self.or_later?(major, minor, micro = nil); end
end
class Pango::Context < GLib::Object
  def base_dir(*arguments, &block); end
  def base_dir=(*arguments, &block); end
  def base_gravity(*arguments, &block); end
  def base_gravity=(*arguments, &block); end
  def changed(*arguments, &block); end
  def families(*arguments, &block); end
  def font_description(*arguments, &block); end
  def font_description=(*arguments, &block); end
  def font_map(*arguments, &block); end
  def font_map=(*arguments, &block); end
  def font_options(*arguments, &block); end
  def font_options=(*arguments, &block); end
  def get_metrics(*arguments, &block); end
  def gravity(*arguments, &block); end
  def gravity_hint(*arguments, &block); end
  def gravity_hint=(*arguments, &block); end
  def initialize(*arguments, &block); end
  def initialize_new(*arguments, &block); end
  def language(*arguments, &block); end
  def language=(*arguments, &block); end
  def load_font(*arguments, &block); end
  def load_fontset(*arguments, &block); end
  def matrix(*arguments, &block); end
  def matrix=(*arguments, &block); end
  def resolution(*arguments, &block); end
  def resolution=(*arguments, &block); end
  def serial(*arguments, &block); end
  def set_base_dir(*arguments, &block); end
  def set_base_gravity(*arguments, &block); end
  def set_font_description(*arguments, &block); end
  def set_font_map(*arguments, &block); end
  def set_font_options(*arguments, &block); end
  def set_gravity_hint(*arguments, &block); end
  def set_language(*arguments, &block); end
  def set_matrix(*arguments, &block); end
  def set_resolution(*arguments, &block); end
  def set_shape_renderer(*arguments, &block); end
  extend GLib::Deprecatable
  extend GObjectIntrospection::Loader::VirtualFunctionImplementable
end
class Pango::Gravity < GLib::Enum
  extend GLib::Deprecatable
end
class Pango::Renderer < GLib::Object
  def activate(*arguments, &block); end
  def active_count; end
  def deactivate(*arguments, &block); end
  def draw_error_underline(*arguments, &block); end
  def draw_glyph(*arguments, &block); end
  def draw_glyph_item(*arguments, &block); end
  def draw_glyphs(*arguments, &block); end
  def draw_layout(*arguments, &block); end
  def draw_layout_line(*arguments, &block); end
  def draw_rectangle(*arguments, &block); end
  def draw_trapezoid(*arguments, &block); end
  def get_alpha(*arguments, &block); end
  def get_color(*arguments, &block); end
  def layout(*arguments, &block); end
  def layout_line(*arguments, &block); end
  def matrix(*arguments, &block); end
  def matrix=(*arguments, &block); end
  def parent_instance; end
  def part_changed(*arguments, &block); end
  def priv; end
  def set_alpha(*arguments, &block); end
  def set_color(*arguments, &block); end
  def set_matrix(*arguments, &block); end
  def strikethrough?; end
  def underline; end
  extend GLib::Deprecatable
  extend GObjectIntrospection::Loader::VirtualFunctionImplementable
end
class Pango::Alignment < GLib::Enum
end
class Pango::Analysis
  def extra_attrs; end
  def extra_attrs=(value); end
  def flags; end
  def flags=(value); end
  def font; end
  def font=(value); end
  def gravity; end
  def gravity=(value); end
  def lang_engine; end
  def lang_engine=(value); end
  def language; end
  def language=(value); end
  def level; end
  def level=(value); end
  def script; end
  def script=(value); end
  def shape_engine; end
  def shape_engine=(value); end
end
class Pango::AttrClass
  def copy; end
  def destroy; end
  def equal; end
  def type; end
  def type=(value); end
end
class Pango::BidiType < GLib::Enum
end
class Pango::Coverage
  def get(*arguments, &block); end
  def max(*arguments, &block); end
  def set(*arguments, &block); end
  def to_bytes(*arguments, &block); end
  def unref(*arguments, &block); end
end
class Pango::CoverageLevel < GLib::Enum
end
class Pango::Direction < GLib::Enum
end
class Pango::EllipsizeMode < GLib::Enum
end
class Pango::Engine < GLib::Object
  def parent_instance; end
  extend GObjectIntrospection::Loader::VirtualFunctionImplementable
end
class Pango::EngineInfo
  def engine_type; end
  def engine_type=(value); end
  def id; end
  def id=(value); end
  def n_scripts; end
  def n_scripts=(value); end
  def render_type; end
  def render_type=(value); end
  def scripts; end
  def scripts=(value); end
end
class Pango::EngineLang < Pango::Engine
  def parent_instance; end
  extend GObjectIntrospection::Loader::VirtualFunctionImplementable
end
class Pango::EngineScriptInfo
  def langs; end
  def langs=(value); end
  def script; end
  def script=(value); end
end
class Pango::EngineShape < Pango::Engine
  def parent_instance; end
  extend GObjectIntrospection::Loader::VirtualFunctionImplementable
end
class Pango::Font < GLib::Object
  def describe(*arguments, &block); end
  def describe_with_absolute_size(*arguments, &block); end
  def find_shaper(*arguments, &block); end
  def font_map(*arguments, &block); end
  def get_glyph_extents(*arguments, &block); end
  def get_metrics(*arguments, &block); end
  def parent_instance; end
  def self.descriptions_free(*arguments, &block); end
  extend GObjectIntrospection::Loader::VirtualFunctionImplementable
end
class Pango::FontFace < GLib::Object
  def describe(*arguments, &block); end
  def face_name(*arguments, &block); end
  def parent_instance; end
  def sizes(*arguments, &block); end
  def synthesized?(*arguments, &block); end
  extend GObjectIntrospection::Loader::VirtualFunctionImplementable
end
class Pango::FontFamily < GLib::Object
  def faces(*arguments, &block); end
  def monospace?(*arguments, &block); end
  def name(*arguments, &block); end
  def parent_instance; end
  extend GObjectIntrospection::Loader::VirtualFunctionImplementable
end
class Pango::FontMap < GLib::Object
  def changed(*arguments, &block); end
  def create_context(*arguments, &block); end
  def families(*arguments, &block); end
  def load_font(*arguments, &block); end
  def load_fontset(*arguments, &block); end
  def parent_instance; end
  def serial(*arguments, &block); end
  def shape_engine_type(*arguments, &block); end
  extend GObjectIntrospection::Loader::VirtualFunctionImplementable
end
class Pango::FontMask < GLib::Flags
  def family?; end
  def gravity?; end
  def size?; end
  def stretch?; end
  def style?; end
  def variant?; end
  def weight?; end
end
class Pango::FontMetrics < GLib::Boxed
  def approximate_char_width(*arguments, &block); end
  def approximate_digit_width(*arguments, &block); end
  def ascent(*arguments, &block); end
  def descent(*arguments, &block); end
  def initialize(*arguments, &block); end
  def initialize_new(*arguments, &block); end
  def ref(*arguments, &block); end
  def ref_count; end
  def strikethrough_position(*arguments, &block); end
  def strikethrough_thickness(*arguments, &block); end
  def underline_position(*arguments, &block); end
  def underline_thickness(*arguments, &block); end
  def unref(*arguments, &block); end
end
class Pango::Fontset < GLib::Object
  def each(*arguments, &block); end
  def get_font(*arguments, &block); end
  def metrics(*arguments, &block); end
  def parent_instance; end
  extend GObjectIntrospection::Loader::VirtualFunctionImplementable
  include Enumerable
end
class Pango::FontsetSimple < Pango::Fontset
  def append(*arguments, &block); end
  def initialize(*arguments, &block); end
  def initialize_new(*arguments, &block); end
  def size(*arguments, &block); end
  extend GObjectIntrospection::Loader::VirtualFunctionImplementable
end
class Pango::GlyphGeometry
  def width; end
  def width=(value); end
  def x_offset; end
  def x_offset=(value); end
  def y_offset; end
  def y_offset=(value); end
end
class Pango::GlyphInfo
  def attr; end
  def attr=(value); end
  def geometry; end
  def geometry=(value); end
  def glyph; end
  def glyph=(value); end
end
class Pango::GlyphItem < GLib::Boxed
  def apply_attrs(*arguments, &block); end
  def copy(*arguments, &block); end
  def free(*arguments, &block); end
  def get_logical_widths(*arguments, &block); end
  def glyphs; end
  def glyphs=(value); end
  def item; end
  def item=(value); end
  def letter_space(*arguments, &block); end
  def split(*arguments, &block); end
end
class Pango::GlyphItemIter < GLib::Boxed
  def copy(*arguments, &block); end
  def end_char; end
  def end_char=(value); end
  def end_glyph; end
  def end_glyph=(value); end
  def end_index; end
  def end_index=(value); end
  def free(*arguments, &block); end
  def glyph_item; end
  def glyph_item=(value); end
  def init_end(*arguments, &block); end
  def init_start(*arguments, &block); end
  def next_cluster(*arguments, &block); end
  def prev_cluster(*arguments, &block); end
  def start_char; end
  def start_char=(value); end
  def start_glyph; end
  def start_glyph=(value); end
  def start_index; end
  def start_index=(value); end
  def text; end
  def text=(value); end
end
class Pango::GlyphString < GLib::Boxed
  def copy(*arguments, &block); end
  def extents(*arguments, &block); end
  def extents_range(*arguments, &block); end
  def free(*arguments, &block); end
  def get_logical_widths(*arguments, &block); end
  def glyphs; end
  def glyphs=(value); end
  def index_to_x(*arguments, &block); end
  def initialize(*arguments, &block); end
  def initialize_new(*arguments, &block); end
  def log_clusters; end
  def log_clusters=(value); end
  def num_glyphs; end
  def num_glyphs=(value); end
  def set_size(*arguments, &block); end
  def size=(*arguments, &block); end
  def space; end
  def width(*arguments, &block); end
  def x_to_index(*arguments, &block); end
end
class Pango::GlyphVisAttr
  def cluster_start?; end
  def is_cluster_start=(value); end
end
class Pango::GravityHint < GLib::Enum
end
class Pango::IncludedModule
  def create; end
  def exit; end
  def init; end
  def list; end
end
class Pango::Item < GLib::Boxed
  def analysis; end
  def analysis=(value); end
  def copy(*arguments, &block); end
  def free(*arguments, &block); end
  def initialize(*arguments, &block); end
  def initialize_new(*arguments, &block); end
  def length; end
  def length=(value); end
  def num_chars; end
  def num_chars=(value); end
  def offset; end
  def offset=(value); end
  def split(*arguments, &block); end
end
class Pango::LayoutIter < GLib::Boxed
  def at_last_line(*arguments, &block); end
  def baseline(*arguments, &block); end
  def char_extents(*arguments, &block); end
  def cluster_extents(*arguments, &block); end
  def copy(*arguments, &block); end
  def free(*arguments, &block); end
  def index(*arguments, &block); end
  def layout(*arguments, &block); end
  def layout_extents(*arguments, &block); end
  def line(*arguments, &block); end
  def line_extents(*arguments, &block); end
  def line_readonly(*arguments, &block); end
  def line_yrange(*arguments, &block); end
  def next_char(*arguments, &block); end
  def next_cluster(*arguments, &block); end
  def next_line(*arguments, &block); end
  def next_run(*arguments, &block); end
  def run(*arguments, &block); end
  def run_extents(*arguments, &block); end
  def run_readonly(*arguments, &block); end
end
class Pango::LayoutLine < GLib::Boxed
  def extents(*arguments, &block); end
  def get_x_ranges(*arguments, &block); end
  def index_to_x(*arguments, &block); end
  def is_paragraph_start=(value); end
  def layout; end
  def layout=(value); end
  def length; end
  def length=(value); end
  def paragraph_start?; end
  def pixel_extents(*arguments, &block); end
  def ref(*arguments, &block); end
  def resolved_dir; end
  def resolved_dir=(value); end
  def runs; end
  def runs=(value); end
  def start_index; end
  def start_index=(value); end
  def unref(*arguments, &block); end
  def x_to_index(*arguments, &block); end
end
class Pango::LogAttr
  def backspace_deletes_character; end
  def backspace_deletes_character=(value); end
  def char_break?; end
  def cursor_position?; end
  def expandable_space?; end
  def is_char_break=(value); end
  def is_cursor_position=(value); end
  def is_expandable_space=(value); end
  def is_line_break=(value); end
  def is_mandatory_break=(value); end
  def is_sentence_boundary=(value); end
  def is_sentence_end=(value); end
  def is_sentence_start=(value); end
  def is_white=(value); end
  def is_word_boundary=(value); end
  def is_word_end=(value); end
  def is_word_start=(value); end
  def line_break?; end
  def mandatory_break?; end
  def sentence_boundary?; end
  def sentence_end?; end
  def sentence_start?; end
  def white?; end
  def word_boundary?; end
  def word_end?; end
  def word_start?; end
end
class Pango::RenderPart < GLib::Enum
end
class Pango::Script < GLib::Enum
end
class Pango::ScriptForLang
  def lang; end
  def lang=(value); end
  def scripts; end
  def scripts=(value); end
end
class Pango::ScriptIter
  def free(*arguments, &block); end
  def next(*arguments, &block); end
  def range(*arguments, &block); end
end
class Pango::Stretch < GLib::Enum
end
class Pango::Style < GLib::Enum
end
class Pango::TabAlign < GLib::Enum
end
class Pango::TabArray < GLib::Boxed
  def copy(*arguments, &block); end
  def free(*arguments, &block); end
  def get_tab(*arguments, &block); end
  def initialize(*arguments, &block); end
  def initialize_new(*arguments, &block); end
  def positions_in_pixels?(*arguments, &block); end
  def resize(*arguments, &block); end
  def set_tab(*arguments, &block); end
  def size(*arguments, &block); end
  def tabs(*arguments, &block); end
end
class Pango::Underline < GLib::Enum
end
class Pango::Variant < GLib::Enum
end
class Pango::Weight < GLib::Enum
end
class Pango::WrapMode < GLib::Enum
end
class Pango::AttrColor < Pango::Attribute
  def attr; end
  def attr=(value); end
  def color; end
  def color=(value); end
end
class Pango::AttrFloat < Pango::Attribute
  def attr; end
  def attr=(value); end
  def value; end
  def value=(value); end
end
class Pango::AttrInt < Pango::Attribute
  def attr; end
  def attr=(value); end
  def value; end
  def value=(value); end
end
class Pango::AttrString < Pango::Attribute
  def attr; end
  def attr=(value); end
  def value; end
  def value=(value); end
end
module Pango::CairoFont
  def scaled_font(*arguments, &block); end
  extend GObjectIntrospection::Loader::VirtualFunctionImplementable
end
module Pango::CairoFontMap
  def font_type(*arguments, &block); end
  def resolution(*arguments, &block); end
  def resolution=(*arguments, &block); end
  def self.default(*arguments, &block); end
  def self.new_for_font_type(*arguments, &block); end
  def set_default(*arguments, &block); end
  def set_resolution(*arguments, &block); end
  extend GObjectIntrospection::Loader::VirtualFunctionImplementable
end
class Anonymous_Pango_FontMap_8 < Pango::FontMap
end
class Pango::CairoFcFontMap < Anonymous_Pango_FontMap_8
  def dpi; end
  def library; end
  def parent_instance; end
  def serial; end
  extend GObjectIntrospection::Loader::VirtualFunctionImplementable
end
class Cairo::Context
  def create_pango_context(*arguments, &block); end
  def create_pango_layout(*arguments, &block); end
  def pango_error_underline_path(*arguments, &block); end
  def pango_glyph_string_path(*arguments, &block); end
  def pango_layout_line_path(*arguments, &block); end
  def pango_layout_path(*arguments, &block); end
  def show_pango_error_underline(*arguments, &block); end
  def show_pango_glyph_item(*arguments, &block); end
  def show_pango_glyph_string(*arguments, &block); end
  def show_pango_layout(*arguments, &block); end
  def show_pango_layout_line(*arguments, &block); end
  def update_pango_context(*arguments, &block); end
  def update_pango_layout(*arguments, &block); end
end
class Pango::FT2FontMap < Anonymous_Pango_FontMap_8
  def initialize(*arguments, &block); end
  def initialize_new(*arguments, &block); end
  def set_default_substitute(*arguments, &block); end
  def set_resolution(*arguments, &block); end
  def substitute_changed(*arguments, &block); end
  extend GObjectIntrospection::Loader::VirtualFunctionImplementable
end
