# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/gobject-introspection/all/gobject-introspection.rbi
#
# gobject-introspection-3.4.9

class GObjectIntrospection::ArrayType < GLib::Enum
end
class GObjectIntrospection::TypeTag < GLib::Enum
  def description(type_info); end
  def to_s; end
  def try_convert(type_info, value); end
end
class GObjectIntrospection::BaseInfo < GLib::Boxed
  def [](arg0); end
  def container; end
  def each; end
  def name; end
  def namespace; end
  def type; end
end
class GObjectIntrospection::InfoType < GLib::Enum
end
class GObjectIntrospection::CallableInfo < GObjectIntrospection::BaseInfo
  def args; end
  def caller_owns; end
  def can_throw_gerror?; end
  def compute_in_args; end
  def compute_require_callback; end
  def description; end
  def get_arg(arg0); end
  def have_return_value?; end
  def in_args; end
  def inspect; end
  def may_return_null?; end
  def n_args; end
  def n_in_args; end
  def n_out_args; end
  def n_required_in_args; end
  def out_args; end
  def require_callback?; end
  def required_in_args; end
  def return_type; end
  def signature; end
  extend GObjectIntrospection::CollectionReader
end
class GObjectIntrospection::FunctionInfo < GObjectIntrospection::CallableInfo
  def flags; end
  def inspect; end
  def invoke(arg0); end
  def property; end
  def set_unlock_gvl(arg0); end
  def symbol; end
  def unlock_gvl=(val); end
  def unlock_gvl?; end
  def vfunc; end
end
class GObjectIntrospection::FunctionInfoFlags < GLib::Flags
  def is_constructor?; end
  def is_getter?; end
  def is_method?; end
  def is_setter?; end
  def throws?; end
  def wraps_vfunc?; end
end
class GObjectIntrospection::MethodInfo < GObjectIntrospection::FunctionInfo
  def invoke(arg0, arg1); end
end
class GObjectIntrospection::ConstructorInfo < GObjectIntrospection::FunctionInfo
  def invoke(arg0, arg1); end
end
class GObjectIntrospection::CallbackInfo < GObjectIntrospection::CallableInfo
end
class GObjectIntrospection::SignalInfo < GObjectIntrospection::CallableInfo
  def class_closure; end
  def flags; end
  def true_stops_emit?; end
end
class GObjectIntrospection::VFuncInfo < GObjectIntrospection::CallableInfo
  def flags; end
  def invoker; end
  def offset; end
  def signal; end
end
class GObjectIntrospection::VFuncInfoFlags < GLib::Flags
  def must_chain_up?; end
  def must_not_override?; end
  def must_override?; end
  def throws?; end
end
class GObjectIntrospection::RegisteredTypeInfo < GObjectIntrospection::BaseInfo
  def description; end
  def gtype; end
  def try_convert(value); end
  def type_init; end
  def type_name; end
end
class GObjectIntrospection::StructInfo < GObjectIntrospection::RegisteredTypeInfo
  def __methods__(*arg0); end
  def alignment; end
  def fields; end
  def find_field(arg0); end
  def foreign?; end
  def get_field(arg0); end
  def get_field_value(arg0, arg1); end
  def get_method(arg0); end
  def gtype_struct?; end
  def methods; end
  def n_fields; end
  def n_methods; end
  def set_field_value(arg0, arg1, arg2); end
  def size; end
  extend GObjectIntrospection::CollectionReader
end
class GObjectIntrospection::BoxedInfo < GObjectIntrospection::RegisteredTypeInfo
  def __methods__(*arg0); end
  def fields; end
  def methods; end
  extend GObjectIntrospection::CollectionReader
end
class GObjectIntrospection::EnumInfo < GObjectIntrospection::RegisteredTypeInfo
  def error_domain; end
  def get_method(arg0); end
  def get_value(arg0); end
  def methods; end
  def n_methods; end
  def n_values; end
  def storage_type; end
  def values; end
end
class GObjectIntrospection::FlagsInfo < GObjectIntrospection::EnumInfo
end
class GObjectIntrospection::ObjectInfo < GObjectIntrospection::RegisteredTypeInfo
  def __methods__(*arg0); end
  def abstract?; end
  def class_struct; end
  def constants; end
  def fields; end
  def fundamental?; end
  def get_constant(arg0); end
  def get_field(arg0); end
  def get_field_value(arg0, arg1); end
  def get_interface(arg0); end
  def get_method(arg0); end
  def get_property(arg0); end
  def get_signal(arg0); end
  def get_value_function; end
  def get_vfunc(arg0); end
  def interfaces; end
  def methods; end
  def n_constants; end
  def n_fields; end
  def n_interfaces; end
  def n_methods; end
  def n_properties; end
  def n_signals; end
  def n_vfuncs; end
  def parent; end
  def properties; end
  def ref_function; end
  def set_field_value(arg0, arg1, arg2); end
  def set_value_function; end
  def signals; end
  def type_init; end
  def type_name; end
  def unref_function; end
  def vfuncs; end
  extend GObjectIntrospection::CollectionReader
end
class GObjectIntrospection::InterfaceInfo < GObjectIntrospection::RegisteredTypeInfo
  def __methods__(*arg0); end
  def constants; end
  def get_constant(arg0); end
  def get_method(arg0); end
  def get_prerequisite(arg0); end
  def get_property(arg0); end
  def get_signal(arg0); end
  def get_vfunc(arg0); end
  def iface_struct; end
  def methods; end
  def n_constants; end
  def n_methods; end
  def n_prerequisites; end
  def n_properties; end
  def n_signals; end
  def n_vfuncs; end
  def prerequisites; end
  def properties; end
  def signals; end
  def vfuncs; end
  extend GObjectIntrospection::CollectionReader
end
class GObjectIntrospection::UnionInfo < GObjectIntrospection::RegisteredTypeInfo
  def __methods__(*arg0); end
  def alignment; end
  def discriminated?; end
  def discriminator_offset; end
  def discriminator_type; end
  def fields; end
  def get_discriminator(arg0); end
  def get_field(arg0); end
  def get_field_value(arg0, arg1); end
  def get_method(arg0); end
  def methods; end
  def n_fields; end
  def n_methods; end
  def set_field_value(arg0, arg1, arg2); end
  def size; end
  extend GObjectIntrospection::CollectionReader
end
class GObjectIntrospection::ConstantInfo < GObjectIntrospection::BaseInfo
  def type; end
  def value; end
end
class GObjectIntrospection::ValueInfo < GObjectIntrospection::BaseInfo
  def value; end
end
class GObjectIntrospection::PropertyInfo < GObjectIntrospection::BaseInfo
  def flags; end
  def ownership_transfer; end
  def type; end
end
class GObjectIntrospection::FieldInfo < GObjectIntrospection::BaseInfo
  def flags; end
  def get_field(arg0); end
  def offset; end
  def set_field(arg0, arg1); end
  def size; end
  def type; end
end
class GObjectIntrospection::FieldInfoFlags < GLib::Flags
  def readable?; end
  def writable?; end
end
class GObjectIntrospection::ArgInfo < GObjectIntrospection::BaseInfo
  def caller_allocates?; end
  def closure; end
  def compute_gclosure?; end
  def destroy; end
  def direction; end
  def gclosure?; end
  def inspect; end
  def may_be_null?; end
  def optional?; end
  def output_buffer?; end
  def ownership_transfer; end
  def return_value?; end
  def scope; end
  def signature; end
  def type; end
end
class GObjectIntrospection::Direction < GLib::Enum
end
class GObjectIntrospection::ScopeType < GLib::Enum
end
class GObjectIntrospection::Transfer < GLib::Enum
end
class GObjectIntrospection::TypeInfo < GObjectIntrospection::BaseInfo
  def array_fixed_size; end
  def array_length; end
  def array_type; end
  def description; end
  def get_param_type(arg0); end
  def inspect; end
  def interface; end
  def pointer?; end
  def tag; end
  def try_convert(value); end
  def zero_terminated?; end
end
class GObjectIntrospection::UnresolvedInfo < GObjectIntrospection::BaseInfo
end
class GObjectIntrospection::Repository < GLib::Object
  def each(*namespaces); end
  def find(*arg0); end
  def get_dependencies(arg0); end
  def get_info(arg0, arg1); end
  def get_n_infos(arg0); end
  def get_version(arg0); end
  def loaded_namespaces; end
  def require(*arg0); end
  def self.default; end
  def self.default_raw; end
  def self.prepend_search_path(arg0); end
  def self.search_path; end
  include Enumerable
end
class GObjectIntrospection::RepositoryLoadFlags < GLib::Flags
  def g_irepository_load_flag_lazy?; end
end
class GObjectIntrospection::Loader
  def define_boxed(info); end
  def define_constant(name, info); end
  def define_enum(info); end
  def define_equal_style_setter(info, klass, method_name); end
  def define_error(info); end
  def define_inspect(info, klass, method_name); end
  def define_method(info, klass, method_name); end
  def define_module_function(target_module, name, function_info); end
  def define_singleton_method(klass, name, info); end
  def define_struct(info, options = nil); end
  def error_parent_class(info); end
  def field_name(field_info, klass); end
  def flags_class_name(info); end
  def initialize(base_module); end
  def initialize_post(object); end
  def load(namespace); end
  def load_boxed_info(info); end
  def load_constant_info(info); end
  def load_enum_info(info); end
  def load_enum_value(value_info, enum_module); end
  def load_field(info, i, field_info, klass, options = nil); end
  def load_field_reader(info, i, field_info, klass, name, method_name); end
  def load_field_writer(info, i, field_info, klass, name, method_name); end
  def load_fields(info, klass); end
  def load_flag_value(value_info, flags_module); end
  def load_flags_info(info); end
  def load_function_info(info); end
  def load_function_info_singleton_method(info, klass, method_name); end
  def load_info(info); end
  def load_interface_info(info); end
  def load_method_info(info, klass, method_name); end
  def load_methods(info, klass); end
  def load_methods_constructor(infos, klass); end
  def load_methods_function(infos, klass); end
  def load_methods_method(infos, klass); end
  def load_object_info(info); end
  def load_struct_info(info); end
  def load_union_info(info); end
  def load_virtual_functions(info, klass); end
  def post_load(repository, namespace); end
  def pre_load(repository, namespace); end
  def remove_existing_method(klass, method_name); end
  def rubyish_class_name(info); end
  def rubyish_field_reader_name(field_info, name); end
  def rubyish_gtype_name(name); end
  def rubyish_method_name(function_info, options = nil); end
  def self.define_class(*arg0); end
  def self.define_error(*arg0); end
  def self.define_interface(arg0, arg1, arg2); end
  def self.define_struct(*arg0); end
  def self.implement_virtual_function(arg0, arg1, arg2, arg3); end
  def self.instantiate_gobject_pointer(arg0); end
  def self.load(namespace, base_module, options = nil); end
  def self.reference_gobject(*arg0); end
  def self.register_boxed_class_converter(arg0); end
  def self.register_constant_rename_map(arg0, arg1); end
  def self.register_object_class_converter(arg0); end
  def self.start_callback_dispatch_thread; end
  def should_unlock_gvl?(function_info, klass); end
  def version; end
  def version=(arg0); end
end
module GObjectIntrospection
  def hook_up_vfunc(arg0, arg1, arg2); end
  def self.hook_up_vfunc(arg0, arg1, arg2); end
  def self.load(namespace, options = nil); end
  def self.prepend_typelib_path(path); end
end
module GObjectIntrospection::CollectionReader
  def collection_reader(name); end
end
module GObjectIntrospection::TypeTag::IntegerTypeTag
  def try_convert(type_info, value); end
end
module GObjectIntrospection::TypeTag::FloatTypeTag
  def try_convert(type_info, value); end
end
module GObjectIntrospection::TypeTag::ArrayTypeTag
  def description(type_info); end
  def get_element_type_info(type_info); end
  def try_convert(type_info, value); end
end
module GObjectIntrospection::Version
  def self.or_later?(major, minor, micro = nil); end
end
class GObjectIntrospection::Loader::Invoker
  def build(receiver, arguments, block); end
  def ensure_prepared; end
  def initialize(info, method_name, full_method_name); end
  def invalid_error_message(arguments); end
  def invoke(receiver, arguments, block, abort_tag = nil); end
  def normalize_arguments!(arguments, abort_tag); end
  def prepare_on_invalid; end
  def signature; end
  def wrong_number_of_arguments?(arguments); end
end
class GObjectIntrospection::Loader::VirtualFunctionImplementor
  def implement(implementor_gtype, name); end
  def initialize(loader_class, gtype_prefix, infos); end
end
module GObjectIntrospection::Loader::VirtualFunctionImplementable
  def implement_virtual_function(implementor_class, name); end
  def initialize_virtual_function_implementable(implementor); end
end
