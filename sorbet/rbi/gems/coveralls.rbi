# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/coveralls/all/coveralls.rbi
#
# coveralls-0.8.23

module Coveralls
  def noisy; end
  def noisy=(arg0); end
  def noisy?; end
  def push!; end
  def run_locally; end
  def run_locally=(arg0); end
  def setup!; end
  def should_run?; end
  def start!(simplecov_setting = nil, &block); end
  def testing; end
  def testing=(arg0); end
  def wear!(simplecov_setting = nil, &block); end
  def wear_merged!(simplecov_setting = nil, &block); end
  def will_run?; end
  extend Coveralls
end
module Coveralls::Configuration
  def self.configuration; end
  def self.configuration_path; end
  def self.git; end
  def self.pwd; end
  def self.rails_root; end
  def self.relevant_env; end
  def self.root; end
  def self.set_service_params_for_appveyor(config); end
  def self.set_service_params_for_circleci(config); end
  def self.set_service_params_for_coveralls_local(config); end
  def self.set_service_params_for_gitlab(config); end
  def self.set_service_params_for_jenkins(config); end
  def self.set_service_params_for_semaphore(config); end
  def self.set_service_params_for_tddium(config); end
  def self.set_service_params_for_travis(config, service_name); end
  def self.set_standard_service_params_for_generic_ci(config); end
  def self.simplecov_root; end
  def self.yaml_config; end
end
class Coveralls::API
  def self.apified_hash(hash); end
  def self.build_client(uri); end
  def self.build_request(path, hash); end
  def self.build_request_body(hash, boundary); end
  def self.disable_net_blockers!; end
  def self.endpoint_to_uri(endpoint); end
  def self.hash_to_file(hash); end
  def self.post_json(endpoint, hash); end
end
module Coveralls::Output
  def format(string, options = nil); end
  def no_color; end
  def no_color=(arg0); end
  def no_color?; end
  def output; end
  def output=(arg0); end
  def print(string, options = nil); end
  def puts(string, options = nil); end
  def silent; end
  def silent=(arg0); end
  def silent?; end
  extend Coveralls::Output
end
module Coveralls::SimpleCov
end
class Coveralls::SimpleCov::Formatter
  def display_error(e); end
  def display_result(result); end
  def format(result); end
  def get_source_files(result); end
  def output_message(result); end
  def short_filename(filename); end
end
class Coveralls::NilFormatter
  def format(result); end
end
