# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/cairo/all/cairo.rbi
#
# cairo-1.17.5

module Cairo
  def satisfied_version?(*arg0); end
  def self.bindings_version; end
  def self.exit_application(exception, status); end
  def self.normalize_const_name(name); end
  def self.satisfied_version?(*arg0); end
end
module Cairo::Color
  def parse(value, robust = nil); end
  def parse_hex_color(value); end
  def self.parse(value, robust = nil); end
  def self.parse_hex_color(value); end
  include Cairo::Color::X11
end
class Cairo::Color::Base
  def a; end
  def a=(arg0); end
  def alpha; end
  def alpha=(arg0); end
  def assert_in_range(value, description); end
  def initialize(a); end
end
class Cairo::Color::RGB < Cairo::Color::Base
  def ==(other); end
  def b; end
  def b=(arg0); end
  def blue; end
  def blue=(arg0); end
  def eql?(other); end
  def g; end
  def g=(arg0); end
  def green; end
  def green=(arg0); end
  def hash; end
  def initialize(r, g, b, a = nil); end
  def r; end
  def r=(arg0); end
  def red; end
  def red=(arg0); end
  def to_a; end
  def to_ary; end
  def to_cmyk; end
  def to_hsv; end
  def to_rgb; end
  def to_s; end
end
class Cairo::Color::CMYK < Cairo::Color::Base
  def c; end
  def c=(arg0); end
  def cyan; end
  def cyan=(arg0); end
  def initialize(c, m, y, k, a = nil); end
  def k; end
  def k=(arg0); end
  def key_plate; end
  def key_plate=(arg0); end
  def m; end
  def m=(arg0); end
  def magenta; end
  def magenta=(arg0); end
  def to_a; end
  def to_ary; end
  def to_cmyk; end
  def to_hsv; end
  def to_rgb; end
  def y; end
  def y=(arg0); end
  def yellow; end
  def yellow=(arg0); end
end
class Cairo::Color::HSV < Cairo::Color::Base
  def h; end
  def h=(arg0); end
  def hue; end
  def hue=(arg0); end
  def initialize(h, s, v, a = nil); end
  def s; end
  def s=(arg0); end
  def saturation; end
  def saturation=(arg0); end
  def to_a; end
  def to_ary; end
  def to_cmyk; end
  def to_hsv; end
  def to_rgb; end
  def v; end
  def v=(arg0); end
  def value; end
  def value=(arg0); end
end
class Cairo::Paper
  def ==(other); end
  def height(unit = nil); end
  def height=(arg0); end
  def height_in_delta?(value, delta = nil); end
  def in_delta?(value, delta, other); end
  def initialize(width, height, unit = nil, name = nil); end
  def name; end
  def name=(arg0); end
  def self.default_unit; end
  def self.default_unit=(unit); end
  def self.parse(paper_description, robust = nil); end
  def self.parse_size(size); end
  def self.register_unit_resolver(from_units, to_units, &resolver); end
  def self.resolve_constant(name); end
  def self.resolve_unit(size, from_unit, to_unit); end
  def size(unit = nil); end
  def to_s; end
  def unit; end
  def unit=(unit); end
  def width(unit = nil); end
  def width=(arg0); end
  def width_in_delta?(value, delta = nil); end
end
class Cairo::Paper::ParseError < ArgumentError
end
class Cairo::Paper::UnknownPaperName < Cairo::Paper::ParseError
  def initialize(name); end
  def name; end
end
class Cairo::Paper::UnknownUnit < Cairo::Paper::ParseError
  def initialize(unit); end
  def unit; end
end
class Cairo::Paper::UnrecognizedPaperDescription < Cairo::Paper::ParseError
  def description; end
  def initialize(description); end
end
module Cairo::Format
  def self.stride_for_width(arg0, arg1); end
end
module Cairo::SVGVersion
  def self.list; end
  def self.name(*arg0); end
  def self.names; end
end
module Cairo::PSLevel
  def self.list; end
  def self.name(*arg0); end
  def self.names; end
end
module Cairo::PDFVersion
  def self.list; end
  def self.name(*arg0); end
end
class Cairo::Context
  def antialias; end
  def antialias=(val); end
  def append_path(arg0); end
  def arc(arg0, arg1, arg2, arg3, arg4); end
  def arc_negative(arg0, arg1, arg2, arg3, arg4); end
  def begin_tag(*arg0); end
  def clip(*arg0); end
  def clip_extents; end
  def clip_preserve(&block); end
  def clip_rectangle_list; end
  def close_path; end
  def copy_page; end
  def copy_path; end
  def copy_path_flat; end
  def current_point; end
  def curve_to(*arg0); end
  def dash; end
  def dash_count; end
  def destroy; end
  def destroyed?; end
  def device_to_user(arg0, arg1); end
  def device_to_user_distance(arg0, arg1); end
  def end_tag(arg0); end
  def fill(*arg0); end
  def fill_extents; end
  def fill_preserve(&block); end
  def fill_rule; end
  def fill_rule=(val); end
  def font_extents; end
  def font_face; end
  def font_face=(val); end
  def font_matrix; end
  def font_matrix=(val); end
  def font_options; end
  def font_options=(val); end
  def font_size=(val); end
  def glyph_extents(arg0); end
  def glyph_path(arg0); end
  def group_target; end
  def has_current_point?; end
  def have_current_point?; end
  def identity_matrix; end
  def in_clip?(arg0, arg1); end
  def in_fill?(arg0, arg1); end
  def in_stroke?(arg0, arg1); end
  def initialize(arg0); end
  def line_cap; end
  def line_cap=(val); end
  def line_join; end
  def line_join=(val); end
  def line_to(arg0, arg1); end
  def line_width; end
  def line_width=(val); end
  def mask(*arg0); end
  def matrix; end
  def matrix=(val); end
  def miter_limit; end
  def miter_limit=(val); end
  def move_to(arg0, arg1); end
  def new_path; end
  def new_sub_path; end
  def operator; end
  def operator=(val); end
  def paint(*arg0); end
  def path_extents; end
  def pop_group(*arg0); end
  def pop_group_to_source; end
  def push_group(*arg0); end
  def raw_address; end
  def rectangle(arg0, arg1, arg2, arg3); end
  def reference_count; end
  def rel_curve_to(*arg0); end
  def rel_line_to(arg0, arg1); end
  def rel_move_to(arg0, arg1); end
  def reset_clip; end
  def restore; end
  def rotate(arg0); end
  def save; end
  def scale(arg0, arg1); end
  def scaled_font; end
  def scaled_font=(val); end
  def select_font_face(*arg0); end
  def self.create(*arg0); end
  def self.wrap(arg0); end
  def set_antialias(arg0); end
  def set_dash(*arg0); end
  def set_fill_rule(arg0); end
  def set_font_face(arg0); end
  def set_font_matrix(arg0); end
  def set_font_options(arg0); end
  def set_font_size(arg0); end
  def set_line_cap(arg0); end
  def set_line_join(arg0); end
  def set_line_width(arg0); end
  def set_matrix(arg0); end
  def set_miter_limit(arg0); end
  def set_operator(arg0); end
  def set_scaled_font(arg0); end
  def set_source(*arg0); end
  def set_source_rgb(*arg0); end
  def set_source_rgba(*arg0); end
  def set_tolerance(arg0); end
  def show_glyphs(arg0); end
  def show_page; end
  def show_text(arg0); end
  def show_text_glyphs(arg0, arg1, arg2, arg3); end
  def source; end
  def stroke(*arg0); end
  def stroke_extents; end
  def stroke_preserve(&block); end
  def tag(*arg0); end
  def target; end
  def text_extents(arg0); end
  def text_path(arg0); end
  def to_ptr; end
  def tolerance; end
  def tolerance=(val); end
  def transform(arg0); end
  def translate(arg0, arg1); end
  def user_to_device(arg0, arg1); end
  def user_to_device_distance(arg0, arg1); end
  include Cairo::Context::Blur
  include Cairo::Context::Circle
  include Cairo::Context::Color
  include Cairo::Context::Path
  include Cairo::Context::Rectangle
  include Cairo::Context::Triangle
end
class Cairo::Rectangle
  def height; end
  def height=(arg0); end
  def initialize(arg0, arg1, arg2, arg3); end
  def width; end
  def width=(arg0); end
  def x; end
  def x=(arg0); end
  def y; end
  def y=(arg0); end
end
class Cairo::Point
  def distance(other); end
  def initialize(arg0, arg1); end
  def to_a; end
  def to_ary; end
  def x; end
  def y; end
end
class Cairo::PathData
  def close_path?; end
  def curve_to?; end
  def each; end
  def initialize(arg0, arg1); end
  def line_to?; end
  def move_to?; end
  def points; end
  def to_a; end
  def to_ary; end
  def type; end
end
class Cairo::PathMoveTo < Cairo::PathData
  def initialize(*arg0); end
end
class Cairo::PathLineTo < Cairo::PathData
  def initialize(*arg0); end
end
class Cairo::PathCurveTo < Cairo::PathData
  def initialize(*arg0); end
end
class Cairo::PathClosePath < Cairo::PathData
  def initialize; end
end
class Cairo::Path
  def [](arg0); end
  def arc(*args, &block); end
  def arc_negative(*args, &block); end
  def circle(*args, &block); end
  def close; end
  def curve_to(*args, &block); end
  def each; end
  def empty?; end
  def initialize; end
  def length; end
  def line_to(*args, &block); end
  def move_to(*args, &block); end
  def new_path(*args, &block); end
  def new_sub_path(*args, &block); end
  def rectangle(*args, &block); end
  def rel_curve_to(*args, &block); end
  def rel_line_to(*args, &block); end
  def rel_move_to(*args, &block); end
  def rounded_rectangle(*args, &block); end
  def size; end
  extend Forwardable
end
class Cairo::Matrix
  def *(other); end
  def ==(arg0); end
  def clone; end
  def dup; end
  def identity!; end
  def initialize(arg0, arg1, arg2, arg3, arg4, arg5); end
  def invert!; end
  def invert; end
  def multiply!(arg0); end
  def multiply(other); end
  def rotate!(arg0); end
  def rotate(radians); end
  def scale!(arg0, arg1); end
  def scale(sx, sy); end
  def self.identity; end
  def self.rotate(arg0); end
  def self.scale(arg0, arg1); end
  def self.translate(arg0, arg1); end
  def set(arg0, arg1, arg2, arg3, arg4, arg5); end
  def set_x0(arg0); end
  def set_xx(arg0); end
  def set_xy(arg0); end
  def set_y0(arg0); end
  def set_yx(arg0); end
  def set_yy(arg0); end
  def to_a; end
  def to_s; end
  def transform_distance(arg0, arg1); end
  def transform_point(arg0, arg1); end
  def translate!(arg0, arg1); end
  def translate(tx, ty); end
  def x0; end
  def x0=(val); end
  def xx; end
  def xx=(val); end
  def xy; end
  def xy=(val); end
  def y0; end
  def y0=(val); end
  def yx; end
  def yx=(val); end
  def yy; end
  def yy=(val); end
end
class Cairo::Region
  def ==(arg0); end
  def [](arg0); end
  def contains_point?(*arg0); end
  def contains_rectangle(*arg0); end
  def dup; end
  def each_rectangle; end
  def empty?; end
  def extents; end
  def initialize(*arg0); end
  def intersect!(*arg0); end
  def num_rectangles; end
  def rectangles; end
  def subtract!(*arg0); end
  def translate!(*arg0); end
  def union!(*arg0); end
  def xor!(*arg0); end
end
class Cairo::Device
  def acquire; end
  def destroy; end
  def finish; end
  def flush; end
  def initialize(*arg0); end
  def release; end
  def self.script_supported?; end
  def self.supported?(type); end
  def self.xml_supported?; end
end
class Cairo::ScriptDevice < Cairo::Device
  def initialize(arg0); end
  def mode; end
  def mode=(val); end
  def reply(arg0); end
  def set_mode(arg0); end
  def write_comment(arg0); end
end
class Cairo::Surface
  def clone; end
  def content; end
  def copy_page; end
  def create_similar(*arg0); end
  def create_similar_image(*arg0); end
  def destroy; end
  def device; end
  def device_offset; end
  def device_scale; end
  def dup; end
  def fallback_resolution; end
  def finish; end
  def flush; end
  def font_options; end
  def get_mime_data(arg0); end
  def initialize(*arg0); end
  def map_to_image(*arg0); end
  def mark_dirty(*arg0); end
  def reference_count; end
  def self.create(*arg0); end
  def self.gl_supported?; end
  def self.gl_texture_supported?; end
  def self.image_supported?; end
  def self.pdf_supported?; end
  def self.ps_supported?; end
  def self.quartz_image_supported?; end
  def self.quartz_supported?; end
  def self.recording_supported?; end
  def self.script_supported?; end
  def self.supported?(type); end
  def self.svg_supported?; end
  def self.tee_supported?; end
  def self.win32_printing_supported?; end
  def self.win32_supported?; end
  def self.xml_supported?; end
  def set_device_offset(arg0, arg1); end
  def set_device_scale(arg0, arg1); end
  def set_fallback_resolution(arg0, arg1); end
  def set_mime_data(arg0, arg1); end
  def show_page; end
  def sub_rectangle_surface(arg0, arg1, arg2, arg3); end
  def supported_mime_type?(arg0); end
  def unmap_image(arg0); end
  def write_to_png(arg0); end
end
class Cairo::ImageSurface < Cairo::Surface
  def data; end
  def format; end
  def height; end
  def initialize(*arg0); end
  def self.from_png(arg0); end
  def stride; end
  def width; end
end
class Cairo::PDFSurface < Cairo::Surface
  def add_outline(arg0, arg1, arg2, arg3); end
  def initialize(*arg0); end
  def page_label=(val); end
  def restrict_to_version(arg0); end
  def set_metadata(arg0, arg1); end
  def set_page_label(arg0); end
  def set_size(*arg0); end
  def set_thumbnail_size(arg0, arg1); end
end
class Cairo::PSSurface < Cairo::Surface
  def dsc_begin_page_setup; end
  def dsc_begin_setup; end
  def dsc_comment(arg0); end
  def eps=(val); end
  def eps?; end
  def initialize(*arg0); end
  def restrict_to_level(arg0); end
  def set_eps(arg0); end
  def set_size(*arg0); end
end
class Cairo::SVGSurface < Cairo::Surface
  def document_unit; end
  def document_unit=(val); end
  def initialize(*arg0); end
  def restrict_to_version(arg0); end
  def self.version_to_string(version); end
  def self.versions; end
  def self.versions_as_string; end
  def set_document_unit(arg0); end
end
class Cairo::ScriptSurface < Cairo::Surface
  def initialize(*arg0); end
end
class Cairo::RecordingSurface < Cairo::Surface
  def extents; end
  def initialize(*arg0); end
  def ink_extents; end
end
class Cairo::TeeSurface < Cairo::Surface
  def <<(arg0); end
  def [](arg0); end
  def add(arg0); end
  def initialize(arg0); end
  def remove(arg0); end
end
class Cairo::FontFace
  def self.freetype_supported?; end
  def self.quartz_supported?; end
end
class Cairo::FreeTypeFontFace < Cairo::FontFace
  def initialize(arg0); end
end
class Cairo::ToyFontFace < Cairo::FontFace
  def family; end
  def initialize(*arg0); end
  def slant; end
  def weight; end
end
class Cairo::UserFontFace < Cairo::FontFace
  def initialize; end
  def on_init; end
  def on_render_glyph; end
  def on_text_to_glyphs; end
  def on_unicode_to_glyph; end
end
class Cairo::UserFontFace::TextToGlyphsData
  def cluster_flags; end
  def cluster_flags=(arg0); end
  def clusters; end
  def clusters=(arg0); end
  def glyphs; end
  def glyphs=(arg0); end
  def initialize(arg0, arg1, arg2); end
  def need_cluster_flags?; end
  def need_clusters?; end
  def need_glyphs?; end
end
class Cairo::FontExtents
  def ascent; end
  def ascent=(val); end
  def descent; end
  def descent=(val); end
  def height; end
  def height=(val); end
  def initialize; end
  def max_x_advance; end
  def max_x_advance=(val); end
  def max_y_advance; end
  def max_y_advance=(val); end
  def set_ascent(arg0); end
  def set_descent(arg0); end
  def set_height(arg0); end
  def set_max_x_advance(arg0); end
  def set_max_y_advance(arg0); end
  def to_s; end
end
class Cairo::FontOptions
  def ==(arg0); end
  def antialias; end
  def antialias=(val); end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def hint_metrics; end
  def hint_metrics=(val); end
  def hint_style; end
  def hint_style=(val); end
  def initialize; end
  def merge!(arg0); end
  def merge(other); end
  def set_antialias(arg0); end
  def set_hint_metrics(arg0); end
  def set_hint_style(arg0); end
  def set_subpixel_order(arg0); end
  def subpixel_order; end
  def subpixel_order=(val); end
  def update(arg0); end
end
class Cairo::ScaledFont
  def ctm; end
  def extents; end
  def font_face; end
  def font_matrix; end
  def font_options; end
  def glyph_extents(arg0); end
  def initialize(arg0, arg1, arg2, arg3); end
  def scale_matrix; end
  def text_extents(arg0); end
  def text_to_glyphs(arg0, arg1, arg2); end
end
class Cairo::TextExtents
  def height; end
  def height=(val); end
  def initialize; end
  def set_height(arg0); end
  def set_width(arg0); end
  def set_x_advance(arg0); end
  def set_x_bearing(arg0); end
  def set_y_advance(arg0); end
  def set_y_bearing(arg0); end
  def to_s; end
  def width; end
  def width=(val); end
  def x_advance; end
  def x_advance=(val); end
  def x_bearing; end
  def x_bearing=(val); end
  def y_advance; end
  def y_advance=(val); end
  def y_bearing; end
  def y_bearing=(val); end
end
class Cairo::Pattern
  def __extend__(mod, *args); end
  def extend; end
  def extend=(val); end
  def filter; end
  def filter=(val); end
  def initialize(*arg0); end
  def matrix; end
  def matrix=(val); end
  def self.gradient_supported?; end
  def self.linear_supported?; end
  def self.mesh_supported?; end
  def self.radial_supported?; end
  def self.raster_source_supported?; end
  def self.solid_supported?; end
  def self.supported?(type); end
  def self.surface_supported?; end
  def set_extend(arg0); end
  def set_filter(arg0); end
  def set_matrix(arg0); end
end
class Cairo::SolidPattern < Cairo::Pattern
  def color; end
  def initialize(*arg0); end
  def rgba; end
end
class Cairo::SurfacePattern < Cairo::Pattern
  def initialize(arg0); end
  def surface; end
end
class Cairo::GradientPattern < Cairo::Pattern
  def add_color_stop(*arg0); end
  def add_color_stop_rgb(*arg0); end
  def add_color_stop_rgba(*arg0); end
  def color_stop_count; end
  def get_color_stop_color(arg0); end
  def get_color_stop_rgba(arg0); end
end
class Cairo::LinearPattern < Cairo::GradientPattern
  def initialize(arg0, arg1, arg2, arg3); end
  def points; end
end
class Cairo::RadialPattern < Cairo::GradientPattern
  def circles; end
  def initialize(arg0, arg1, arg2, arg3, arg4, arg5); end
end
class Cairo::MeshPattern < Cairo::Pattern
  def begin_patch; end
  def curve_to(arg0, arg1, arg2, arg3, arg4, arg5); end
  def end_patch; end
  def get_control_point(arg0, arg1); end
  def get_corner_color(arg0, arg1); end
  def get_path(arg0); end
  def initialize; end
  def line_to(arg0, arg1); end
  def move_to(arg0, arg1); end
  def patch_count; end
  def set_control_point(arg0, arg1, arg2); end
  def set_corner_color(*arg0); end
  def set_corner_color_rgb(*arg0); end
  def set_corner_color_rgba(*arg0); end
end
class Cairo::RasterSourcePattern < Cairo::Pattern
  def acquire; end
  def copy; end
  def finish; end
  def initialize(*arg0); end
  def release; end
  def snapshot; end
end
class Cairo::Glyph
  def index; end
  def index=(val); end
  def initialize(arg0, arg1, arg2); end
  def set_index(arg0); end
  def set_x(arg0); end
  def set_y(arg0); end
  def to_s; end
  def x; end
  def x=(val); end
  def y; end
  def y=(val); end
end
class Cairo::TextCluster
  def initialize(arg0, arg1); end
  def num_bytes; end
  def num_bytes=(val); end
  def num_glyphs; end
  def num_glyphs=(val); end
  def set_num_bytes(arg0); end
  def set_num_glyphs(arg0); end
  def to_s; end
end
module Cairo::Color::X11
end
module Cairo::Context::Rectangle
  def rounded_rectangle(x, y, width, height, x_radius, y_radius = nil); end
end
module Cairo::Context::Triangle
  def triangle(x1, y1, x2, y2, x3, y3); end
end
module Cairo::Context::Circle
  def circle(center_x, center_y, radius); end
end
module Cairo::Context::Path
  def map_path_onto(path); end
  def parameterize_path(path); end
  def transform_path(path, &block); end
end
module Cairo::Context::Blur
  def pseudo_blur(radius = nil, &block); end
end
module Cairo::Context::Color
  def set_source_color(color); end
end
